
blue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b08  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007cc  08008cd8  08008cd8  00018cd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094a4  080094a4  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  080094a4  080094a4  000194a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094ac  080094ac  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094ac  080094ac  000194ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094b0  080094b0  000194b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  080094b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  2000020c  080096c0  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  080096c0  00020438  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b870  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002079  00000000  00000000  0002baac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e8  00000000  00000000  0002db28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007f0  00000000  00000000  0002e410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000229e5  00000000  00000000  0002ec00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da7b  00000000  00000000  000515e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cabd8  00000000  00000000  0005f060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00129c38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003450  00000000  00000000  00129c88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000020c 	.word	0x2000020c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008cc0 	.word	0x08008cc0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000210 	.word	0x20000210
 800020c:	08008cc0 	.word	0x08008cc0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <AirSet>:
  * @brief  電磁弁をUSART/UARTで制御します
  * @param  USARTx_2: 使用するUSART/UART
  * @param  AS1: 基板上のAS1で1ならON,0ならOFFになる(AS他も同様)
  * @retval 無し
  */
void AirSet(USART_TypeDef* USARTx_2,int AS1,int AS2,int AS3,int AS4){
 8000f8c:	b480      	push	{r7}
 8000f8e:	b087      	sub	sp, #28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
 8000f98:	603b      	str	r3, [r7, #0]
	uint8_t send = 240;	//0x240 = 0b10010000
 8000f9a:	23f0      	movs	r3, #240	; 0xf0
 8000f9c:	75fb      	strb	r3, [r7, #23]
	send |= AS1 << 3;   //
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	b25a      	sxtb	r2, r3
 8000fa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	b25b      	sxtb	r3, r3
 8000fac:	75fb      	strb	r3, [r7, #23]
	send |= AS2 << 2;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	b25a      	sxtb	r2, r3
 8000fb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	b25b      	sxtb	r3, r3
 8000fbc:	75fb      	strb	r3, [r7, #23]
	send |= AS3 << 1;
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	b25a      	sxtb	r2, r3
 8000fc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b25b      	sxtb	r3, r3
 8000fcc:	75fb      	strb	r3, [r7, #23]
	send |= AS4;
 8000fce:	6a3b      	ldr	r3, [r7, #32]
 8000fd0:	b25a      	sxtb	r2, r3
 8000fd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	b25b      	sxtb	r3, r3
 8000fda:	75fb      	strb	r3, [r7, #23]
	while ( (USARTx_2->SR & 0x0080) != 0x0080);
 8000fdc:	bf00      	nop
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fe6:	2b80      	cmp	r3, #128	; 0x80
 8000fe8:	d1f9      	bne.n	8000fde <AirSet+0x52>
		USARTx_2->DR = (uint8_t)send;
 8000fea:	7dfa      	ldrb	r2, [r7, #23]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	605a      	str	r2, [r3, #4]
}
 8000ff0:	bf00      	nop
 8000ff2:	371c      	adds	r7, #28
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <MD03SetMotor>:
  * @param  id : 駆動するMD(0～15)
  * @param  pow: MDの出力(±950)
  *
  * @retval 無し
  */
void MD03SetMotor(USART_TypeDef* USARTx_2,uint8_t id,int pow){
 8000ffc:	b480      	push	{r7}
 8000ffe:	b087      	sub	sp, #28
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	460b      	mov	r3, r1
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	72fb      	strb	r3, [r7, #11]
	uint8_t res;
	uint8_t sum=6;
 800100a:	2306      	movs	r3, #6
 800100c:	75fb      	strb	r3, [r7, #23]
	if(pow>950)pow=950;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f240 32b6 	movw	r2, #950	; 0x3b6
 8001014:	4293      	cmp	r3, r2
 8001016:	dd02      	ble.n	800101e <MD03SetMotor+0x22>
 8001018:	f240 33b6 	movw	r3, #950	; 0x3b6
 800101c:	607b      	str	r3, [r7, #4]
	if(pow<-950)pow=-950;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a2c      	ldr	r2, [pc, #176]	; (80010d4 <MD03SetMotor+0xd8>)
 8001022:	4293      	cmp	r3, r2
 8001024:	da01      	bge.n	800102a <MD03SetMotor+0x2e>
 8001026:	4b2b      	ldr	r3, [pc, #172]	; (80010d4 <MD03SetMotor+0xd8>)
 8001028:	607b      	str	r3, [r7, #4]

	pow+=1000;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001030:	607b      	str	r3, [r7, #4]

	res= 0b10000000 | (0b1111 & id);
 8001032:	7afb      	ldrb	r3, [r7, #11]
 8001034:	f003 030f 	and.w	r3, r3, #15
 8001038:	b2db      	uxtb	r3, r3
 800103a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800103e:	75bb      	strb	r3, [r7, #22]
	sum+=res;
 8001040:	7dfa      	ldrb	r2, [r7, #23]
 8001042:	7dbb      	ldrb	r3, [r7, #22]
 8001044:	4413      	add	r3, r2
 8001046:	75fb      	strb	r3, [r7, #23]
	while ( (USARTx_2->SR & 0x0080) != 0x0080);//0x0080=USART_TXE
 8001048:	bf00      	nop
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001052:	2b80      	cmp	r3, #128	; 0x80
 8001054:	d1f9      	bne.n	800104a <MD03SetMotor+0x4e>
	USARTx_2->DR = (uint8_t)res;
 8001056:	7dba      	ldrb	r2, [r7, #22]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	605a      	str	r2, [r3, #4]

	res=pow & 0x7F;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	b2db      	uxtb	r3, r3
 8001060:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001064:	75bb      	strb	r3, [r7, #22]
	sum+=res;
 8001066:	7dfa      	ldrb	r2, [r7, #23]
 8001068:	7dbb      	ldrb	r3, [r7, #22]
 800106a:	4413      	add	r3, r2
 800106c:	75fb      	strb	r3, [r7, #23]
	while ( (USARTx_2->SR & 0x0080) != 0x0080);
 800106e:	bf00      	nop
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001078:	2b80      	cmp	r3, #128	; 0x80
 800107a:	d1f9      	bne.n	8001070 <MD03SetMotor+0x74>
	USARTx_2->DR = (uint8_t)res;
 800107c:	7dba      	ldrb	r2, [r7, #22]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	605a      	str	r2, [r3, #4]

	res=(pow >> 7) & 0x7F;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	11db      	asrs	r3, r3, #7
 8001086:	b2db      	uxtb	r3, r3
 8001088:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800108c:	75bb      	strb	r3, [r7, #22]
	sum+=res;
 800108e:	7dfa      	ldrb	r2, [r7, #23]
 8001090:	7dbb      	ldrb	r3, [r7, #22]
 8001092:	4413      	add	r3, r2
 8001094:	75fb      	strb	r3, [r7, #23]
	while ( (USARTx_2->SR & 0x0080) != 0x0080);
 8001096:	bf00      	nop
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010a0:	2b80      	cmp	r3, #128	; 0x80
 80010a2:	d1f9      	bne.n	8001098 <MD03SetMotor+0x9c>
	USARTx_2->DR = (uint8_t)res;
 80010a4:	7dba      	ldrb	r2, [r7, #22]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	605a      	str	r2, [r3, #4]

	res = sum & 0x7F;
 80010aa:	7dfb      	ldrb	r3, [r7, #23]
 80010ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010b0:	75bb      	strb	r3, [r7, #22]
	while ( (USARTx_2->SR & 0x0080) != 0x0080);
 80010b2:	bf00      	nop
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010bc:	2b80      	cmp	r3, #128	; 0x80
 80010be:	d1f9      	bne.n	80010b4 <MD03SetMotor+0xb8>
	USARTx_2->DR = (uint8_t)res;
 80010c0:	7dba      	ldrb	r2, [r7, #22]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	605a      	str	r2, [r3, #4]

}
 80010c6:	bf00      	nop
 80010c8:	371c      	adds	r7, #28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	fffffc4a 	.word	0xfffffc4a

080010d8 <MX_GPIO_Init>:
     PB1   ------> SDIO_D2
     PC9   ------> SDIO_D1
     PC11   ------> SDIO_D3
*/
void MX_GPIO_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	; 0x28
 80010dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
 80010ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
 80010f2:	4b5d      	ldr	r3, [pc, #372]	; (8001268 <MX_GPIO_Init+0x190>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a5c      	ldr	r2, [pc, #368]	; (8001268 <MX_GPIO_Init+0x190>)
 80010f8:	f043 0304 	orr.w	r3, r3, #4
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b5a      	ldr	r3, [pc, #360]	; (8001268 <MX_GPIO_Init+0x190>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0304 	and.w	r3, r3, #4
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	4b56      	ldr	r3, [pc, #344]	; (8001268 <MX_GPIO_Init+0x190>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a55      	ldr	r2, [pc, #340]	; (8001268 <MX_GPIO_Init+0x190>)
 8001114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b53      	ldr	r3, [pc, #332]	; (8001268 <MX_GPIO_Init+0x190>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	4b4f      	ldr	r3, [pc, #316]	; (8001268 <MX_GPIO_Init+0x190>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a4e      	ldr	r2, [pc, #312]	; (8001268 <MX_GPIO_Init+0x190>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b4c      	ldr	r3, [pc, #304]	; (8001268 <MX_GPIO_Init+0x190>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	4b48      	ldr	r3, [pc, #288]	; (8001268 <MX_GPIO_Init+0x190>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a47      	ldr	r2, [pc, #284]	; (8001268 <MX_GPIO_Init+0x190>)
 800114c:	f043 0302 	orr.w	r3, r3, #2
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b45      	ldr	r3, [pc, #276]	; (8001268 <MX_GPIO_Init+0x190>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|B_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800115e:	2200      	movs	r2, #0
 8001160:	210f      	movs	r1, #15
 8001162:	4842      	ldr	r0, [pc, #264]	; (800126c <MX_GPIO_Init+0x194>)
 8001164:	f002 fada 	bl	800371c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001168:	2200      	movs	r2, #0
 800116a:	2120      	movs	r1, #32
 800116c:	4840      	ldr	r0, [pc, #256]	; (8001270 <MX_GPIO_Init+0x198>)
 800116e:	f002 fad5 	bl	800371c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	2101      	movs	r1, #1
 8001176:	483f      	ldr	r0, [pc, #252]	; (8001274 <MX_GPIO_Init+0x19c>)
 8001178:	f002 fad0 	bl	800371c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800117c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001180:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001182:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001186:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	4619      	mov	r1, r3
 8001192:	4836      	ldr	r0, [pc, #216]	; (800126c <MX_GPIO_Init+0x194>)
 8001194:	f002 f92e 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|B_Pin|LED1_Pin|LED2_Pin;
 8001198:	230f      	movs	r3, #15
 800119a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119c:	2301      	movs	r3, #1
 800119e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	4619      	mov	r1, r3
 80011ae:	482f      	ldr	r0, [pc, #188]	; (800126c <MX_GPIO_Init+0x194>)
 80011b0:	f002 f920 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = R_Pin;
 80011b4:	2310      	movs	r3, #16
 80011b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(R_GPIO_Port, &GPIO_InitStruct);
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	4619      	mov	r1, r3
 80011c6:	482a      	ldr	r0, [pc, #168]	; (8001270 <MX_GPIO_Init+0x198>)
 80011c8:	f002 f914 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011cc:	2320      	movs	r3, #32
 80011ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d0:	2301      	movs	r3, #1
 80011d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d8:	2300      	movs	r3, #0
 80011da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	4619      	mov	r1, r3
 80011e2:	4823      	ldr	r0, [pc, #140]	; (8001270 <MX_GPIO_Init+0x198>)
 80011e4:	f002 f906 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = G_Pin;
 80011e8:	2301      	movs	r3, #1
 80011ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ec:	2301      	movs	r3, #1
 80011ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2300      	movs	r3, #0
 80011f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(G_GPIO_Port, &GPIO_InitStruct);
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	4619      	mov	r1, r3
 80011fe:	481d      	ldr	r0, [pc, #116]	; (8001274 <MX_GPIO_Init+0x19c>)
 8001200:	f002 f8f8 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001204:	2302      	movs	r3, #2
 8001206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	2302      	movs	r3, #2
 800120a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001210:	2303      	movs	r3, #3
 8001212:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001214:	230c      	movs	r3, #12
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4619      	mov	r1, r3
 800121e:	4815      	ldr	r0, [pc, #84]	; (8001274 <MX_GPIO_Init+0x19c>)
 8001220:	f002 f8e8 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001224:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001228:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800122a:	2300      	movs	r3, #0
 800122c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	4619      	mov	r1, r3
 8001238:	480e      	ldr	r0, [pc, #56]	; (8001274 <MX_GPIO_Init+0x19c>)
 800123a:	f002 f8db 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC9 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800123e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001242:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	2302      	movs	r3, #2
 8001246:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124c:	2303      	movs	r3, #3
 800124e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001250:	230c      	movs	r3, #12
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4619      	mov	r1, r3
 800125a:	4804      	ldr	r0, [pc, #16]	; (800126c <MX_GPIO_Init+0x194>)
 800125c:	f002 f8ca 	bl	80033f4 <HAL_GPIO_Init>

}
 8001260:	bf00      	nop
 8001262:	3728      	adds	r7, #40	; 0x28
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40023800 	.word	0x40023800
 800126c:	40020800 	.word	0x40020800
 8001270:	40020000 	.word	0x40020000
 8001274:	40020400 	.word	0x40020400

08001278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001278:	b5b0      	push	{r4, r5, r7, lr}
 800127a:	ed2d 8b02 	vpush	{d8}
 800127e:	b088      	sub	sp, #32
 8001280:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 8001282:	4b71      	ldr	r3, [pc, #452]	; (8001448 <main+0x1d0>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	2100      	movs	r1, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f004 fdfe 	bl	8005e8c <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001290:	f001 fe76 	bl	8002f80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001294:	f001 f930 	bl	80024f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001298:	f7ff ff1e 	bl	80010d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800129c:	f001 fc66 	bl	8002b6c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80012a0:	f001 fc3a 	bl	8002b18 <MX_USART1_UART_Init>
  MX_UART4_Init();
 80012a4:	f001 fc0e 	bl	8002ac4 <MX_UART4_Init>
  MX_USART3_UART_Init();
 80012a8:	f001 fc8a 	bl	8002bc0 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80012ac:	f001 fcb2 	bl	8002c14 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, SBDBTRxData, 8);
 80012b0:	2208      	movs	r2, #8
 80012b2:	4966      	ldr	r1, [pc, #408]	; (800144c <main+0x1d4>)
 80012b4:	4866      	ldr	r0, [pc, #408]	; (8001450 <main+0x1d8>)
 80012b6:	f003 f9b4 	bl	8004622 <HAL_UART_Receive_IT>

  uint8_t init_data[]={0xAA,0x00,0x3D,0x01,0x08};
 80012ba:	4a66      	ldr	r2, [pc, #408]	; (8001454 <main+0x1dc>)
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012c4:	6018      	str	r0, [r3, #0]
 80012c6:	3304      	adds	r3, #4
 80012c8:	7019      	strb	r1, [r3, #0]
  uint8_t req_data[]={0xAA,0x01,0x1A,0x02};
 80012ca:	4b63      	ldr	r3, [pc, #396]	; (8001458 <main+0x1e0>)
 80012cc:	60bb      	str	r3, [r7, #8]
  uint8_t rec_data[4];

    HAL_Delay(500);
 80012ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012d2:	f001 fec7 	bl	8003064 <HAL_Delay>

    HAL_UART_Transmit(&huart4, init_data, 5 , 100);
 80012d6:	f107 010c 	add.w	r1, r7, #12
 80012da:	2364      	movs	r3, #100	; 0x64
 80012dc:	2205      	movs	r2, #5
 80012de:	485f      	ldr	r0, [pc, #380]	; (800145c <main+0x1e4>)
 80012e0:	f003 f86b 	bl	80043ba <HAL_UART_Transmit>
    HAL_UART_Receive(&huart4, rec_data, 2, 100);
 80012e4:	1d39      	adds	r1, r7, #4
 80012e6:	2364      	movs	r3, #100	; 0x64
 80012e8:	2202      	movs	r2, #2
 80012ea:	485c      	ldr	r0, [pc, #368]	; (800145c <main+0x1e4>)
 80012ec:	f003 f8f7 	bl	80044de <HAL_UART_Receive>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //リレーのONとOFF.
	  if(buttonsIsPressed[START] != 0){
 80012f0:	4b5b      	ldr	r3, [pc, #364]	; (8001460 <main+0x1e8>)
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d01e      	beq.n	8001336 <main+0xbe>
		  if(is_relay_on == 0){
 80012f8:	4b5a      	ldr	r3, [pc, #360]	; (8001464 <main+0x1ec>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d103      	bne.n	8001308 <main+0x90>
			  is_relay_on = GPIO_PIN_SET;
 8001300:	4b58      	ldr	r3, [pc, #352]	; (8001464 <main+0x1ec>)
 8001302:	2201      	movs	r2, #1
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	e002      	b.n	800130e <main+0x96>
			  //printf("ON\r\n");
		}else{
			is_relay_on = GPIO_PIN_RESET;
 8001308:	4b56      	ldr	r3, [pc, #344]	; (8001464 <main+0x1ec>)
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
			//printf("OFF\r\n");
		}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, is_relay_on);
 800130e:	4b55      	ldr	r3, [pc, #340]	; (8001464 <main+0x1ec>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	b2db      	uxtb	r3, r3
 8001314:	461a      	mov	r2, r3
 8001316:	2101      	movs	r1, #1
 8001318:	4853      	ldr	r0, [pc, #332]	; (8001468 <main+0x1f0>)
 800131a:	f002 f9ff 	bl	800371c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, is_relay_on);
 800131e:	4b51      	ldr	r3, [pc, #324]	; (8001464 <main+0x1ec>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	b2db      	uxtb	r3, r3
 8001324:	461a      	mov	r2, r3
 8001326:	2108      	movs	r1, #8
 8001328:	484f      	ldr	r0, [pc, #316]	; (8001468 <main+0x1f0>)
 800132a:	f002 f9f7 	bl	800371c <HAL_GPIO_WritePin>
		HAL_Delay(300);
 800132e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001332:	f001 fe97 	bl	8003064 <HAL_Delay>
	  }

	  //ジャイロ変数の定義.
	  if(HAL_UART_Transmit(&huart4, req_data, 4 , 100)==HAL_OK){
 8001336:	f107 0108 	add.w	r1, r7, #8
 800133a:	2364      	movs	r3, #100	; 0x64
 800133c:	2204      	movs	r2, #4
 800133e:	4847      	ldr	r0, [pc, #284]	; (800145c <main+0x1e4>)
 8001340:	f003 f83b 	bl	80043ba <HAL_UART_Transmit>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d15b      	bne.n	8001402 <main+0x18a>
		  if (HAL_UART_Receive(&huart4, rec_data, 2, 100)==HAL_OK) {
 800134a:	1d39      	adds	r1, r7, #4
 800134c:	2364      	movs	r3, #100	; 0x64
 800134e:	2202      	movs	r2, #2
 8001350:	4842      	ldr	r0, [pc, #264]	; (800145c <main+0x1e4>)
 8001352:	f003 f8c4 	bl	80044de <HAL_UART_Receive>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d152      	bne.n	8001402 <main+0x18a>
			  if (rec_data[0]==0xBB && rec_data[1]==2){
 800135c:	793b      	ldrb	r3, [r7, #4]
 800135e:	2bbb      	cmp	r3, #187	; 0xbb
 8001360:	d14f      	bne.n	8001402 <main+0x18a>
 8001362:	797b      	ldrb	r3, [r7, #5]
 8001364:	2b02      	cmp	r3, #2
 8001366:	d14c      	bne.n	8001402 <main+0x18a>
				  if (HAL_UART_Receive(&huart4, rec_data, 2, 100)==HAL_OK){
 8001368:	1d39      	adds	r1, r7, #4
 800136a:	2364      	movs	r3, #100	; 0x64
 800136c:	2202      	movs	r2, #2
 800136e:	483b      	ldr	r0, [pc, #236]	; (800145c <main+0x1e4>)
 8001370:	f003 f8b5 	bl	80044de <HAL_UART_Receive>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d143      	bne.n	8001402 <main+0x18a>
					  deg_raw=rec_data[0] | (rec_data[1]<<8);
 800137a:	793b      	ldrb	r3, [r7, #4]
 800137c:	461a      	mov	r2, r3
 800137e:	797b      	ldrb	r3, [r7, #5]
 8001380:	021b      	lsls	r3, r3, #8
 8001382:	4313      	orrs	r3, r2
 8001384:	4a39      	ldr	r2, [pc, #228]	; (800146c <main+0x1f4>)
 8001386:	6013      	str	r3, [r2, #0]
		  			  deg=(float)deg_raw/16;
 8001388:	4b38      	ldr	r3, [pc, #224]	; (800146c <main+0x1f4>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	ee07 3a90 	vmov	s15, r3
 8001390:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001394:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001398:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800139c:	4b34      	ldr	r3, [pc, #208]	; (8001470 <main+0x1f8>)
 800139e:	edc3 7a00 	vstr	s15, [r3]
		  			  deg_rad = CHANGE_TO_RAD(deg);
 80013a2:	4b33      	ldr	r3, [pc, #204]	; (8001470 <main+0x1f8>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff f8ee 	bl	8000588 <__aeabi_f2d>
 80013ac:	a324      	add	r3, pc, #144	; (adr r3, 8001440 <main+0x1c8>)
 80013ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b2:	f7ff f941 	bl	8000638 <__aeabi_dmul>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4610      	mov	r0, r2
 80013bc:	4619      	mov	r1, r3
 80013be:	f04f 0200 	mov.w	r2, #0
 80013c2:	4b2c      	ldr	r3, [pc, #176]	; (8001474 <main+0x1fc>)
 80013c4:	f7ff fa62 	bl	800088c <__aeabi_ddiv>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4610      	mov	r0, r2
 80013ce:	4619      	mov	r1, r3
 80013d0:	f7ff fc0a 	bl	8000be8 <__aeabi_d2f>
 80013d4:	4603      	mov	r3, r0
 80013d6:	4a28      	ldr	r2, [pc, #160]	; (8001478 <main+0x200>)
 80013d8:	6013      	str	r3, [r2, #0]
		  			  deg_rad = normalize_angle(deg_rad);
 80013da:	4b27      	ldr	r3, [pc, #156]	; (8001478 <main+0x200>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff f8d2 	bl	8000588 <__aeabi_f2d>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	ec43 2b10 	vmov	d0, r2, r3
 80013ec:	f001 f990 	bl	8002710 <normalize_angle>
 80013f0:	ec53 2b10 	vmov	r2, r3, d0
 80013f4:	4610      	mov	r0, r2
 80013f6:	4619      	mov	r1, r3
 80013f8:	f7ff fbf6 	bl	8000be8 <__aeabi_d2f>
 80013fc:	4603      	mov	r3, r0
 80013fe:	4a1e      	ldr	r2, [pc, #120]	; (8001478 <main+0x200>)
 8001400:	6013      	str	r3, [r2, #0]
		  	  }
		  }
	  }

	  //?��?ープLED
	  if(buttonsIsPressed[TRIANGLE] != 0){
 8001402:	4b17      	ldr	r3, [pc, #92]	; (8001460 <main+0x1e8>)
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d054      	beq.n	80014b4 <main+0x23c>
		  if(v_goal == 0){
 800140a:	4b1c      	ldr	r3, [pc, #112]	; (800147c <main+0x204>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d13a      	bne.n	8001488 <main+0x210>
			  v_goal = 1;
 8001412:	4b1a      	ldr	r3, [pc, #104]	; (800147c <main+0x204>)
 8001414:	2201      	movs	r2, #1
 8001416:	601a      	str	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);	//R
 8001418:	2201      	movs	r2, #1
 800141a:	2110      	movs	r1, #16
 800141c:	4818      	ldr	r0, [pc, #96]	; (8001480 <main+0x208>)
 800141e:	f002 f97d 	bl	800371c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);	//G
 8001422:	2201      	movs	r2, #1
 8001424:	2101      	movs	r1, #1
 8001426:	4817      	ldr	r0, [pc, #92]	; (8001484 <main+0x20c>)
 8001428:	f002 f978 	bl	800371c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);	//B
 800142c:	2201      	movs	r2, #1
 800142e:	2102      	movs	r1, #2
 8001430:	480d      	ldr	r0, [pc, #52]	; (8001468 <main+0x1f0>)
 8001432:	f002 f973 	bl	800371c <HAL_GPIO_WritePin>
			  HAL_Delay(300);
 8001436:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800143a:	f001 fe13 	bl	8003064 <HAL_Delay>
 800143e:	e039      	b.n	80014b4 <main+0x23c>
 8001440:	4d12d84a 	.word	0x4d12d84a
 8001444:	400921fb 	.word	0x400921fb
 8001448:	2000003c 	.word	0x2000003c
 800144c:	20000228 	.word	0x20000228
 8001450:	20000314 	.word	0x20000314
 8001454:	08008cd8 	.word	0x08008cd8
 8001458:	021a01aa 	.word	0x021a01aa
 800145c:	200002d0 	.word	0x200002d0
 8001460:	20000230 	.word	0x20000230
 8001464:	20000280 	.word	0x20000280
 8001468:	40020800 	.word	0x40020800
 800146c:	2000029c 	.word	0x2000029c
 8001470:	20000294 	.word	0x20000294
 8001474:	40668000 	.word	0x40668000
 8001478:	20000298 	.word	0x20000298
 800147c:	20000288 	.word	0x20000288
 8001480:	40020000 	.word	0x40020000
 8001484:	40020400 	.word	0x40020400
		  }else{
			  v_goal = 0;
 8001488:	4bab      	ldr	r3, [pc, #684]	; (8001738 <main+0x4c0>)
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800148e:	2200      	movs	r2, #0
 8001490:	2110      	movs	r1, #16
 8001492:	48aa      	ldr	r0, [pc, #680]	; (800173c <main+0x4c4>)
 8001494:	f002 f942 	bl	800371c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001498:	2200      	movs	r2, #0
 800149a:	2101      	movs	r1, #1
 800149c:	48a8      	ldr	r0, [pc, #672]	; (8001740 <main+0x4c8>)
 800149e:	f002 f93d 	bl	800371c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2102      	movs	r1, #2
 80014a6:	48a7      	ldr	r0, [pc, #668]	; (8001744 <main+0x4cc>)
 80014a8:	f002 f938 	bl	800371c <HAL_GPIO_WritePin>
			  HAL_Delay(300);
 80014ac:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80014b0:	f001 fdd8 	bl	8003064 <HAL_Delay>
		  }
	  }

	  //ボタンにおける回転制御.
	  if(is_relay_on == GPIO_PIN_SET){
 80014b4:	4ba4      	ldr	r3, [pc, #656]	; (8001748 <main+0x4d0>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d135      	bne.n	8001528 <main+0x2b0>
		  if(buttonsIsPressed[R1]){
 80014bc:	4ba3      	ldr	r3, [pc, #652]	; (800174c <main+0x4d4>)
 80014be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d016      	beq.n	80014f2 <main+0x27a>
			  target_rad += CHANGE_TO_RAD(90.);
 80014c4:	4ba2      	ldr	r3, [pc, #648]	; (8001750 <main+0x4d8>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff f85d 	bl	8000588 <__aeabi_f2d>
 80014ce:	a390      	add	r3, pc, #576	; (adr r3, 8001710 <main+0x498>)
 80014d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d4:	f7fe fefa 	bl	80002cc <__adddf3>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4610      	mov	r0, r2
 80014de:	4619      	mov	r1, r3
 80014e0:	f7ff fb82 	bl	8000be8 <__aeabi_d2f>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4a9a      	ldr	r2, [pc, #616]	; (8001750 <main+0x4d8>)
 80014e8:	6013      	str	r3, [r2, #0]
			  HAL_Delay(300);
 80014ea:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80014ee:	f001 fdb9 	bl	8003064 <HAL_Delay>
		  }
		  if(buttonsIsPressed[L1]){
 80014f2:	4b96      	ldr	r3, [pc, #600]	; (800174c <main+0x4d4>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d016      	beq.n	8001528 <main+0x2b0>
			  target_rad -= CHANGE_TO_RAD(90.);
 80014fa:	4b95      	ldr	r3, [pc, #596]	; (8001750 <main+0x4d8>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff f842 	bl	8000588 <__aeabi_f2d>
 8001504:	a382      	add	r3, pc, #520	; (adr r3, 8001710 <main+0x498>)
 8001506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150a:	f7fe fedd 	bl	80002c8 <__aeabi_dsub>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4610      	mov	r0, r2
 8001514:	4619      	mov	r1, r3
 8001516:	f7ff fb67 	bl	8000be8 <__aeabi_d2f>
 800151a:	4603      	mov	r3, r0
 800151c:	4a8c      	ldr	r2, [pc, #560]	; (8001750 <main+0x4d8>)
 800151e:	6013      	str	r3, [r2, #0]
			  HAL_Delay(300);
 8001520:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001524:	f001 fd9e 	bl	8003064 <HAL_Delay>
		  }
	  }

	  //PD制御で車体安定させた?��?.
	  if(is_PD_first == 0){
 8001528:	4b8a      	ldr	r3, [pc, #552]	; (8001754 <main+0x4dc>)
 800152a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d10a      	bne.n	8001548 <main+0x2d0>
		  deg_start_rad = deg_rad;
 8001532:	4b89      	ldr	r3, [pc, #548]	; (8001758 <main+0x4e0>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a89      	ldr	r2, [pc, #548]	; (800175c <main+0x4e4>)
 8001538:	6013      	str	r3, [r2, #0]
		  old_error = 0.0;
 800153a:	4b89      	ldr	r3, [pc, #548]	; (8001760 <main+0x4e8>)
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
		  is_PD_first = 1;
 8001542:	4b84      	ldr	r3, [pc, #528]	; (8001754 <main+0x4dc>)
 8001544:	2201      	movs	r2, #1
 8001546:	801a      	strh	r2, [r3, #0]
	  }

	  if(buttonsIsPressed[SQUARE] != 0){
 8001548:	4b80      	ldr	r3, [pc, #512]	; (800174c <main+0x4d4>)
 800154a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154c:	2b00      	cmp	r3, #0
 800154e:	d007      	beq.n	8001560 <main+0x2e8>
		  deg_start_rad = deg_rad;
 8001550:	4b81      	ldr	r3, [pc, #516]	; (8001758 <main+0x4e0>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a81      	ldr	r2, [pc, #516]	; (800175c <main+0x4e4>)
 8001556:	6013      	str	r3, [r2, #0]
		  old_error = 0.0;
 8001558:	4b81      	ldr	r3, [pc, #516]	; (8001760 <main+0x4e8>)
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
	  }

	  //現在の角度.
	  now_rad = deg_rad - deg_start_rad;
 8001560:	4b7d      	ldr	r3, [pc, #500]	; (8001758 <main+0x4e0>)
 8001562:	ed93 7a00 	vldr	s14, [r3]
 8001566:	4b7d      	ldr	r3, [pc, #500]	; (800175c <main+0x4e4>)
 8001568:	edd3 7a00 	vldr	s15, [r3]
 800156c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001570:	4b7c      	ldr	r3, [pc, #496]	; (8001764 <main+0x4ec>)
 8001572:	edc3 7a00 	vstr	s15, [r3]

	  error = normalize_angle(normalize_angle(target_rad) - now_rad);
 8001576:	4b76      	ldr	r3, [pc, #472]	; (8001750 <main+0x4d8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff f804 	bl	8000588 <__aeabi_f2d>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	ec43 2b10 	vmov	d0, r2, r3
 8001588:	f001 f8c2 	bl	8002710 <normalize_angle>
 800158c:	ec55 4b10 	vmov	r4, r5, d0
 8001590:	4b74      	ldr	r3, [pc, #464]	; (8001764 <main+0x4ec>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe fff7 	bl	8000588 <__aeabi_f2d>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4620      	mov	r0, r4
 80015a0:	4629      	mov	r1, r5
 80015a2:	f7fe fe91 	bl	80002c8 <__aeabi_dsub>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	ec43 2b17 	vmov	d7, r2, r3
 80015ae:	eeb0 0a47 	vmov.f32	s0, s14
 80015b2:	eef0 0a67 	vmov.f32	s1, s15
 80015b6:	f001 f8ab 	bl	8002710 <normalize_angle>
 80015ba:	ec53 2b10 	vmov	r2, r3, d0
 80015be:	4610      	mov	r0, r2
 80015c0:	4619      	mov	r1, r3
 80015c2:	f7ff fb11 	bl	8000be8 <__aeabi_d2f>
 80015c6:	4603      	mov	r3, r0
 80015c8:	4a67      	ldr	r2, [pc, #412]	; (8001768 <main+0x4f0>)
 80015ca:	6013      	str	r3, [r2, #0]

	  rad = Rotate_P_Gain * error + Rotate_D_Gain*(error - old_error);
 80015cc:	4b66      	ldr	r3, [pc, #408]	; (8001768 <main+0x4f0>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7fe ffd9 	bl	8000588 <__aeabi_f2d>
 80015d6:	a350      	add	r3, pc, #320	; (adr r3, 8001718 <main+0x4a0>)
 80015d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015dc:	f7ff f82c 	bl	8000638 <__aeabi_dmul>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4614      	mov	r4, r2
 80015e6:	461d      	mov	r5, r3
 80015e8:	4b5f      	ldr	r3, [pc, #380]	; (8001768 <main+0x4f0>)
 80015ea:	ed93 7a00 	vldr	s14, [r3]
 80015ee:	4b5c      	ldr	r3, [pc, #368]	; (8001760 <main+0x4e8>)
 80015f0:	edd3 7a00 	vldr	s15, [r3]
 80015f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015f8:	ee17 0a90 	vmov	r0, s15
 80015fc:	f7fe ffc4 	bl	8000588 <__aeabi_f2d>
 8001600:	a347      	add	r3, pc, #284	; (adr r3, 8001720 <main+0x4a8>)
 8001602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001606:	f7ff f817 	bl	8000638 <__aeabi_dmul>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4620      	mov	r0, r4
 8001610:	4629      	mov	r1, r5
 8001612:	f7fe fe5b 	bl	80002cc <__adddf3>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	4610      	mov	r0, r2
 800161c:	4619      	mov	r1, r3
 800161e:	f7ff fae3 	bl	8000be8 <__aeabi_d2f>
 8001622:	4603      	mov	r3, r0
 8001624:	4a51      	ldr	r2, [pc, #324]	; (800176c <main+0x4f4>)
 8001626:	6013      	str	r3, [r2, #0]
	  PD_v_rot = rad / dt;
 8001628:	4b50      	ldr	r3, [pc, #320]	; (800176c <main+0x4f4>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe ffab 	bl	8000588 <__aeabi_f2d>
 8001632:	a33d      	add	r3, pc, #244	; (adr r3, 8001728 <main+0x4b0>)
 8001634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001638:	f7ff f928 	bl	800088c <__aeabi_ddiv>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4610      	mov	r0, r2
 8001642:	4619      	mov	r1, r3
 8001644:	f7ff fad0 	bl	8000be8 <__aeabi_d2f>
 8001648:	4603      	mov	r3, r0
 800164a:	4a49      	ldr	r2, [pc, #292]	; (8001770 <main+0x4f8>)
 800164c:	6013      	str	r3, [r2, #0]

	  //微小量を無?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?.
	  if(ABS(target_rad - now_rad) < Rotate_Small_Speed) PD_v_rot = 0;
 800164e:	4b40      	ldr	r3, [pc, #256]	; (8001750 <main+0x4d8>)
 8001650:	ed93 7a00 	vldr	s14, [r3]
 8001654:	4b43      	ldr	r3, [pc, #268]	; (8001764 <main+0x4ec>)
 8001656:	edd3 7a00 	vldr	s15, [r3]
 800165a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800165e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001666:	d50a      	bpl.n	800167e <main+0x406>
 8001668:	4b39      	ldr	r3, [pc, #228]	; (8001750 <main+0x4d8>)
 800166a:	ed93 7a00 	vldr	s14, [r3]
 800166e:	4b3d      	ldr	r3, [pc, #244]	; (8001764 <main+0x4ec>)
 8001670:	edd3 7a00 	vldr	s15, [r3]
 8001674:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001678:	eef1 7a67 	vneg.f32	s15, s15
 800167c:	e007      	b.n	800168e <main+0x416>
 800167e:	4b34      	ldr	r3, [pc, #208]	; (8001750 <main+0x4d8>)
 8001680:	ed93 7a00 	vldr	s14, [r3]
 8001684:	4b37      	ldr	r3, [pc, #220]	; (8001764 <main+0x4ec>)
 8001686:	edd3 7a00 	vldr	s15, [r3]
 800168a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800168e:	ee17 0a90 	vmov	r0, s15
 8001692:	f7fe ff79 	bl	8000588 <__aeabi_f2d>
 8001696:	a326      	add	r3, pc, #152	; (adr r3, 8001730 <main+0x4b8>)
 8001698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169c:	f7ff fa3e 	bl	8000b1c <__aeabi_dcmplt>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d003      	beq.n	80016ae <main+0x436>
 80016a6:	4b32      	ldr	r3, [pc, #200]	; (8001770 <main+0x4f8>)
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]

	  //?��?大速度制?��?
	  if(ABS(PD_v_rot) > Rotate_Max_Speed) PD_v_rot = Rotate_Max_Speed * (PD_v_rot / ABS(PD_v_rot));
 80016ae:	4b30      	ldr	r3, [pc, #192]	; (8001770 <main+0x4f8>)
 80016b0:	edd3 7a00 	vldr	s15, [r3]
 80016b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016bc:	d507      	bpl.n	80016ce <main+0x456>
 80016be:	4b2c      	ldr	r3, [pc, #176]	; (8001770 <main+0x4f8>)
 80016c0:	edd3 7a00 	vldr	s15, [r3]
 80016c4:	eef1 7a67 	vneg.f32	s15, s15
 80016c8:	ee17 3a90 	vmov	r3, s15
 80016cc:	e001      	b.n	80016d2 <main+0x45a>
 80016ce:	4b28      	ldr	r3, [pc, #160]	; (8001770 <main+0x4f8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7fe ff58 	bl	8000588 <__aeabi_f2d>
 80016d8:	a30d      	add	r3, pc, #52	; (adr r3, 8001710 <main+0x498>)
 80016da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016de:	f7ff fa3b 	bl	8000b58 <__aeabi_dcmpgt>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d05c      	beq.n	80017a2 <main+0x52a>
 80016e8:	4b21      	ldr	r3, [pc, #132]	; (8001770 <main+0x4f8>)
 80016ea:	ed93 7a00 	vldr	s14, [r3]
 80016ee:	4b20      	ldr	r3, [pc, #128]	; (8001770 <main+0x4f8>)
 80016f0:	edd3 7a00 	vldr	s15, [r3]
 80016f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fc:	d53a      	bpl.n	8001774 <main+0x4fc>
 80016fe:	4b1c      	ldr	r3, [pc, #112]	; (8001770 <main+0x4f8>)
 8001700:	edd3 7a00 	vldr	s15, [r3]
 8001704:	eef1 7a67 	vneg.f32	s15, s15
 8001708:	e037      	b.n	800177a <main+0x502>
 800170a:	bf00      	nop
 800170c:	f3af 8000 	nop.w
 8001710:	4d12d84a 	.word	0x4d12d84a
 8001714:	3ff921fb 	.word	0x3ff921fb
 8001718:	3126e979 	.word	0x3126e979
 800171c:	3f7cac08 	.word	0x3f7cac08
 8001720:	47ae147b 	.word	0x47ae147b
 8001724:	3f747ae1 	.word	0x3f747ae1
 8001728:	9999999a 	.word	0x9999999a
 800172c:	3fa99999 	.word	0x3fa99999
 8001730:	9d353918 	.word	0x9d353918
 8001734:	3f91df46 	.word	0x3f91df46
 8001738:	20000288 	.word	0x20000288
 800173c:	40020000 	.word	0x40020000
 8001740:	40020400 	.word	0x40020400
 8001744:	40020800 	.word	0x40020800
 8001748:	20000280 	.word	0x20000280
 800174c:	20000230 	.word	0x20000230
 8001750:	200002a4 	.word	0x200002a4
 8001754:	20000284 	.word	0x20000284
 8001758:	20000298 	.word	0x20000298
 800175c:	200002a0 	.word	0x200002a0
 8001760:	200002b0 	.word	0x200002b0
 8001764:	200002a8 	.word	0x200002a8
 8001768:	200002ac 	.word	0x200002ac
 800176c:	200002b4 	.word	0x200002b4
 8001770:	200002b8 	.word	0x200002b8
 8001774:	4b70      	ldr	r3, [pc, #448]	; (8001938 <main+0x6c0>)
 8001776:	edd3 7a00 	vldr	s15, [r3]
 800177a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800177e:	ee16 0a90 	vmov	r0, s13
 8001782:	f7fe ff01 	bl	8000588 <__aeabi_f2d>
 8001786:	a36a      	add	r3, pc, #424	; (adr r3, 8001930 <main+0x6b8>)
 8001788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178c:	f7fe ff54 	bl	8000638 <__aeabi_dmul>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	f7ff fa26 	bl	8000be8 <__aeabi_d2f>
 800179c:	4603      	mov	r3, r0
 800179e:	4a66      	ldr	r2, [pc, #408]	; (8001938 <main+0x6c0>)
 80017a0:	6013      	str	r3, [r2, #0]
	  }


	  */
	  //�?連のアー�?の動き
	  if(buttonsIsPressed[UP]){
 80017a2:	4b66      	ldr	r3, [pc, #408]	; (800193c <main+0x6c4>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d034      	beq.n	8001814 <main+0x59c>
		  if(servo_rotate_arm != SERVO_LEFT){
 80017aa:	4b65      	ldr	r3, [pc, #404]	; (8001940 <main+0x6c8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80017b2:	d00a      	beq.n	80017ca <main+0x552>
			  servo22SetPulse(USART3, 13, 0, SERVO_LEFT);
 80017b4:	f44f 7316 	mov.w	r3, #600	; 0x258
 80017b8:	2200      	movs	r2, #0
 80017ba:	210d      	movs	r1, #13
 80017bc:	4861      	ldr	r0, [pc, #388]	; (8001944 <main+0x6cc>)
 80017be:	f000 fff6 	bl	80027ae <servo22SetPulse>
			  HAL_Delay(1000);
 80017c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017c6:	f001 fc4d 	bl	8003064 <HAL_Delay>
		  }
		  AirSet(USART3, 1, is_air_on_shoot, 0, 0);
 80017ca:	4b5f      	ldr	r3, [pc, #380]	; (8001948 <main+0x6d0>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	2300      	movs	r3, #0
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	2300      	movs	r3, #0
 80017d4:	2101      	movs	r1, #1
 80017d6:	485b      	ldr	r0, [pc, #364]	; (8001944 <main+0x6cc>)
 80017d8:	f7ff fbd8 	bl	8000f8c <AirSet>
		  HAL_Delay(500);
 80017dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017e0:	f001 fc40 	bl	8003064 <HAL_Delay>
		  servo22SetPulse(USART3, 13, 0, SERVO_RIGHT);
 80017e4:	f240 736c 	movw	r3, #1900	; 0x76c
 80017e8:	2200      	movs	r2, #0
 80017ea:	210d      	movs	r1, #13
 80017ec:	4855      	ldr	r0, [pc, #340]	; (8001944 <main+0x6cc>)
 80017ee:	f000 ffde 	bl	80027ae <servo22SetPulse>
		  HAL_Delay(1000);
 80017f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017f6:	f001 fc35 	bl	8003064 <HAL_Delay>
		  AirSet(USART3, 0, is_air_on_shoot, 0, 0);
 80017fa:	4b53      	ldr	r3, [pc, #332]	; (8001948 <main+0x6d0>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	2300      	movs	r3, #0
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	2300      	movs	r3, #0
 8001804:	2100      	movs	r1, #0
 8001806:	484f      	ldr	r0, [pc, #316]	; (8001944 <main+0x6cc>)
 8001808:	f7ff fbc0 	bl	8000f8c <AirSet>
		  servo_rotate_arm = SERVO_RIGHT;
 800180c:	4b4c      	ldr	r3, [pc, #304]	; (8001940 <main+0x6c8>)
 800180e:	f240 726c 	movw	r2, #1900	; 0x76c
 8001812:	601a      	str	r2, [r3, #0]
	  }
	  if(buttonsIsPressed[DOWN]){
 8001814:	4b49      	ldr	r3, [pc, #292]	; (800193c <main+0x6c4>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d035      	beq.n	8001888 <main+0x610>
		  if(servo_rotate_arm != SERVO_RIGHT){
 800181c:	4b48      	ldr	r3, [pc, #288]	; (8001940 <main+0x6c8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f240 726c 	movw	r2, #1900	; 0x76c
 8001824:	4293      	cmp	r3, r2
 8001826:	d00a      	beq.n	800183e <main+0x5c6>
			  servo22SetPulse(USART3, 13, 0, SERVO_RIGHT);
 8001828:	f240 736c 	movw	r3, #1900	; 0x76c
 800182c:	2200      	movs	r2, #0
 800182e:	210d      	movs	r1, #13
 8001830:	4844      	ldr	r0, [pc, #272]	; (8001944 <main+0x6cc>)
 8001832:	f000 ffbc 	bl	80027ae <servo22SetPulse>
			  HAL_Delay(1000);
 8001836:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800183a:	f001 fc13 	bl	8003064 <HAL_Delay>
		  }
		  AirSet(USART3, 1, is_air_on_shoot, 0, 0);
 800183e:	4b42      	ldr	r3, [pc, #264]	; (8001948 <main+0x6d0>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	2300      	movs	r3, #0
 8001844:	9300      	str	r3, [sp, #0]
 8001846:	2300      	movs	r3, #0
 8001848:	2101      	movs	r1, #1
 800184a:	483e      	ldr	r0, [pc, #248]	; (8001944 <main+0x6cc>)
 800184c:	f7ff fb9e 	bl	8000f8c <AirSet>
		  HAL_Delay(500);
 8001850:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001854:	f001 fc06 	bl	8003064 <HAL_Delay>
		  servo22SetPulse(USART3, 13, 0, SERVO_LEFT);
 8001858:	f44f 7316 	mov.w	r3, #600	; 0x258
 800185c:	2200      	movs	r2, #0
 800185e:	210d      	movs	r1, #13
 8001860:	4838      	ldr	r0, [pc, #224]	; (8001944 <main+0x6cc>)
 8001862:	f000 ffa4 	bl	80027ae <servo22SetPulse>
		  HAL_Delay(1000);
 8001866:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800186a:	f001 fbfb 	bl	8003064 <HAL_Delay>
		  AirSet(USART3, 0, is_air_on_shoot, 0, 0);
 800186e:	4b36      	ldr	r3, [pc, #216]	; (8001948 <main+0x6d0>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	2300      	movs	r3, #0
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	2300      	movs	r3, #0
 8001878:	2100      	movs	r1, #0
 800187a:	4832      	ldr	r0, [pc, #200]	; (8001944 <main+0x6cc>)
 800187c:	f7ff fb86 	bl	8000f8c <AirSet>
		  servo_rotate_arm = SERVO_LEFT;
 8001880:	4b2f      	ldr	r3, [pc, #188]	; (8001940 <main+0x6c8>)
 8001882:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001886:	601a      	str	r2, [r3, #0]
	  }
	  //アー??��?��?の回転
	  if(buttonsIsPressed[RIGHT]){
 8001888:	4b2c      	ldr	r3, [pc, #176]	; (800193c <main+0x6c4>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d014      	beq.n	80018ba <main+0x642>
		  if(servo_rotate_arm != SERVO_RIGHT){
 8001890:	4b2b      	ldr	r3, [pc, #172]	; (8001940 <main+0x6c8>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f240 726c 	movw	r2, #1900	; 0x76c
 8001898:	4293      	cmp	r3, r2
 800189a:	d003      	beq.n	80018a4 <main+0x62c>
			  servo_rotate_arm = SERVO_RIGHT;
 800189c:	4b28      	ldr	r3, [pc, #160]	; (8001940 <main+0x6c8>)
 800189e:	f240 726c 	movw	r2, #1900	; 0x76c
 80018a2:	601a      	str	r2, [r3, #0]
			  //printf("RIGHT");
		  }
		  servo22SetPulse(USART3, 13, 0, servo_rotate_arm);
 80018a4:	4b26      	ldr	r3, [pc, #152]	; (8001940 <main+0x6c8>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2200      	movs	r2, #0
 80018aa:	210d      	movs	r1, #13
 80018ac:	4825      	ldr	r0, [pc, #148]	; (8001944 <main+0x6cc>)
 80018ae:	f000 ff7e 	bl	80027ae <servo22SetPulse>
		  HAL_Delay(300);
 80018b2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80018b6:	f001 fbd5 	bl	8003064 <HAL_Delay>
	  }
	  if(buttonsIsPressed[LEFT]){
 80018ba:	4b20      	ldr	r3, [pc, #128]	; (800193c <main+0x6c4>)
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d013      	beq.n	80018ea <main+0x672>
		  if(servo_rotate_arm != SERVO_LEFT){
 80018c2:	4b1f      	ldr	r3, [pc, #124]	; (8001940 <main+0x6c8>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80018ca:	d003      	beq.n	80018d4 <main+0x65c>
			  servo_rotate_arm = SERVO_LEFT;
 80018cc:	4b1c      	ldr	r3, [pc, #112]	; (8001940 <main+0x6c8>)
 80018ce:	f44f 7216 	mov.w	r2, #600	; 0x258
 80018d2:	601a      	str	r2, [r3, #0]
			  //printf("LEFT");
		  }
		  servo22SetPulse(USART3, 13, 0, servo_rotate_arm);
 80018d4:	4b1a      	ldr	r3, [pc, #104]	; (8001940 <main+0x6c8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2200      	movs	r2, #0
 80018da:	210d      	movs	r1, #13
 80018dc:	4819      	ldr	r0, [pc, #100]	; (8001944 <main+0x6cc>)
 80018de:	f000 ff66 	bl	80027ae <servo22SetPulse>
		  HAL_Delay(300);
 80018e2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80018e6:	f001 fbbd 	bl	8003064 <HAL_Delay>
	  }
	  //?��?出機�?
	  if(buttonsIsPressed[CIRCLE]){
 80018ea:	4b14      	ldr	r3, [pc, #80]	; (800193c <main+0x6c4>)
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d013      	beq.n	800191a <main+0x6a2>
		  AirSet(USART3, 0, 1, 0, 0);
 80018f2:	2300      	movs	r3, #0
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	2300      	movs	r3, #0
 80018f8:	2201      	movs	r2, #1
 80018fa:	2100      	movs	r1, #0
 80018fc:	4811      	ldr	r0, [pc, #68]	; (8001944 <main+0x6cc>)
 80018fe:	f7ff fb45 	bl	8000f8c <AirSet>
		  HAL_Delay(500);
 8001902:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001906:	f001 fbad 	bl	8003064 <HAL_Delay>
		  AirSet(USART3, 0, 0, 0, 0);
 800190a:	2300      	movs	r3, #0
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	2300      	movs	r3, #0
 8001910:	2200      	movs	r2, #0
 8001912:	2100      	movs	r1, #0
 8001914:	480b      	ldr	r0, [pc, #44]	; (8001944 <main+0x6cc>)
 8001916:	f7ff fb39 	bl	8000f8c <AirSet>
	  }

	  //出力制限モー?��?
	  if(buttonsIsPressed[CROSS] != 0){
 800191a:	4b08      	ldr	r3, [pc, #32]	; (800193c <main+0x6c4>)
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d016      	beq.n	8001950 <main+0x6d8>
		  power_down_mode = 1;
 8001922:	4b0a      	ldr	r3, [pc, #40]	; (800194c <main+0x6d4>)
 8001924:	2201      	movs	r2, #1
 8001926:	801a      	strh	r2, [r3, #0]
 8001928:	e015      	b.n	8001956 <main+0x6de>
 800192a:	bf00      	nop
 800192c:	f3af 8000 	nop.w
 8001930:	4d12d84a 	.word	0x4d12d84a
 8001934:	3ff921fb 	.word	0x3ff921fb
 8001938:	200002b8 	.word	0x200002b8
 800193c:	20000230 	.word	0x20000230
 8001940:	20000290 	.word	0x20000290
 8001944:	40004800 	.word	0x40004800
 8001948:	2000028c 	.word	0x2000028c
 800194c:	20000286 	.word	0x20000286
	  }else{
		  power_down_mode = 0;
 8001950:	4bd5      	ldr	r3, [pc, #852]	; (8001ca8 <main+0xa30>)
 8001952:	2200      	movs	r2, #0
 8001954:	801a      	strh	r2, [r3, #0]
	  }


	  if(power_down_mode == 1){
 8001956:	4bd4      	ldr	r3, [pc, #848]	; (8001ca8 <main+0xa30>)
 8001958:	f9b3 3000 	ldrsh.w	r3, [r3]
 800195c:	2b01      	cmp	r3, #1
 800195e:	f040 81f1 	bne.w	8001d44 <main+0xacc>
		  //出力制限モー?��?
		  //コートたった時に使?��??��?すそ?��?な方
		  //モーターの回転成�?
		  v_UPPER_RIGHT = VMAX_down/128.f*(LY*sinf(    pi/4.f-deg_rad)+LX*cosf(    pi/4.f-deg_rad)) + PD_v_rot * Frame_Length * PD_const;
 8001962:	4bd2      	ldr	r3, [pc, #840]	; (8001cac <main+0xa34>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f7fe fe0e 	bl	8000588 <__aeabi_f2d>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	a1c1      	add	r1, pc, #772	; (adr r1, 8001c78 <main+0xa00>)
 8001972:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001976:	f7fe fca7 	bl	80002c8 <__aeabi_dsub>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	4610      	mov	r0, r2
 8001980:	4619      	mov	r1, r3
 8001982:	f7ff f931 	bl	8000be8 <__aeabi_d2f>
 8001986:	4603      	mov	r3, r0
 8001988:	ee00 3a10 	vmov	s0, r3
 800198c:	f006 fc3c 	bl	8008208 <sinf>
 8001990:	eeb0 7a40 	vmov.f32	s14, s0
 8001994:	4bc6      	ldr	r3, [pc, #792]	; (8001cb0 <main+0xa38>)
 8001996:	edd3 7a00 	vldr	s15, [r3]
 800199a:	ee27 8a27 	vmul.f32	s16, s14, s15
 800199e:	4bc3      	ldr	r3, [pc, #780]	; (8001cac <main+0xa34>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7fe fdf0 	bl	8000588 <__aeabi_f2d>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	a1b2      	add	r1, pc, #712	; (adr r1, 8001c78 <main+0xa00>)
 80019ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019b2:	f7fe fc89 	bl	80002c8 <__aeabi_dsub>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4610      	mov	r0, r2
 80019bc:	4619      	mov	r1, r3
 80019be:	f7ff f913 	bl	8000be8 <__aeabi_d2f>
 80019c2:	4603      	mov	r3, r0
 80019c4:	ee00 3a10 	vmov	s0, r3
 80019c8:	f006 fbda 	bl	8008180 <cosf>
 80019cc:	eeb0 7a40 	vmov.f32	s14, s0
 80019d0:	4bb8      	ldr	r3, [pc, #736]	; (8001cb4 <main+0xa3c>)
 80019d2:	edd3 7a00 	vldr	s15, [r3]
 80019d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019da:	ee78 7a27 	vadd.f32	s15, s16, s15
 80019de:	ee17 0a90 	vmov	r0, s15
 80019e2:	f7fe fdd1 	bl	8000588 <__aeabi_f2d>
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	4bb3      	ldr	r3, [pc, #716]	; (8001cb8 <main+0xa40>)
 80019ec:	f7fe fe24 	bl	8000638 <__aeabi_dmul>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4614      	mov	r4, r2
 80019f6:	461d      	mov	r5, r3
 80019f8:	4bb0      	ldr	r3, [pc, #704]	; (8001cbc <main+0xa44>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7fe fdc3 	bl	8000588 <__aeabi_f2d>
 8001a02:	a39f      	add	r3, pc, #636	; (adr r3, 8001c80 <main+0xa08>)
 8001a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a08:	f7fe fe16 	bl	8000638 <__aeabi_dmul>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4610      	mov	r0, r2
 8001a12:	4619      	mov	r1, r3
 8001a14:	a39c      	add	r3, pc, #624	; (adr r3, 8001c88 <main+0xa10>)
 8001a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1a:	f7fe fe0d 	bl	8000638 <__aeabi_dmul>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	4620      	mov	r0, r4
 8001a24:	4629      	mov	r1, r5
 8001a26:	f7fe fc51 	bl	80002cc <__adddf3>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	4610      	mov	r0, r2
 8001a30:	4619      	mov	r1, r3
 8001a32:	f7ff f8d9 	bl	8000be8 <__aeabi_d2f>
 8001a36:	4603      	mov	r3, r0
 8001a38:	4aa1      	ldr	r2, [pc, #644]	; (8001cc0 <main+0xa48>)
 8001a3a:	6013      	str	r3, [r2, #0]
		  v_UPPER_LEFT  = VMAX_down/128.f*(LY*sinf(3.f*pi/4.f-deg_rad)+LX*cosf(3.f*pi/4.f-deg_rad)) + PD_v_rot * Frame_Length * PD_const;
 8001a3c:	4b9b      	ldr	r3, [pc, #620]	; (8001cac <main+0xa34>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7fe fda1 	bl	8000588 <__aeabi_f2d>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	a191      	add	r1, pc, #580	; (adr r1, 8001c90 <main+0xa18>)
 8001a4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a50:	f7fe fc3a 	bl	80002c8 <__aeabi_dsub>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4610      	mov	r0, r2
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f7ff f8c4 	bl	8000be8 <__aeabi_d2f>
 8001a60:	4603      	mov	r3, r0
 8001a62:	ee00 3a10 	vmov	s0, r3
 8001a66:	f006 fbcf 	bl	8008208 <sinf>
 8001a6a:	eeb0 7a40 	vmov.f32	s14, s0
 8001a6e:	4b90      	ldr	r3, [pc, #576]	; (8001cb0 <main+0xa38>)
 8001a70:	edd3 7a00 	vldr	s15, [r3]
 8001a74:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001a78:	4b8c      	ldr	r3, [pc, #560]	; (8001cac <main+0xa34>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7fe fd83 	bl	8000588 <__aeabi_f2d>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	a182      	add	r1, pc, #520	; (adr r1, 8001c90 <main+0xa18>)
 8001a88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a8c:	f7fe fc1c 	bl	80002c8 <__aeabi_dsub>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4610      	mov	r0, r2
 8001a96:	4619      	mov	r1, r3
 8001a98:	f7ff f8a6 	bl	8000be8 <__aeabi_d2f>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	ee00 3a10 	vmov	s0, r3
 8001aa2:	f006 fb6d 	bl	8008180 <cosf>
 8001aa6:	eeb0 7a40 	vmov.f32	s14, s0
 8001aaa:	4b82      	ldr	r3, [pc, #520]	; (8001cb4 <main+0xa3c>)
 8001aac:	edd3 7a00 	vldr	s15, [r3]
 8001ab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab4:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001ab8:	ee17 0a90 	vmov	r0, s15
 8001abc:	f7fe fd64 	bl	8000588 <__aeabi_f2d>
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	4b7c      	ldr	r3, [pc, #496]	; (8001cb8 <main+0xa40>)
 8001ac6:	f7fe fdb7 	bl	8000638 <__aeabi_dmul>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4614      	mov	r4, r2
 8001ad0:	461d      	mov	r5, r3
 8001ad2:	4b7a      	ldr	r3, [pc, #488]	; (8001cbc <main+0xa44>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7fe fd56 	bl	8000588 <__aeabi_f2d>
 8001adc:	a368      	add	r3, pc, #416	; (adr r3, 8001c80 <main+0xa08>)
 8001ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae2:	f7fe fda9 	bl	8000638 <__aeabi_dmul>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	4610      	mov	r0, r2
 8001aec:	4619      	mov	r1, r3
 8001aee:	a366      	add	r3, pc, #408	; (adr r3, 8001c88 <main+0xa10>)
 8001af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af4:	f7fe fda0 	bl	8000638 <__aeabi_dmul>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4620      	mov	r0, r4
 8001afe:	4629      	mov	r1, r5
 8001b00:	f7fe fbe4 	bl	80002cc <__adddf3>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4610      	mov	r0, r2
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f7ff f86c 	bl	8000be8 <__aeabi_d2f>
 8001b10:	4603      	mov	r3, r0
 8001b12:	4a6c      	ldr	r2, [pc, #432]	; (8001cc4 <main+0xa4c>)
 8001b14:	6013      	str	r3, [r2, #0]
		  v_LOWER_LEFT  = VMAX_down/128.f*(LY*sinf(5.f*pi/4.f-deg_rad)+LX*cosf(5.f*pi/4.f-deg_rad)) + PD_v_rot * Frame_Length * PD_const;
 8001b16:	4b65      	ldr	r3, [pc, #404]	; (8001cac <main+0xa34>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fd34 	bl	8000588 <__aeabi_f2d>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	a15c      	add	r1, pc, #368	; (adr r1, 8001c98 <main+0xa20>)
 8001b26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b2a:	f7fe fbcd 	bl	80002c8 <__aeabi_dsub>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	4610      	mov	r0, r2
 8001b34:	4619      	mov	r1, r3
 8001b36:	f7ff f857 	bl	8000be8 <__aeabi_d2f>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	ee00 3a10 	vmov	s0, r3
 8001b40:	f006 fb62 	bl	8008208 <sinf>
 8001b44:	eeb0 7a40 	vmov.f32	s14, s0
 8001b48:	4b59      	ldr	r3, [pc, #356]	; (8001cb0 <main+0xa38>)
 8001b4a:	edd3 7a00 	vldr	s15, [r3]
 8001b4e:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001b52:	4b56      	ldr	r3, [pc, #344]	; (8001cac <main+0xa34>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7fe fd16 	bl	8000588 <__aeabi_f2d>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	a14d      	add	r1, pc, #308	; (adr r1, 8001c98 <main+0xa20>)
 8001b62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b66:	f7fe fbaf 	bl	80002c8 <__aeabi_dsub>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	4610      	mov	r0, r2
 8001b70:	4619      	mov	r1, r3
 8001b72:	f7ff f839 	bl	8000be8 <__aeabi_d2f>
 8001b76:	4603      	mov	r3, r0
 8001b78:	ee00 3a10 	vmov	s0, r3
 8001b7c:	f006 fb00 	bl	8008180 <cosf>
 8001b80:	eeb0 7a40 	vmov.f32	s14, s0
 8001b84:	4b4b      	ldr	r3, [pc, #300]	; (8001cb4 <main+0xa3c>)
 8001b86:	edd3 7a00 	vldr	s15, [r3]
 8001b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b8e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001b92:	ee17 0a90 	vmov	r0, s15
 8001b96:	f7fe fcf7 	bl	8000588 <__aeabi_f2d>
 8001b9a:	f04f 0200 	mov.w	r2, #0
 8001b9e:	4b46      	ldr	r3, [pc, #280]	; (8001cb8 <main+0xa40>)
 8001ba0:	f7fe fd4a 	bl	8000638 <__aeabi_dmul>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4614      	mov	r4, r2
 8001baa:	461d      	mov	r5, r3
 8001bac:	4b43      	ldr	r3, [pc, #268]	; (8001cbc <main+0xa44>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe fce9 	bl	8000588 <__aeabi_f2d>
 8001bb6:	a332      	add	r3, pc, #200	; (adr r3, 8001c80 <main+0xa08>)
 8001bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbc:	f7fe fd3c 	bl	8000638 <__aeabi_dmul>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	a32f      	add	r3, pc, #188	; (adr r3, 8001c88 <main+0xa10>)
 8001bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bce:	f7fe fd33 	bl	8000638 <__aeabi_dmul>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4620      	mov	r0, r4
 8001bd8:	4629      	mov	r1, r5
 8001bda:	f7fe fb77 	bl	80002cc <__adddf3>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4610      	mov	r0, r2
 8001be4:	4619      	mov	r1, r3
 8001be6:	f7fe ffff 	bl	8000be8 <__aeabi_d2f>
 8001bea:	4603      	mov	r3, r0
 8001bec:	4a36      	ldr	r2, [pc, #216]	; (8001cc8 <main+0xa50>)
 8001bee:	6013      	str	r3, [r2, #0]
		  v_LOWER_RIGHT = VMAX_down/128.f*(LY*sinf(7.f*pi/4.f-deg_rad)+LX*cosf(7.f*pi/4.f-deg_rad)) + PD_v_rot * Frame_Length * PD_const;
 8001bf0:	4b2e      	ldr	r3, [pc, #184]	; (8001cac <main+0xa34>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe fcc7 	bl	8000588 <__aeabi_f2d>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	a128      	add	r1, pc, #160	; (adr r1, 8001ca0 <main+0xa28>)
 8001c00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c04:	f7fe fb60 	bl	80002c8 <__aeabi_dsub>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f7fe ffea 	bl	8000be8 <__aeabi_d2f>
 8001c14:	4603      	mov	r3, r0
 8001c16:	ee00 3a10 	vmov	s0, r3
 8001c1a:	f006 faf5 	bl	8008208 <sinf>
 8001c1e:	eeb0 7a40 	vmov.f32	s14, s0
 8001c22:	4b23      	ldr	r3, [pc, #140]	; (8001cb0 <main+0xa38>)
 8001c24:	edd3 7a00 	vldr	s15, [r3]
 8001c28:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001c2c:	4b1f      	ldr	r3, [pc, #124]	; (8001cac <main+0xa34>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7fe fca9 	bl	8000588 <__aeabi_f2d>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	a119      	add	r1, pc, #100	; (adr r1, 8001ca0 <main+0xa28>)
 8001c3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c40:	f7fe fb42 	bl	80002c8 <__aeabi_dsub>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f7fe ffcc 	bl	8000be8 <__aeabi_d2f>
 8001c50:	4603      	mov	r3, r0
 8001c52:	ee00 3a10 	vmov	s0, r3
 8001c56:	f006 fa93 	bl	8008180 <cosf>
 8001c5a:	eeb0 7a40 	vmov.f32	s14, s0
 8001c5e:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <main+0xa3c>)
 8001c60:	edd3 7a00 	vldr	s15, [r3]
 8001c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c68:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001c6c:	ee17 0a90 	vmov	r0, s15
 8001c70:	f7fe fc8a 	bl	8000588 <__aeabi_f2d>
 8001c74:	e02a      	b.n	8001ccc <main+0xa54>
 8001c76:	bf00      	nop
 8001c78:	4d12d84a 	.word	0x4d12d84a
 8001c7c:	3fe921fb 	.word	0x3fe921fb
 8001c80:	33333333 	.word	0x33333333
 8001c84:	3fd33333 	.word	0x3fd33333
 8001c88:	00000000 	.word	0x00000000
 8001c8c:	40a38800 	.word	0x40a38800
 8001c90:	79ce2238 	.word	0x79ce2238
 8001c94:	4002d97c 	.word	0x4002d97c
 8001c98:	20578e5c 	.word	0x20578e5c
 8001c9c:	400f6a7a 	.word	0x400f6a7a
 8001ca0:	e3707d41 	.word	0xe3707d41
 8001ca4:	4015fdbb 	.word	0x4015fdbb
 8001ca8:	20000286 	.word	0x20000286
 8001cac:	20000298 	.word	0x20000298
 8001cb0:	20000274 	.word	0x20000274
 8001cb4:	20000270 	.word	0x20000270
 8001cb8:	3ff2c000 	.word	0x3ff2c000
 8001cbc:	200002b8 	.word	0x200002b8
 8001cc0:	200002bc 	.word	0x200002bc
 8001cc4:	200002c8 	.word	0x200002c8
 8001cc8:	200002c4 	.word	0x200002c4
 8001ccc:	f04f 0200 	mov.w	r2, #0
 8001cd0:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <main+0xac0>)
 8001cd2:	f7fe fcb1 	bl	8000638 <__aeabi_dmul>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4614      	mov	r4, r2
 8001cdc:	461d      	mov	r5, r3
 8001cde:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <main+0xac4>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7fe fc50 	bl	8000588 <__aeabi_f2d>
 8001ce8:	a30f      	add	r3, pc, #60	; (adr r3, 8001d28 <main+0xab0>)
 8001cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cee:	f7fe fca3 	bl	8000638 <__aeabi_dmul>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4610      	mov	r0, r2
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	a30d      	add	r3, pc, #52	; (adr r3, 8001d30 <main+0xab8>)
 8001cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d00:	f7fe fc9a 	bl	8000638 <__aeabi_dmul>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	4620      	mov	r0, r4
 8001d0a:	4629      	mov	r1, r5
 8001d0c:	f7fe fade 	bl	80002cc <__adddf3>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4610      	mov	r0, r2
 8001d16:	4619      	mov	r1, r3
 8001d18:	f7fe ff66 	bl	8000be8 <__aeabi_d2f>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	4a08      	ldr	r2, [pc, #32]	; (8001d40 <main+0xac8>)
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	e1f1      	b.n	8002108 <main+0xe90>
 8001d24:	f3af 8000 	nop.w
 8001d28:	33333333 	.word	0x33333333
 8001d2c:	3fd33333 	.word	0x3fd33333
 8001d30:	00000000 	.word	0x00000000
 8001d34:	40a38800 	.word	0x40a38800
 8001d38:	3ff2c000 	.word	0x3ff2c000
 8001d3c:	200002b8 	.word	0x200002b8
 8001d40:	200002c0 	.word	0x200002c0
		   */
	  }else{
		  //通常モー?��?
		  //コートたった時に使?��??��?すそ?��?な方
		  //モーターの回転成�?
		  v_UPPER_RIGHT = VMAX_normal/128.f*(LY*sinf(    pi/4.f-deg_rad)+LX*cosf(    pi/4.f-deg_rad)) + PD_v_rot * Frame_Length * PD_const;
 8001d44:	4bd8      	ldr	r3, [pc, #864]	; (80020a8 <main+0xe30>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fc1d 	bl	8000588 <__aeabi_f2d>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	a1c7      	add	r1, pc, #796	; (adr r1, 8002070 <main+0xdf8>)
 8001d54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d58:	f7fe fab6 	bl	80002c8 <__aeabi_dsub>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4610      	mov	r0, r2
 8001d62:	4619      	mov	r1, r3
 8001d64:	f7fe ff40 	bl	8000be8 <__aeabi_d2f>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	ee00 3a10 	vmov	s0, r3
 8001d6e:	f006 fa4b 	bl	8008208 <sinf>
 8001d72:	eeb0 7a40 	vmov.f32	s14, s0
 8001d76:	4bcd      	ldr	r3, [pc, #820]	; (80020ac <main+0xe34>)
 8001d78:	edd3 7a00 	vldr	s15, [r3]
 8001d7c:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001d80:	4bc9      	ldr	r3, [pc, #804]	; (80020a8 <main+0xe30>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe fbff 	bl	8000588 <__aeabi_f2d>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	a1b8      	add	r1, pc, #736	; (adr r1, 8002070 <main+0xdf8>)
 8001d90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d94:	f7fe fa98 	bl	80002c8 <__aeabi_dsub>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4610      	mov	r0, r2
 8001d9e:	4619      	mov	r1, r3
 8001da0:	f7fe ff22 	bl	8000be8 <__aeabi_d2f>
 8001da4:	4603      	mov	r3, r0
 8001da6:	ee00 3a10 	vmov	s0, r3
 8001daa:	f006 f9e9 	bl	8008180 <cosf>
 8001dae:	eeb0 7a40 	vmov.f32	s14, s0
 8001db2:	4bbf      	ldr	r3, [pc, #764]	; (80020b0 <main+0xe38>)
 8001db4:	edd3 7a00 	vldr	s15, [r3]
 8001db8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dbc:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001dc0:	ee17 0a90 	vmov	r0, s15
 8001dc4:	f7fe fbe0 	bl	8000588 <__aeabi_f2d>
 8001dc8:	a3ab      	add	r3, pc, #684	; (adr r3, 8002078 <main+0xe00>)
 8001dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dce:	f7fe fc33 	bl	8000638 <__aeabi_dmul>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4614      	mov	r4, r2
 8001dd8:	461d      	mov	r5, r3
 8001dda:	4bb6      	ldr	r3, [pc, #728]	; (80020b4 <main+0xe3c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7fe fbd2 	bl	8000588 <__aeabi_f2d>
 8001de4:	a3a6      	add	r3, pc, #664	; (adr r3, 8002080 <main+0xe08>)
 8001de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dea:	f7fe fc25 	bl	8000638 <__aeabi_dmul>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	4610      	mov	r0, r2
 8001df4:	4619      	mov	r1, r3
 8001df6:	a3a4      	add	r3, pc, #656	; (adr r3, 8002088 <main+0xe10>)
 8001df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfc:	f7fe fc1c 	bl	8000638 <__aeabi_dmul>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4620      	mov	r0, r4
 8001e06:	4629      	mov	r1, r5
 8001e08:	f7fe fa60 	bl	80002cc <__adddf3>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	4610      	mov	r0, r2
 8001e12:	4619      	mov	r1, r3
 8001e14:	f7fe fee8 	bl	8000be8 <__aeabi_d2f>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	4aa7      	ldr	r2, [pc, #668]	; (80020b8 <main+0xe40>)
 8001e1c:	6013      	str	r3, [r2, #0]
		  v_UPPER_LEFT  = VMAX_normal/128.f*(LY*sinf(3.f*pi/4.f-deg_rad)+LX*cosf(3.f*pi/4.f-deg_rad)) + PD_v_rot * Frame_Length * PD_const;
 8001e1e:	4ba2      	ldr	r3, [pc, #648]	; (80020a8 <main+0xe30>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7fe fbb0 	bl	8000588 <__aeabi_f2d>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	a198      	add	r1, pc, #608	; (adr r1, 8002090 <main+0xe18>)
 8001e2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e32:	f7fe fa49 	bl	80002c8 <__aeabi_dsub>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4610      	mov	r0, r2
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f7fe fed3 	bl	8000be8 <__aeabi_d2f>
 8001e42:	4603      	mov	r3, r0
 8001e44:	ee00 3a10 	vmov	s0, r3
 8001e48:	f006 f9de 	bl	8008208 <sinf>
 8001e4c:	eeb0 7a40 	vmov.f32	s14, s0
 8001e50:	4b96      	ldr	r3, [pc, #600]	; (80020ac <main+0xe34>)
 8001e52:	edd3 7a00 	vldr	s15, [r3]
 8001e56:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001e5a:	4b93      	ldr	r3, [pc, #588]	; (80020a8 <main+0xe30>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe fb92 	bl	8000588 <__aeabi_f2d>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	a189      	add	r1, pc, #548	; (adr r1, 8002090 <main+0xe18>)
 8001e6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e6e:	f7fe fa2b 	bl	80002c8 <__aeabi_dsub>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	4610      	mov	r0, r2
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f7fe feb5 	bl	8000be8 <__aeabi_d2f>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	ee00 3a10 	vmov	s0, r3
 8001e84:	f006 f97c 	bl	8008180 <cosf>
 8001e88:	eeb0 7a40 	vmov.f32	s14, s0
 8001e8c:	4b88      	ldr	r3, [pc, #544]	; (80020b0 <main+0xe38>)
 8001e8e:	edd3 7a00 	vldr	s15, [r3]
 8001e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e96:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001e9a:	ee17 0a90 	vmov	r0, s15
 8001e9e:	f7fe fb73 	bl	8000588 <__aeabi_f2d>
 8001ea2:	a375      	add	r3, pc, #468	; (adr r3, 8002078 <main+0xe00>)
 8001ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea8:	f7fe fbc6 	bl	8000638 <__aeabi_dmul>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	4614      	mov	r4, r2
 8001eb2:	461d      	mov	r5, r3
 8001eb4:	4b7f      	ldr	r3, [pc, #508]	; (80020b4 <main+0xe3c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7fe fb65 	bl	8000588 <__aeabi_f2d>
 8001ebe:	a370      	add	r3, pc, #448	; (adr r3, 8002080 <main+0xe08>)
 8001ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec4:	f7fe fbb8 	bl	8000638 <__aeabi_dmul>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4610      	mov	r0, r2
 8001ece:	4619      	mov	r1, r3
 8001ed0:	a36d      	add	r3, pc, #436	; (adr r3, 8002088 <main+0xe10>)
 8001ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed6:	f7fe fbaf 	bl	8000638 <__aeabi_dmul>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	4620      	mov	r0, r4
 8001ee0:	4629      	mov	r1, r5
 8001ee2:	f7fe f9f3 	bl	80002cc <__adddf3>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	4610      	mov	r0, r2
 8001eec:	4619      	mov	r1, r3
 8001eee:	f7fe fe7b 	bl	8000be8 <__aeabi_d2f>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	4a71      	ldr	r2, [pc, #452]	; (80020bc <main+0xe44>)
 8001ef6:	6013      	str	r3, [r2, #0]
		  v_LOWER_LEFT  = VMAX_normal/128.f*(LY*sinf(5.f*pi/4.f-deg_rad)+LX*cosf(5.f*pi/4.f-deg_rad)) + PD_v_rot * Frame_Length * PD_const;
 8001ef8:	4b6b      	ldr	r3, [pc, #428]	; (80020a8 <main+0xe30>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe fb43 	bl	8000588 <__aeabi_f2d>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	a164      	add	r1, pc, #400	; (adr r1, 8002098 <main+0xe20>)
 8001f08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f0c:	f7fe f9dc 	bl	80002c8 <__aeabi_dsub>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	f7fe fe66 	bl	8000be8 <__aeabi_d2f>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	ee00 3a10 	vmov	s0, r3
 8001f22:	f006 f971 	bl	8008208 <sinf>
 8001f26:	eeb0 7a40 	vmov.f32	s14, s0
 8001f2a:	4b60      	ldr	r3, [pc, #384]	; (80020ac <main+0xe34>)
 8001f2c:	edd3 7a00 	vldr	s15, [r3]
 8001f30:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001f34:	4b5c      	ldr	r3, [pc, #368]	; (80020a8 <main+0xe30>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe fb25 	bl	8000588 <__aeabi_f2d>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	a155      	add	r1, pc, #340	; (adr r1, 8002098 <main+0xe20>)
 8001f44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f48:	f7fe f9be 	bl	80002c8 <__aeabi_dsub>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4610      	mov	r0, r2
 8001f52:	4619      	mov	r1, r3
 8001f54:	f7fe fe48 	bl	8000be8 <__aeabi_d2f>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	ee00 3a10 	vmov	s0, r3
 8001f5e:	f006 f90f 	bl	8008180 <cosf>
 8001f62:	eeb0 7a40 	vmov.f32	s14, s0
 8001f66:	4b52      	ldr	r3, [pc, #328]	; (80020b0 <main+0xe38>)
 8001f68:	edd3 7a00 	vldr	s15, [r3]
 8001f6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f70:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001f74:	ee17 0a90 	vmov	r0, s15
 8001f78:	f7fe fb06 	bl	8000588 <__aeabi_f2d>
 8001f7c:	a33e      	add	r3, pc, #248	; (adr r3, 8002078 <main+0xe00>)
 8001f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f82:	f7fe fb59 	bl	8000638 <__aeabi_dmul>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4614      	mov	r4, r2
 8001f8c:	461d      	mov	r5, r3
 8001f8e:	4b49      	ldr	r3, [pc, #292]	; (80020b4 <main+0xe3c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe faf8 	bl	8000588 <__aeabi_f2d>
 8001f98:	a339      	add	r3, pc, #228	; (adr r3, 8002080 <main+0xe08>)
 8001f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9e:	f7fe fb4b 	bl	8000638 <__aeabi_dmul>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	4610      	mov	r0, r2
 8001fa8:	4619      	mov	r1, r3
 8001faa:	a337      	add	r3, pc, #220	; (adr r3, 8002088 <main+0xe10>)
 8001fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb0:	f7fe fb42 	bl	8000638 <__aeabi_dmul>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	4620      	mov	r0, r4
 8001fba:	4629      	mov	r1, r5
 8001fbc:	f7fe f986 	bl	80002cc <__adddf3>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4610      	mov	r0, r2
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	f7fe fe0e 	bl	8000be8 <__aeabi_d2f>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	4a3c      	ldr	r2, [pc, #240]	; (80020c0 <main+0xe48>)
 8001fd0:	6013      	str	r3, [r2, #0]
		  v_LOWER_RIGHT = VMAX_normal/128.f*(LY*sinf(7.f*pi/4.f-deg_rad)+LX*cosf(7.f*pi/4.f-deg_rad)) + PD_v_rot * Frame_Length * PD_const;
 8001fd2:	4b35      	ldr	r3, [pc, #212]	; (80020a8 <main+0xe30>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe fad6 	bl	8000588 <__aeabi_f2d>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	a12f      	add	r1, pc, #188	; (adr r1, 80020a0 <main+0xe28>)
 8001fe2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001fe6:	f7fe f96f 	bl	80002c8 <__aeabi_dsub>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	4610      	mov	r0, r2
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f7fe fdf9 	bl	8000be8 <__aeabi_d2f>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	ee00 3a10 	vmov	s0, r3
 8001ffc:	f006 f904 	bl	8008208 <sinf>
 8002000:	eeb0 7a40 	vmov.f32	s14, s0
 8002004:	4b29      	ldr	r3, [pc, #164]	; (80020ac <main+0xe34>)
 8002006:	edd3 7a00 	vldr	s15, [r3]
 800200a:	ee27 8a27 	vmul.f32	s16, s14, s15
 800200e:	4b26      	ldr	r3, [pc, #152]	; (80020a8 <main+0xe30>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe fab8 	bl	8000588 <__aeabi_f2d>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	a120      	add	r1, pc, #128	; (adr r1, 80020a0 <main+0xe28>)
 800201e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002022:	f7fe f951 	bl	80002c8 <__aeabi_dsub>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4610      	mov	r0, r2
 800202c:	4619      	mov	r1, r3
 800202e:	f7fe fddb 	bl	8000be8 <__aeabi_d2f>
 8002032:	4603      	mov	r3, r0
 8002034:	ee00 3a10 	vmov	s0, r3
 8002038:	f006 f8a2 	bl	8008180 <cosf>
 800203c:	eeb0 7a40 	vmov.f32	s14, s0
 8002040:	4b1b      	ldr	r3, [pc, #108]	; (80020b0 <main+0xe38>)
 8002042:	edd3 7a00 	vldr	s15, [r3]
 8002046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800204a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800204e:	ee17 0a90 	vmov	r0, s15
 8002052:	f7fe fa99 	bl	8000588 <__aeabi_f2d>
 8002056:	a308      	add	r3, pc, #32	; (adr r3, 8002078 <main+0xe00>)
 8002058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205c:	f7fe faec 	bl	8000638 <__aeabi_dmul>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	4614      	mov	r4, r2
 8002066:	461d      	mov	r5, r3
 8002068:	e02c      	b.n	80020c4 <main+0xe4c>
 800206a:	bf00      	nop
 800206c:	f3af 8000 	nop.w
 8002070:	4d12d84a 	.word	0x4d12d84a
 8002074:	3fe921fb 	.word	0x3fe921fb
 8002078:	00000000 	.word	0x00000000
 800207c:	40113000 	.word	0x40113000
 8002080:	33333333 	.word	0x33333333
 8002084:	3fd33333 	.word	0x3fd33333
 8002088:	00000000 	.word	0x00000000
 800208c:	40a38800 	.word	0x40a38800
 8002090:	79ce2238 	.word	0x79ce2238
 8002094:	4002d97c 	.word	0x4002d97c
 8002098:	20578e5c 	.word	0x20578e5c
 800209c:	400f6a7a 	.word	0x400f6a7a
 80020a0:	e3707d41 	.word	0xe3707d41
 80020a4:	4015fdbb 	.word	0x4015fdbb
 80020a8:	20000298 	.word	0x20000298
 80020ac:	20000274 	.word	0x20000274
 80020b0:	20000270 	.word	0x20000270
 80020b4:	200002b8 	.word	0x200002b8
 80020b8:	200002bc 	.word	0x200002bc
 80020bc:	200002c8 	.word	0x200002c8
 80020c0:	200002c4 	.word	0x200002c4
 80020c4:	4b9e      	ldr	r3, [pc, #632]	; (8002340 <main+0x10c8>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7fe fa5d 	bl	8000588 <__aeabi_f2d>
 80020ce:	a398      	add	r3, pc, #608	; (adr r3, 8002330 <main+0x10b8>)
 80020d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d4:	f7fe fab0 	bl	8000638 <__aeabi_dmul>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4610      	mov	r0, r2
 80020de:	4619      	mov	r1, r3
 80020e0:	a395      	add	r3, pc, #596	; (adr r3, 8002338 <main+0x10c0>)
 80020e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e6:	f7fe faa7 	bl	8000638 <__aeabi_dmul>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	4620      	mov	r0, r4
 80020f0:	4629      	mov	r1, r5
 80020f2:	f7fe f8eb 	bl	80002cc <__adddf3>
 80020f6:	4602      	mov	r2, r0
 80020f8:	460b      	mov	r3, r1
 80020fa:	4610      	mov	r0, r2
 80020fc:	4619      	mov	r1, r3
 80020fe:	f7fe fd73 	bl	8000be8 <__aeabi_d2f>
 8002102:	4603      	mov	r3, r0
 8002104:	4a8f      	ldr	r2, [pc, #572]	; (8002344 <main+0x10cc>)
 8002106:	6013      	str	r3, [r2, #0]


	  //printf("%d, %d, %d, %d\r\n",(int)v_UPPER_RIGHT, (int)v_UPPER_LEFT, (int)v_LOWER_LEFT, (int)v_LOWER_RIGHT);

	  //大出力を制??��?��?
	  float v_biggest = ABS(MAX(MAX(v_UPPER_RIGHT,v_UPPER_LEFT),MAX(v_LOWER_RIGHT,v_LOWER_LEFT)));
 8002108:	4b8f      	ldr	r3, [pc, #572]	; (8002348 <main+0x10d0>)
 800210a:	ed93 7a00 	vldr	s14, [r3]
 800210e:	4b8f      	ldr	r3, [pc, #572]	; (800234c <main+0x10d4>)
 8002110:	edd3 7a00 	vldr	s15, [r3]
 8002114:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800211c:	dd03      	ble.n	8002126 <main+0xeae>
 800211e:	4b8a      	ldr	r3, [pc, #552]	; (8002348 <main+0x10d0>)
 8002120:	ed93 7a00 	vldr	s14, [r3]
 8002124:	e002      	b.n	800212c <main+0xeb4>
 8002126:	4b89      	ldr	r3, [pc, #548]	; (800234c <main+0x10d4>)
 8002128:	ed93 7a00 	vldr	s14, [r3]
 800212c:	4b85      	ldr	r3, [pc, #532]	; (8002344 <main+0x10cc>)
 800212e:	edd3 6a00 	vldr	s13, [r3]
 8002132:	4b87      	ldr	r3, [pc, #540]	; (8002350 <main+0x10d8>)
 8002134:	edd3 7a00 	vldr	s15, [r3]
 8002138:	eef4 6ae7 	vcmpe.f32	s13, s15
 800213c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002140:	dd03      	ble.n	800214a <main+0xed2>
 8002142:	4b80      	ldr	r3, [pc, #512]	; (8002344 <main+0x10cc>)
 8002144:	edd3 7a00 	vldr	s15, [r3]
 8002148:	e002      	b.n	8002150 <main+0xed8>
 800214a:	4b81      	ldr	r3, [pc, #516]	; (8002350 <main+0x10d8>)
 800214c:	edd3 7a00 	vldr	s15, [r3]
 8002150:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002158:	dd22      	ble.n	80021a0 <main+0xf28>
 800215a:	4b7b      	ldr	r3, [pc, #492]	; (8002348 <main+0x10d0>)
 800215c:	ed93 7a00 	vldr	s14, [r3]
 8002160:	4b7a      	ldr	r3, [pc, #488]	; (800234c <main+0x10d4>)
 8002162:	edd3 7a00 	vldr	s15, [r3]
 8002166:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800216a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800216e:	dd0b      	ble.n	8002188 <main+0xf10>
 8002170:	4b75      	ldr	r3, [pc, #468]	; (8002348 <main+0x10d0>)
 8002172:	edd3 7a00 	vldr	s15, [r3]
 8002176:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800217a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800217e:	bf4c      	ite	mi
 8002180:	2301      	movmi	r3, #1
 8002182:	2300      	movpl	r3, #0
 8002184:	b2db      	uxtb	r3, r3
 8002186:	e02d      	b.n	80021e4 <main+0xf6c>
 8002188:	4b70      	ldr	r3, [pc, #448]	; (800234c <main+0x10d4>)
 800218a:	edd3 7a00 	vldr	s15, [r3]
 800218e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002196:	bf4c      	ite	mi
 8002198:	2301      	movmi	r3, #1
 800219a:	2300      	movpl	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	e021      	b.n	80021e4 <main+0xf6c>
 80021a0:	4b68      	ldr	r3, [pc, #416]	; (8002344 <main+0x10cc>)
 80021a2:	ed93 7a00 	vldr	s14, [r3]
 80021a6:	4b6a      	ldr	r3, [pc, #424]	; (8002350 <main+0x10d8>)
 80021a8:	edd3 7a00 	vldr	s15, [r3]
 80021ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b4:	dd0b      	ble.n	80021ce <main+0xf56>
 80021b6:	4b63      	ldr	r3, [pc, #396]	; (8002344 <main+0x10cc>)
 80021b8:	edd3 7a00 	vldr	s15, [r3]
 80021bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c4:	bf4c      	ite	mi
 80021c6:	2301      	movmi	r3, #1
 80021c8:	2300      	movpl	r3, #0
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	e00a      	b.n	80021e4 <main+0xf6c>
 80021ce:	4b60      	ldr	r3, [pc, #384]	; (8002350 <main+0x10d8>)
 80021d0:	edd3 7a00 	vldr	s15, [r3]
 80021d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021dc:	bf4c      	ite	mi
 80021de:	2301      	movmi	r3, #1
 80021e0:	2300      	movpl	r3, #0
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d056      	beq.n	8002296 <main+0x101e>
 80021e8:	4b57      	ldr	r3, [pc, #348]	; (8002348 <main+0x10d0>)
 80021ea:	ed93 7a00 	vldr	s14, [r3]
 80021ee:	4b57      	ldr	r3, [pc, #348]	; (800234c <main+0x10d4>)
 80021f0:	edd3 7a00 	vldr	s15, [r3]
 80021f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021fc:	dd03      	ble.n	8002206 <main+0xf8e>
 80021fe:	4b52      	ldr	r3, [pc, #328]	; (8002348 <main+0x10d0>)
 8002200:	ed93 7a00 	vldr	s14, [r3]
 8002204:	e002      	b.n	800220c <main+0xf94>
 8002206:	4b51      	ldr	r3, [pc, #324]	; (800234c <main+0x10d4>)
 8002208:	ed93 7a00 	vldr	s14, [r3]
 800220c:	4b4d      	ldr	r3, [pc, #308]	; (8002344 <main+0x10cc>)
 800220e:	edd3 6a00 	vldr	s13, [r3]
 8002212:	4b4f      	ldr	r3, [pc, #316]	; (8002350 <main+0x10d8>)
 8002214:	edd3 7a00 	vldr	s15, [r3]
 8002218:	eef4 6ae7 	vcmpe.f32	s13, s15
 800221c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002220:	dd03      	ble.n	800222a <main+0xfb2>
 8002222:	4b48      	ldr	r3, [pc, #288]	; (8002344 <main+0x10cc>)
 8002224:	edd3 7a00 	vldr	s15, [r3]
 8002228:	e002      	b.n	8002230 <main+0xfb8>
 800222a:	4b49      	ldr	r3, [pc, #292]	; (8002350 <main+0x10d8>)
 800222c:	edd3 7a00 	vldr	s15, [r3]
 8002230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002238:	dd16      	ble.n	8002268 <main+0xff0>
 800223a:	4b43      	ldr	r3, [pc, #268]	; (8002348 <main+0x10d0>)
 800223c:	ed93 7a00 	vldr	s14, [r3]
 8002240:	4b42      	ldr	r3, [pc, #264]	; (800234c <main+0x10d4>)
 8002242:	edd3 7a00 	vldr	s15, [r3]
 8002246:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800224a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800224e:	dd05      	ble.n	800225c <main+0xfe4>
 8002250:	4b3d      	ldr	r3, [pc, #244]	; (8002348 <main+0x10d0>)
 8002252:	edd3 7a00 	vldr	s15, [r3]
 8002256:	eef1 7a67 	vneg.f32	s15, s15
 800225a:	e07e      	b.n	800235a <main+0x10e2>
 800225c:	4b3b      	ldr	r3, [pc, #236]	; (800234c <main+0x10d4>)
 800225e:	edd3 7a00 	vldr	s15, [r3]
 8002262:	eef1 7a67 	vneg.f32	s15, s15
 8002266:	e078      	b.n	800235a <main+0x10e2>
 8002268:	4b36      	ldr	r3, [pc, #216]	; (8002344 <main+0x10cc>)
 800226a:	ed93 7a00 	vldr	s14, [r3]
 800226e:	4b38      	ldr	r3, [pc, #224]	; (8002350 <main+0x10d8>)
 8002270:	edd3 7a00 	vldr	s15, [r3]
 8002274:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227c:	dd05      	ble.n	800228a <main+0x1012>
 800227e:	4b31      	ldr	r3, [pc, #196]	; (8002344 <main+0x10cc>)
 8002280:	edd3 7a00 	vldr	s15, [r3]
 8002284:	eef1 7a67 	vneg.f32	s15, s15
 8002288:	e067      	b.n	800235a <main+0x10e2>
 800228a:	4b31      	ldr	r3, [pc, #196]	; (8002350 <main+0x10d8>)
 800228c:	edd3 7a00 	vldr	s15, [r3]
 8002290:	eef1 7a67 	vneg.f32	s15, s15
 8002294:	e061      	b.n	800235a <main+0x10e2>
 8002296:	4b2c      	ldr	r3, [pc, #176]	; (8002348 <main+0x10d0>)
 8002298:	ed93 7a00 	vldr	s14, [r3]
 800229c:	4b2b      	ldr	r3, [pc, #172]	; (800234c <main+0x10d4>)
 800229e:	edd3 7a00 	vldr	s15, [r3]
 80022a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022aa:	dd03      	ble.n	80022b4 <main+0x103c>
 80022ac:	4b26      	ldr	r3, [pc, #152]	; (8002348 <main+0x10d0>)
 80022ae:	ed93 7a00 	vldr	s14, [r3]
 80022b2:	e002      	b.n	80022ba <main+0x1042>
 80022b4:	4b25      	ldr	r3, [pc, #148]	; (800234c <main+0x10d4>)
 80022b6:	ed93 7a00 	vldr	s14, [r3]
 80022ba:	4b22      	ldr	r3, [pc, #136]	; (8002344 <main+0x10cc>)
 80022bc:	edd3 6a00 	vldr	s13, [r3]
 80022c0:	4b23      	ldr	r3, [pc, #140]	; (8002350 <main+0x10d8>)
 80022c2:	edd3 7a00 	vldr	s15, [r3]
 80022c6:	eef4 6ae7 	vcmpe.f32	s13, s15
 80022ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ce:	dd03      	ble.n	80022d8 <main+0x1060>
 80022d0:	4b1c      	ldr	r3, [pc, #112]	; (8002344 <main+0x10cc>)
 80022d2:	edd3 7a00 	vldr	s15, [r3]
 80022d6:	e002      	b.n	80022de <main+0x1066>
 80022d8:	4b1d      	ldr	r3, [pc, #116]	; (8002350 <main+0x10d8>)
 80022da:	edd3 7a00 	vldr	s15, [r3]
 80022de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e6:	dd12      	ble.n	800230e <main+0x1096>
 80022e8:	4b17      	ldr	r3, [pc, #92]	; (8002348 <main+0x10d0>)
 80022ea:	ed93 7a00 	vldr	s14, [r3]
 80022ee:	4b17      	ldr	r3, [pc, #92]	; (800234c <main+0x10d4>)
 80022f0:	edd3 7a00 	vldr	s15, [r3]
 80022f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fc:	dd03      	ble.n	8002306 <main+0x108e>
 80022fe:	4b12      	ldr	r3, [pc, #72]	; (8002348 <main+0x10d0>)
 8002300:	edd3 7a00 	vldr	s15, [r3]
 8002304:	e029      	b.n	800235a <main+0x10e2>
 8002306:	4b11      	ldr	r3, [pc, #68]	; (800234c <main+0x10d4>)
 8002308:	edd3 7a00 	vldr	s15, [r3]
 800230c:	e025      	b.n	800235a <main+0x10e2>
 800230e:	4b0d      	ldr	r3, [pc, #52]	; (8002344 <main+0x10cc>)
 8002310:	ed93 7a00 	vldr	s14, [r3]
 8002314:	4b0e      	ldr	r3, [pc, #56]	; (8002350 <main+0x10d8>)
 8002316:	edd3 7a00 	vldr	s15, [r3]
 800231a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800231e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002322:	dd17      	ble.n	8002354 <main+0x10dc>
 8002324:	4b07      	ldr	r3, [pc, #28]	; (8002344 <main+0x10cc>)
 8002326:	edd3 7a00 	vldr	s15, [r3]
 800232a:	e016      	b.n	800235a <main+0x10e2>
 800232c:	f3af 8000 	nop.w
 8002330:	33333333 	.word	0x33333333
 8002334:	3fd33333 	.word	0x3fd33333
 8002338:	00000000 	.word	0x00000000
 800233c:	40a38800 	.word	0x40a38800
 8002340:	200002b8 	.word	0x200002b8
 8002344:	200002c0 	.word	0x200002c0
 8002348:	200002bc 	.word	0x200002bc
 800234c:	200002c8 	.word	0x200002c8
 8002350:	200002c4 	.word	0x200002c4
 8002354:	4b5f      	ldr	r3, [pc, #380]	; (80024d4 <main+0x125c>)
 8002356:	edd3 7a00 	vldr	s15, [r3]
 800235a:	edc7 7a05 	vstr	s15, [r7, #20]

	  if(v_biggest > VMAX_normal){
 800235e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002362:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80024d8 <main+0x1260>
 8002366:	eef4 7ac7 	vcmpe.f32	s15, s14
 800236a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800236e:	dd7f      	ble.n	8002470 <main+0x11f8>
		  v_UPPER_RIGHT	*= VMAX_normal / v_biggest;
 8002370:	4b5a      	ldr	r3, [pc, #360]	; (80024dc <main+0x1264>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4618      	mov	r0, r3
 8002376:	f7fe f907 	bl	8000588 <__aeabi_f2d>
 800237a:	4604      	mov	r4, r0
 800237c:	460d      	mov	r5, r1
 800237e:	6978      	ldr	r0, [r7, #20]
 8002380:	f7fe f902 	bl	8000588 <__aeabi_f2d>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	f04f 0000 	mov.w	r0, #0
 800238c:	4954      	ldr	r1, [pc, #336]	; (80024e0 <main+0x1268>)
 800238e:	f7fe fa7d 	bl	800088c <__aeabi_ddiv>
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	4620      	mov	r0, r4
 8002398:	4629      	mov	r1, r5
 800239a:	f7fe f94d 	bl	8000638 <__aeabi_dmul>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4610      	mov	r0, r2
 80023a4:	4619      	mov	r1, r3
 80023a6:	f7fe fc1f 	bl	8000be8 <__aeabi_d2f>
 80023aa:	4603      	mov	r3, r0
 80023ac:	4a4b      	ldr	r2, [pc, #300]	; (80024dc <main+0x1264>)
 80023ae:	6013      	str	r3, [r2, #0]
		  v_UPPER_LEFT	*= VMAX_normal / v_biggest;
 80023b0:	4b4c      	ldr	r3, [pc, #304]	; (80024e4 <main+0x126c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fe f8e7 	bl	8000588 <__aeabi_f2d>
 80023ba:	4604      	mov	r4, r0
 80023bc:	460d      	mov	r5, r1
 80023be:	6978      	ldr	r0, [r7, #20]
 80023c0:	f7fe f8e2 	bl	8000588 <__aeabi_f2d>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	f04f 0000 	mov.w	r0, #0
 80023cc:	4944      	ldr	r1, [pc, #272]	; (80024e0 <main+0x1268>)
 80023ce:	f7fe fa5d 	bl	800088c <__aeabi_ddiv>
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	4620      	mov	r0, r4
 80023d8:	4629      	mov	r1, r5
 80023da:	f7fe f92d 	bl	8000638 <__aeabi_dmul>
 80023de:	4602      	mov	r2, r0
 80023e0:	460b      	mov	r3, r1
 80023e2:	4610      	mov	r0, r2
 80023e4:	4619      	mov	r1, r3
 80023e6:	f7fe fbff 	bl	8000be8 <__aeabi_d2f>
 80023ea:	4603      	mov	r3, r0
 80023ec:	4a3d      	ldr	r2, [pc, #244]	; (80024e4 <main+0x126c>)
 80023ee:	6013      	str	r3, [r2, #0]
		  v_LOWER_LEFT	*= VMAX_normal / v_biggest;
 80023f0:	4b38      	ldr	r3, [pc, #224]	; (80024d4 <main+0x125c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7fe f8c7 	bl	8000588 <__aeabi_f2d>
 80023fa:	4604      	mov	r4, r0
 80023fc:	460d      	mov	r5, r1
 80023fe:	6978      	ldr	r0, [r7, #20]
 8002400:	f7fe f8c2 	bl	8000588 <__aeabi_f2d>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	f04f 0000 	mov.w	r0, #0
 800240c:	4934      	ldr	r1, [pc, #208]	; (80024e0 <main+0x1268>)
 800240e:	f7fe fa3d 	bl	800088c <__aeabi_ddiv>
 8002412:	4602      	mov	r2, r0
 8002414:	460b      	mov	r3, r1
 8002416:	4620      	mov	r0, r4
 8002418:	4629      	mov	r1, r5
 800241a:	f7fe f90d 	bl	8000638 <__aeabi_dmul>
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	4610      	mov	r0, r2
 8002424:	4619      	mov	r1, r3
 8002426:	f7fe fbdf 	bl	8000be8 <__aeabi_d2f>
 800242a:	4603      	mov	r3, r0
 800242c:	4a29      	ldr	r2, [pc, #164]	; (80024d4 <main+0x125c>)
 800242e:	6013      	str	r3, [r2, #0]
		  v_LOWER_RIGHT	*= VMAX_normal / v_biggest;
 8002430:	4b2d      	ldr	r3, [pc, #180]	; (80024e8 <main+0x1270>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe f8a7 	bl	8000588 <__aeabi_f2d>
 800243a:	4604      	mov	r4, r0
 800243c:	460d      	mov	r5, r1
 800243e:	6978      	ldr	r0, [r7, #20]
 8002440:	f7fe f8a2 	bl	8000588 <__aeabi_f2d>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	f04f 0000 	mov.w	r0, #0
 800244c:	4924      	ldr	r1, [pc, #144]	; (80024e0 <main+0x1268>)
 800244e:	f7fe fa1d 	bl	800088c <__aeabi_ddiv>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	4620      	mov	r0, r4
 8002458:	4629      	mov	r1, r5
 800245a:	f7fe f8ed 	bl	8000638 <__aeabi_dmul>
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	4610      	mov	r0, r2
 8002464:	4619      	mov	r1, r3
 8002466:	f7fe fbbf 	bl	8000be8 <__aeabi_d2f>
 800246a:	4603      	mov	r3, r0
 800246c:	4a1e      	ldr	r2, [pc, #120]	; (80024e8 <main+0x1270>)
 800246e:	6013      	str	r3, [r2, #0]
	  }

	  //モーターを動かす
	  MD03SetMotor(USART3, Motor_UPPER_RIGHT, (int)v_UPPER_RIGHT);
 8002470:	4b1a      	ldr	r3, [pc, #104]	; (80024dc <main+0x1264>)
 8002472:	edd3 7a00 	vldr	s15, [r3]
 8002476:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800247a:	ee17 2a90 	vmov	r2, s15
 800247e:	2100      	movs	r1, #0
 8002480:	481a      	ldr	r0, [pc, #104]	; (80024ec <main+0x1274>)
 8002482:	f7fe fdbb 	bl	8000ffc <MD03SetMotor>
	  MD03SetMotor(USART3, Motor_UPPER_LEFT, (int)v_UPPER_LEFT);
 8002486:	4b17      	ldr	r3, [pc, #92]	; (80024e4 <main+0x126c>)
 8002488:	edd3 7a00 	vldr	s15, [r3]
 800248c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002490:	ee17 2a90 	vmov	r2, s15
 8002494:	2101      	movs	r1, #1
 8002496:	4815      	ldr	r0, [pc, #84]	; (80024ec <main+0x1274>)
 8002498:	f7fe fdb0 	bl	8000ffc <MD03SetMotor>
	  MD03SetMotor(USART3, Motor_LOWER_LEFT, (int)v_LOWER_LEFT);
 800249c:	4b0d      	ldr	r3, [pc, #52]	; (80024d4 <main+0x125c>)
 800249e:	edd3 7a00 	vldr	s15, [r3]
 80024a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024a6:	ee17 2a90 	vmov	r2, s15
 80024aa:	2102      	movs	r1, #2
 80024ac:	480f      	ldr	r0, [pc, #60]	; (80024ec <main+0x1274>)
 80024ae:	f7fe fda5 	bl	8000ffc <MD03SetMotor>
	  MD03SetMotor(USART3, Motor_LOWER_RIGHT, (int)v_LOWER_RIGHT);
 80024b2:	4b0d      	ldr	r3, [pc, #52]	; (80024e8 <main+0x1270>)
 80024b4:	edd3 7a00 	vldr	s15, [r3]
 80024b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024bc:	ee17 2a90 	vmov	r2, s15
 80024c0:	2103      	movs	r1, #3
 80024c2:	480a      	ldr	r0, [pc, #40]	; (80024ec <main+0x1274>)
 80024c4:	f7fe fd9a 	bl	8000ffc <MD03SetMotor>

	  old_error = error;
 80024c8:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <main+0x1278>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a09      	ldr	r2, [pc, #36]	; (80024f4 <main+0x127c>)
 80024ce:	6013      	str	r3, [r2, #0]
  {
 80024d0:	f7fe bf0e 	b.w	80012f0 <main+0x78>
 80024d4:	200002c4 	.word	0x200002c4
 80024d8:	44098000 	.word	0x44098000
 80024dc:	200002bc 	.word	0x200002bc
 80024e0:	40813000 	.word	0x40813000
 80024e4:	200002c8 	.word	0x200002c8
 80024e8:	200002c0 	.word	0x200002c0
 80024ec:	40004800 	.word	0x40004800
 80024f0:	200002ac 	.word	0x200002ac
 80024f4:	200002b0 	.word	0x200002b0

080024f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b094      	sub	sp, #80	; 0x50
 80024fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024fe:	f107 031c 	add.w	r3, r7, #28
 8002502:	2234      	movs	r2, #52	; 0x34
 8002504:	2100      	movs	r1, #0
 8002506:	4618      	mov	r0, r3
 8002508:	f003 f84e 	bl	80055a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800250c:	f107 0308 	add.w	r3, r7, #8
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	605a      	str	r2, [r3, #4]
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	60da      	str	r2, [r3, #12]
 800251a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800251c:	2300      	movs	r3, #0
 800251e:	607b      	str	r3, [r7, #4]
 8002520:	4b29      	ldr	r3, [pc, #164]	; (80025c8 <SystemClock_Config+0xd0>)
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	4a28      	ldr	r2, [pc, #160]	; (80025c8 <SystemClock_Config+0xd0>)
 8002526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800252a:	6413      	str	r3, [r2, #64]	; 0x40
 800252c:	4b26      	ldr	r3, [pc, #152]	; (80025c8 <SystemClock_Config+0xd0>)
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002534:	607b      	str	r3, [r7, #4]
 8002536:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002538:	2300      	movs	r3, #0
 800253a:	603b      	str	r3, [r7, #0]
 800253c:	4b23      	ldr	r3, [pc, #140]	; (80025cc <SystemClock_Config+0xd4>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002544:	4a21      	ldr	r2, [pc, #132]	; (80025cc <SystemClock_Config+0xd4>)
 8002546:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	4b1f      	ldr	r3, [pc, #124]	; (80025cc <SystemClock_Config+0xd4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002554:	603b      	str	r3, [r7, #0]
 8002556:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002558:	2302      	movs	r3, #2
 800255a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800255c:	2301      	movs	r3, #1
 800255e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002560:	2310      	movs	r3, #16
 8002562:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002564:	2302      	movs	r3, #2
 8002566:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002568:	2300      	movs	r3, #0
 800256a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800256c:	2308      	movs	r3, #8
 800256e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002570:	2348      	movs	r3, #72	; 0x48
 8002572:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002574:	2302      	movs	r3, #2
 8002576:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002578:	2303      	movs	r3, #3
 800257a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800257c:	2302      	movs	r3, #2
 800257e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002580:	f107 031c 	add.w	r3, r7, #28
 8002584:	4618      	mov	r0, r3
 8002586:	f001 fc2d 	bl	8003de4 <HAL_RCC_OscConfig>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002590:	f000 f906 	bl	80027a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002594:	230f      	movs	r3, #15
 8002596:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002598:	2302      	movs	r3, #2
 800259a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800259c:	2300      	movs	r3, #0
 800259e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80025a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025a6:	2300      	movs	r3, #0
 80025a8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80025aa:	f107 0308 	add.w	r3, r7, #8
 80025ae:	2102      	movs	r1, #2
 80025b0:	4618      	mov	r0, r3
 80025b2:	f001 f8cd 	bl	8003750 <HAL_RCC_ClockConfig>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80025bc:	f000 f8f0 	bl	80027a0 <Error_Handler>
  }
}
 80025c0:	bf00      	nop
 80025c2:	3750      	adds	r7, #80	; 0x50
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40023800 	.word	0x40023800
 80025cc:	40007000 	.word	0x40007000

080025d0 <Analyze_Raw_Data>:

/* USER CODE BEGIN 4 */
void Analyze_Raw_Data()
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
    for(int i=0; i<16; i++){
 80025d6:	2300      	movs	r3, #0
 80025d8:	607b      	str	r3, [r7, #4]
 80025da:	e01e      	b.n	800261a <Analyze_Raw_Data+0x4a>
    	int f = (SBDBTRxData[DS3_BTNS_DATMAP_BYTE[i]] & DS3_BTNS_DATMAP_BITMASK[i]) == DS3_BTNS_DATMAP_FLAGBIT[i];
 80025dc:	4a2d      	ldr	r2, [pc, #180]	; (8002694 <Analyze_Raw_Data+0xc4>)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4413      	add	r3, r2
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	4b2c      	ldr	r3, [pc, #176]	; (8002698 <Analyze_Raw_Data+0xc8>)
 80025e8:	5c9a      	ldrb	r2, [r3, r2]
 80025ea:	492c      	ldr	r1, [pc, #176]	; (800269c <Analyze_Raw_Data+0xcc>)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	440b      	add	r3, r1
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	4013      	ands	r3, r2
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	492a      	ldr	r1, [pc, #168]	; (80026a0 <Analyze_Raw_Data+0xd0>)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	440b      	add	r3, r1
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	429a      	cmp	r2, r3
 8002600:	bf0c      	ite	eq
 8002602:	2301      	moveq	r3, #1
 8002604:	2300      	movne	r3, #0
 8002606:	b2db      	uxtb	r3, r3
 8002608:	603b      	str	r3, [r7, #0]
        buttonsIsPressed[i] = f;
 800260a:	4926      	ldr	r1, [pc, #152]	; (80026a4 <Analyze_Raw_Data+0xd4>)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(int i=0; i<16; i++){
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3301      	adds	r3, #1
 8002618:	607b      	str	r3, [r7, #4]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b0f      	cmp	r3, #15
 800261e:	dddd      	ble.n	80025dc <Analyze_Raw_Data+0xc>
    }
    LX = (float)(SBDBTRxData[3]) - 64.0f;
 8002620:	4b1d      	ldr	r3, [pc, #116]	; (8002698 <Analyze_Raw_Data+0xc8>)
 8002622:	78db      	ldrb	r3, [r3, #3]
 8002624:	ee07 3a90 	vmov	s15, r3
 8002628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800262c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80026a8 <Analyze_Raw_Data+0xd8>
 8002630:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002634:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <Analyze_Raw_Data+0xdc>)
 8002636:	edc3 7a00 	vstr	s15, [r3]
    LY = 64.0f - (float)(SBDBTRxData[4]);
 800263a:	4b17      	ldr	r3, [pc, #92]	; (8002698 <Analyze_Raw_Data+0xc8>)
 800263c:	791b      	ldrb	r3, [r3, #4]
 800263e:	ee07 3a90 	vmov	s15, r3
 8002642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002646:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80026a8 <Analyze_Raw_Data+0xd8>
 800264a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800264e:	4b18      	ldr	r3, [pc, #96]	; (80026b0 <Analyze_Raw_Data+0xe0>)
 8002650:	edc3 7a00 	vstr	s15, [r3]
    RX = (float)(SBDBTRxData[5]) - 64.0f;
 8002654:	4b10      	ldr	r3, [pc, #64]	; (8002698 <Analyze_Raw_Data+0xc8>)
 8002656:	795b      	ldrb	r3, [r3, #5]
 8002658:	ee07 3a90 	vmov	s15, r3
 800265c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002660:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80026a8 <Analyze_Raw_Data+0xd8>
 8002664:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002668:	4b12      	ldr	r3, [pc, #72]	; (80026b4 <Analyze_Raw_Data+0xe4>)
 800266a:	edc3 7a00 	vstr	s15, [r3]
    RY = 64.0f - (float)(SBDBTRxData[6]);
 800266e:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <Analyze_Raw_Data+0xc8>)
 8002670:	799b      	ldrb	r3, [r3, #6]
 8002672:	ee07 3a90 	vmov	s15, r3
 8002676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800267a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80026a8 <Analyze_Raw_Data+0xd8>
 800267e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002682:	4b0d      	ldr	r3, [pc, #52]	; (80026b8 <Analyze_Raw_Data+0xe8>)
 8002684:	edc3 7a00 	vstr	s15, [r3]
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	20000000 	.word	0x20000000
 8002698:	20000228 	.word	0x20000228
 800269c:	20000010 	.word	0x20000010
 80026a0:	20000020 	.word	0x20000020
 80026a4:	20000230 	.word	0x20000230
 80026a8:	42800000 	.word	0x42800000
 80026ac:	20000270 	.word	0x20000270
 80026b0:	20000274 	.word	0x20000274
 80026b4:	20000278 	.word	0x20000278
 80026b8:	2000027c 	.word	0x2000027c

080026bc <_write>:

int _write(int file, char *ptr, int len)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	230a      	movs	r3, #10
 80026ce:	68b9      	ldr	r1, [r7, #8]
 80026d0:	4803      	ldr	r0, [pc, #12]	; (80026e0 <_write+0x24>)
 80026d2:	f001 fe72 	bl	80043ba <HAL_UART_Transmit>
  return len;
 80026d6:	687b      	ldr	r3, [r7, #4]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	20000358 	.word	0x20000358

080026e4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_IT(&huart1, SBDBTRxData, 8);
 80026ec:	2208      	movs	r2, #8
 80026ee:	4905      	ldr	r1, [pc, #20]	; (8002704 <HAL_UART_RxCpltCallback+0x20>)
 80026f0:	4805      	ldr	r0, [pc, #20]	; (8002708 <HAL_UART_RxCpltCallback+0x24>)
 80026f2:	f001 ff96 	bl	8004622 <HAL_UART_Receive_IT>
    Analyze_Raw_Data();
 80026f6:	f7ff ff6b 	bl	80025d0 <Analyze_Raw_Data>
}
 80026fa:	bf00      	nop
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20000228 	.word	0x20000228
 8002708:	20000314 	.word	0x20000314
 800270c:	00000000 	.word	0x00000000

08002710 <normalize_angle>:

double normalize_angle(double rad){
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	ed87 0b00 	vstr	d0, [r7]
	while(rad > pi) rad -= 2*pi;
 800271a:	e00a      	b.n	8002732 <normalize_angle+0x22>
 800271c:	a31a      	add	r3, pc, #104	; (adr r3, 8002788 <normalize_angle+0x78>)
 800271e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002722:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002726:	f7fd fdcf 	bl	80002c8 <__aeabi_dsub>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	e9c7 2300 	strd	r2, r3, [r7]
 8002732:	a317      	add	r3, pc, #92	; (adr r3, 8002790 <normalize_angle+0x80>)
 8002734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002738:	e9d7 0100 	ldrd	r0, r1, [r7]
 800273c:	f7fe fa0c 	bl	8000b58 <__aeabi_dcmpgt>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1ea      	bne.n	800271c <normalize_angle+0xc>
	while(rad < -pi) rad += 2*pi;
 8002746:	e00a      	b.n	800275e <normalize_angle+0x4e>
 8002748:	a30f      	add	r3, pc, #60	; (adr r3, 8002788 <normalize_angle+0x78>)
 800274a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002752:	f7fd fdbb 	bl	80002cc <__adddf3>
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	e9c7 2300 	strd	r2, r3, [r7]
 800275e:	a30e      	add	r3, pc, #56	; (adr r3, 8002798 <normalize_angle+0x88>)
 8002760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002764:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002768:	f7fe f9d8 	bl	8000b1c <__aeabi_dcmplt>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1ea      	bne.n	8002748 <normalize_angle+0x38>
	return rad;
 8002772:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002776:	ec43 2b17 	vmov	d7, r2, r3
}
 800277a:	eeb0 0a47 	vmov.f32	s0, s14
 800277e:	eef0 0a67 	vmov.f32	s1, s15
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	4d12d84a 	.word	0x4d12d84a
 800278c:	401921fb 	.word	0x401921fb
 8002790:	4d12d84a 	.word	0x4d12d84a
 8002794:	400921fb 	.word	0x400921fb
 8002798:	4d12d84a 	.word	0x4d12d84a
 800279c:	c00921fb 	.word	0xc00921fb

080027a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */

  /* USER CODE END Error_Handler_Debug */
}
 80027a4:	bf00      	nop
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <servo22SetPulse>:
#include"servoForSTM.h"

void servo22SetPulse(USART_TypeDef* USARTx_2,uint8_t id,uint8_t port,int pulse){//500<pulse<2500
 80027ae:	b480      	push	{r7}
 80027b0:	b087      	sub	sp, #28
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	60f8      	str	r0, [r7, #12]
 80027b6:	607b      	str	r3, [r7, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	72fb      	strb	r3, [r7, #11]
 80027bc:	4613      	mov	r3, r2
 80027be:	72bb      	strb	r3, [r7, #10]

    uint8_t send;
    uint8_t sum=6;
 80027c0:	2306      	movs	r3, #6
 80027c2:	75fb      	strb	r3, [r7, #23]

    if(pulse> 4095)pulse=4095;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ca:	db02      	blt.n	80027d2 <servo22SetPulse+0x24>
 80027cc:	f640 73ff 	movw	r3, #4095	; 0xfff
 80027d0:	607b      	str	r3, [r7, #4]
    if(pulse< 0   )pulse=0;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	da01      	bge.n	80027dc <servo22SetPulse+0x2e>
 80027d8:	2300      	movs	r3, #0
 80027da:	607b      	str	r3, [r7, #4]

    send=0x80 | (0b000<<4) | (id & 0xF);
 80027dc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80027e0:	f003 030f 	and.w	r3, r3, #15
 80027e4:	b25b      	sxtb	r3, r3
 80027e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027ea:	b25b      	sxtb	r3, r3
 80027ec:	75bb      	strb	r3, [r7, #22]
    sum+=send;
 80027ee:	7dfa      	ldrb	r2, [r7, #23]
 80027f0:	7dbb      	ldrb	r3, [r7, #22]
 80027f2:	4413      	add	r3, r2
 80027f4:	75fb      	strb	r3, [r7, #23]
    while ( (USARTx_2->SR & 0x0080) != 0x0080);//0x0080=USART_TXE
 80027f6:	bf00      	nop
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002800:	2b80      	cmp	r3, #128	; 0x80
 8002802:	d1f9      	bne.n	80027f8 <servo22SetPulse+0x4a>
    USARTx_2->DR = (uint8_t)send;
 8002804:	7dba      	ldrb	r2, [r7, #22]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	605a      	str	r2, [r3, #4]

    send=pulse&0x7F;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	b2db      	uxtb	r3, r3
 800280e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002812:	75bb      	strb	r3, [r7, #22]
    sum+=send;
 8002814:	7dfa      	ldrb	r2, [r7, #23]
 8002816:	7dbb      	ldrb	r3, [r7, #22]
 8002818:	4413      	add	r3, r2
 800281a:	75fb      	strb	r3, [r7, #23]
    while ( (USARTx_2->SR & 0x0080) != 0x0080);
 800281c:	bf00      	nop
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002826:	2b80      	cmp	r3, #128	; 0x80
 8002828:	d1f9      	bne.n	800281e <servo22SetPulse+0x70>
    USARTx_2->DR = (uint8_t)send;
 800282a:	7dba      	ldrb	r2, [r7, #22]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	605a      	str	r2, [r3, #4]

    send=((pulse>>7)&0b11111) | ( (port&0b11) << 5);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	11db      	asrs	r3, r3, #7
 8002834:	b25b      	sxtb	r3, r3
 8002836:	f003 031f 	and.w	r3, r3, #31
 800283a:	b25a      	sxtb	r2, r3
 800283c:	7abb      	ldrb	r3, [r7, #10]
 800283e:	015b      	lsls	r3, r3, #5
 8002840:	b25b      	sxtb	r3, r3
 8002842:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002846:	b25b      	sxtb	r3, r3
 8002848:	4313      	orrs	r3, r2
 800284a:	b25b      	sxtb	r3, r3
 800284c:	75bb      	strb	r3, [r7, #22]
    sum+=send;
 800284e:	7dfa      	ldrb	r2, [r7, #23]
 8002850:	7dbb      	ldrb	r3, [r7, #22]
 8002852:	4413      	add	r3, r2
 8002854:	75fb      	strb	r3, [r7, #23]
    while ( (USARTx_2->SR & 0x0080) != 0x0080);
 8002856:	bf00      	nop
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002860:	2b80      	cmp	r3, #128	; 0x80
 8002862:	d1f9      	bne.n	8002858 <servo22SetPulse+0xaa>
    USARTx_2->DR = (uint8_t)send;
 8002864:	7dba      	ldrb	r2, [r7, #22]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	605a      	str	r2, [r3, #4]

    send=sum&0x7F;
 800286a:	7dfb      	ldrb	r3, [r7, #23]
 800286c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002870:	75bb      	strb	r3, [r7, #22]
    while ( (USARTx_2->SR & 0x0080) != 0x0080);
 8002872:	bf00      	nop
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800287c:	2b80      	cmp	r3, #128	; 0x80
 800287e:	d1f9      	bne.n	8002874 <servo22SetPulse+0xc6>
    USARTx_2->DR = (uint8_t)send;
 8002880:	7dba      	ldrb	r2, [r7, #22]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	605a      	str	r2, [r3, #4]
}
 8002886:	bf00      	nop
 8002888:	371c      	adds	r7, #28
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
	...

08002894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	607b      	str	r3, [r7, #4]
 800289e:	4b10      	ldr	r3, [pc, #64]	; (80028e0 <HAL_MspInit+0x4c>)
 80028a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a2:	4a0f      	ldr	r2, [pc, #60]	; (80028e0 <HAL_MspInit+0x4c>)
 80028a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028a8:	6453      	str	r3, [r2, #68]	; 0x44
 80028aa:	4b0d      	ldr	r3, [pc, #52]	; (80028e0 <HAL_MspInit+0x4c>)
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028b2:	607b      	str	r3, [r7, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	603b      	str	r3, [r7, #0]
 80028ba:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <HAL_MspInit+0x4c>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	4a08      	ldr	r2, [pc, #32]	; (80028e0 <HAL_MspInit+0x4c>)
 80028c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c4:	6413      	str	r3, [r2, #64]	; 0x40
 80028c6:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <HAL_MspInit+0x4c>)
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ce:	603b      	str	r3, [r7, #0]
 80028d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 80028d2:	2006      	movs	r0, #6
 80028d4:	f000 fcba 	bl	800324c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028d8:	bf00      	nop
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40023800 	.word	0x40023800

080028e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028e8:	e7fe      	b.n	80028e8 <NMI_Handler+0x4>

080028ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ea:	b480      	push	{r7}
 80028ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028ee:	e7fe      	b.n	80028ee <HardFault_Handler+0x4>

080028f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028f4:	e7fe      	b.n	80028f4 <MemManage_Handler+0x4>

080028f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028f6:	b480      	push	{r7}
 80028f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028fa:	e7fe      	b.n	80028fa <BusFault_Handler+0x4>

080028fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002900:	e7fe      	b.n	8002900 <UsageFault_Handler+0x4>

08002902 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002902:	b480      	push	{r7}
 8002904:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002906:	bf00      	nop
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002914:	bf00      	nop
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800291e:	b480      	push	{r7}
 8002920:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002922:	bf00      	nop
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002930:	f000 fb78 	bl	8003024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002934:	bf00      	nop
 8002936:	bd80      	pop	{r7, pc}

08002938 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800293c:	4802      	ldr	r0, [pc, #8]	; (8002948 <USART1_IRQHandler+0x10>)
 800293e:	f001 fea1 	bl	8004684 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20000314 	.word	0x20000314

0800294c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  return 1;
 8002950:	2301      	movs	r3, #1
}
 8002952:	4618      	mov	r0, r3
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <_kill>:

int _kill(int pid, int sig)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002966:	f002 fdf5 	bl	8005554 <__errno>
 800296a:	4603      	mov	r3, r0
 800296c:	2216      	movs	r2, #22
 800296e:	601a      	str	r2, [r3, #0]
  return -1;
 8002970:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002974:	4618      	mov	r0, r3
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <_exit>:

void _exit (int status)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002984:	f04f 31ff 	mov.w	r1, #4294967295
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f7ff ffe7 	bl	800295c <_kill>
  while (1) {}    /* Make sure we hang here */
 800298e:	e7fe      	b.n	800298e <_exit+0x12>

08002990 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800299c:	2300      	movs	r3, #0
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	e00a      	b.n	80029b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029a2:	f3af 8000 	nop.w
 80029a6:	4601      	mov	r1, r0
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	1c5a      	adds	r2, r3, #1
 80029ac:	60ba      	str	r2, [r7, #8]
 80029ae:	b2ca      	uxtb	r2, r1
 80029b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	3301      	adds	r3, #1
 80029b6:	617b      	str	r3, [r7, #20]
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	429a      	cmp	r2, r3
 80029be:	dbf0      	blt.n	80029a2 <_read+0x12>
  }

  return len;
 80029c0:	687b      	ldr	r3, [r7, #4]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3718      	adds	r7, #24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <_close>:
  }
  return len;
}

int _close(int file)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
 80029ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029f2:	605a      	str	r2, [r3, #4]
  return 0;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <_isatty>:

int _isatty(int file)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a0a:	2301      	movs	r3, #1
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
	...

08002a34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a3c:	4a14      	ldr	r2, [pc, #80]	; (8002a90 <_sbrk+0x5c>)
 8002a3e:	4b15      	ldr	r3, [pc, #84]	; (8002a94 <_sbrk+0x60>)
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a48:	4b13      	ldr	r3, [pc, #76]	; (8002a98 <_sbrk+0x64>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d102      	bne.n	8002a56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a50:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <_sbrk+0x64>)
 8002a52:	4a12      	ldr	r2, [pc, #72]	; (8002a9c <_sbrk+0x68>)
 8002a54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a56:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <_sbrk+0x64>)
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d207      	bcs.n	8002a74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a64:	f002 fd76 	bl	8005554 <__errno>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	220c      	movs	r2, #12
 8002a6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a72:	e009      	b.n	8002a88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a74:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <_sbrk+0x64>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a7a:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <_sbrk+0x64>)
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4413      	add	r3, r2
 8002a82:	4a05      	ldr	r2, [pc, #20]	; (8002a98 <_sbrk+0x64>)
 8002a84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a86:	68fb      	ldr	r3, [r7, #12]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	20020000 	.word	0x20020000
 8002a94:	00000400 	.word	0x00000400
 8002a98:	200002cc 	.word	0x200002cc
 8002a9c:	20000438 	.word	0x20000438

08002aa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002aa4:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <SystemInit+0x20>)
 8002aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aaa:	4a05      	ldr	r2, [pc, #20]	; (8002ac0 <SystemInit+0x20>)
 8002aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ab4:	bf00      	nop
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	e000ed00 	.word	0xe000ed00

08002ac4 <MX_UART4_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002ac8:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <MX_UART4_Init+0x4c>)
 8002aca:	4a12      	ldr	r2, [pc, #72]	; (8002b14 <MX_UART4_Init+0x50>)
 8002acc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002ace:	4b10      	ldr	r3, [pc, #64]	; (8002b10 <MX_UART4_Init+0x4c>)
 8002ad0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ad4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002ad6:	4b0e      	ldr	r3, [pc, #56]	; (8002b10 <MX_UART4_Init+0x4c>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002adc:	4b0c      	ldr	r3, [pc, #48]	; (8002b10 <MX_UART4_Init+0x4c>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002ae2:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <MX_UART4_Init+0x4c>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002ae8:	4b09      	ldr	r3, [pc, #36]	; (8002b10 <MX_UART4_Init+0x4c>)
 8002aea:	220c      	movs	r2, #12
 8002aec:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aee:	4b08      	ldr	r3, [pc, #32]	; (8002b10 <MX_UART4_Init+0x4c>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002af4:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <MX_UART4_Init+0x4c>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002afa:	4805      	ldr	r0, [pc, #20]	; (8002b10 <MX_UART4_Init+0x4c>)
 8002afc:	f001 fc10 	bl	8004320 <HAL_UART_Init>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002b06:	f7ff fe4b 	bl	80027a0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002b0a:	bf00      	nop
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	200002d0 	.word	0x200002d0
 8002b14:	40004c00 	.word	0x40004c00

08002b18 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b1c:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <MX_USART1_UART_Init+0x4c>)
 8002b1e:	4a12      	ldr	r2, [pc, #72]	; (8002b68 <MX_USART1_UART_Init+0x50>)
 8002b20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b22:	4b10      	ldr	r3, [pc, #64]	; (8002b64 <MX_USART1_UART_Init+0x4c>)
 8002b24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b2a:	4b0e      	ldr	r3, [pc, #56]	; (8002b64 <MX_USART1_UART_Init+0x4c>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b30:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <MX_USART1_UART_Init+0x4c>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b36:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <MX_USART1_UART_Init+0x4c>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b3c:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <MX_USART1_UART_Init+0x4c>)
 8002b3e:	220c      	movs	r2, #12
 8002b40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b42:	4b08      	ldr	r3, [pc, #32]	; (8002b64 <MX_USART1_UART_Init+0x4c>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b48:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <MX_USART1_UART_Init+0x4c>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b4e:	4805      	ldr	r0, [pc, #20]	; (8002b64 <MX_USART1_UART_Init+0x4c>)
 8002b50:	f001 fbe6 	bl	8004320 <HAL_UART_Init>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002b5a:	f7ff fe21 	bl	80027a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b5e:	bf00      	nop
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	20000314 	.word	0x20000314
 8002b68:	40011000 	.word	0x40011000

08002b6c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b70:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <MX_USART2_UART_Init+0x4c>)
 8002b72:	4a12      	ldr	r2, [pc, #72]	; (8002bbc <MX_USART2_UART_Init+0x50>)
 8002b74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b76:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <MX_USART2_UART_Init+0x4c>)
 8002b78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b7e:	4b0e      	ldr	r3, [pc, #56]	; (8002bb8 <MX_USART2_UART_Init+0x4c>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b84:	4b0c      	ldr	r3, [pc, #48]	; (8002bb8 <MX_USART2_UART_Init+0x4c>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b8a:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <MX_USART2_UART_Init+0x4c>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b90:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <MX_USART2_UART_Init+0x4c>)
 8002b92:	220c      	movs	r2, #12
 8002b94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b96:	4b08      	ldr	r3, [pc, #32]	; (8002bb8 <MX_USART2_UART_Init+0x4c>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b9c:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <MX_USART2_UART_Init+0x4c>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ba2:	4805      	ldr	r0, [pc, #20]	; (8002bb8 <MX_USART2_UART_Init+0x4c>)
 8002ba4:	f001 fbbc 	bl	8004320 <HAL_UART_Init>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002bae:	f7ff fdf7 	bl	80027a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002bb2:	bf00      	nop
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	20000358 	.word	0x20000358
 8002bbc:	40004400 	.word	0x40004400

08002bc0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002bc4:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <MX_USART3_UART_Init+0x4c>)
 8002bc6:	4a12      	ldr	r2, [pc, #72]	; (8002c10 <MX_USART3_UART_Init+0x50>)
 8002bc8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002bca:	4b10      	ldr	r3, [pc, #64]	; (8002c0c <MX_USART3_UART_Init+0x4c>)
 8002bcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bd0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002bd2:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <MX_USART3_UART_Init+0x4c>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002bd8:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <MX_USART3_UART_Init+0x4c>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002bde:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <MX_USART3_UART_Init+0x4c>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002be4:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <MX_USART3_UART_Init+0x4c>)
 8002be6:	220c      	movs	r2, #12
 8002be8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bea:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <MX_USART3_UART_Init+0x4c>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bf0:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <MX_USART3_UART_Init+0x4c>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002bf6:	4805      	ldr	r0, [pc, #20]	; (8002c0c <MX_USART3_UART_Init+0x4c>)
 8002bf8:	f001 fb92 	bl	8004320 <HAL_UART_Init>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002c02:	f7ff fdcd 	bl	80027a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	2000039c 	.word	0x2000039c
 8002c10:	40004800 	.word	0x40004800

08002c14 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002c18:	4b11      	ldr	r3, [pc, #68]	; (8002c60 <MX_USART6_UART_Init+0x4c>)
 8002c1a:	4a12      	ldr	r2, [pc, #72]	; (8002c64 <MX_USART6_UART_Init+0x50>)
 8002c1c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002c1e:	4b10      	ldr	r3, [pc, #64]	; (8002c60 <MX_USART6_UART_Init+0x4c>)
 8002c20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c24:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002c26:	4b0e      	ldr	r3, [pc, #56]	; (8002c60 <MX_USART6_UART_Init+0x4c>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <MX_USART6_UART_Init+0x4c>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002c32:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <MX_USART6_UART_Init+0x4c>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002c38:	4b09      	ldr	r3, [pc, #36]	; (8002c60 <MX_USART6_UART_Init+0x4c>)
 8002c3a:	220c      	movs	r2, #12
 8002c3c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c3e:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <MX_USART6_UART_Init+0x4c>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c44:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <MX_USART6_UART_Init+0x4c>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002c4a:	4805      	ldr	r0, [pc, #20]	; (8002c60 <MX_USART6_UART_Init+0x4c>)
 8002c4c:	f001 fb68 	bl	8004320 <HAL_UART_Init>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002c56:	f7ff fda3 	bl	80027a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	200003e0 	.word	0x200003e0
 8002c64:	40011400 	.word	0x40011400

08002c68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b094      	sub	sp, #80	; 0x50
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c70:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	605a      	str	r2, [r3, #4]
 8002c7a:	609a      	str	r2, [r3, #8]
 8002c7c:	60da      	str	r2, [r3, #12]
 8002c7e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4aa0      	ldr	r2, [pc, #640]	; (8002f08 <HAL_UART_MspInit+0x2a0>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d12c      	bne.n	8002ce4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c8e:	4b9f      	ldr	r3, [pc, #636]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	4a9e      	ldr	r2, [pc, #632]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002c94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002c98:	6413      	str	r3, [r2, #64]	; 0x40
 8002c9a:	4b9c      	ldr	r3, [pc, #624]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ca2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8002caa:	4b98      	ldr	r3, [pc, #608]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	4a97      	ldr	r2, [pc, #604]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002cb0:	f043 0301 	orr.w	r3, r3, #1
 8002cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb6:	4b95      	ldr	r3, [pc, #596]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	637b      	str	r3, [r7, #52]	; 0x34
 8002cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002cd2:	2308      	movs	r3, #8
 8002cd4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002cda:	4619      	mov	r1, r3
 8002cdc:	488c      	ldr	r0, [pc, #560]	; (8002f10 <HAL_UART_MspInit+0x2a8>)
 8002cde:	f000 fb89 	bl	80033f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002ce2:	e10c      	b.n	8002efe <HAL_UART_MspInit+0x296>
  else if(uartHandle->Instance==USART1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a8a      	ldr	r2, [pc, #552]	; (8002f14 <HAL_UART_MspInit+0x2ac>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d153      	bne.n	8002d96 <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	633b      	str	r3, [r7, #48]	; 0x30
 8002cf2:	4b86      	ldr	r3, [pc, #536]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf6:	4a85      	ldr	r2, [pc, #532]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002cf8:	f043 0310 	orr.w	r3, r3, #16
 8002cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8002cfe:	4b83      	ldr	r3, [pc, #524]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d02:	f003 0310 	and.w	r3, r3, #16
 8002d06:	633b      	str	r3, [r7, #48]	; 0x30
 8002d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d0e:	4b7f      	ldr	r3, [pc, #508]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	4a7e      	ldr	r2, [pc, #504]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	6313      	str	r3, [r2, #48]	; 0x30
 8002d1a:	4b7c      	ldr	r3, [pc, #496]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d26:	2300      	movs	r3, #0
 8002d28:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d2a:	4b78      	ldr	r3, [pc, #480]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	4a77      	ldr	r2, [pc, #476]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002d30:	f043 0302 	orr.w	r3, r3, #2
 8002d34:	6313      	str	r3, [r2, #48]	; 0x30
 8002d36:	4b75      	ldr	r3, [pc, #468]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d46:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d48:	2302      	movs	r3, #2
 8002d4a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d50:	2303      	movs	r3, #3
 8002d52:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d54:	2307      	movs	r3, #7
 8002d56:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d58:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	486c      	ldr	r0, [pc, #432]	; (8002f10 <HAL_UART_MspInit+0x2a8>)
 8002d60:	f000 fb48 	bl	80033f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d64:	2340      	movs	r3, #64	; 0x40
 8002d66:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d68:	2302      	movs	r3, #2
 8002d6a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d70:	2303      	movs	r3, #3
 8002d72:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d74:	2307      	movs	r3, #7
 8002d76:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d78:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4866      	ldr	r0, [pc, #408]	; (8002f18 <HAL_UART_MspInit+0x2b0>)
 8002d80:	f000 fb38 	bl	80033f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002d84:	2200      	movs	r2, #0
 8002d86:	2100      	movs	r1, #0
 8002d88:	2025      	movs	r0, #37	; 0x25
 8002d8a:	f000 fa6a 	bl	8003262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d8e:	2025      	movs	r0, #37	; 0x25
 8002d90:	f000 fa83 	bl	800329a <HAL_NVIC_EnableIRQ>
}
 8002d94:	e0b3      	b.n	8002efe <HAL_UART_MspInit+0x296>
  else if(uartHandle->Instance==USART2)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a60      	ldr	r2, [pc, #384]	; (8002f1c <HAL_UART_MspInit+0x2b4>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d12c      	bne.n	8002dfa <HAL_UART_MspInit+0x192>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002da0:	2300      	movs	r3, #0
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24
 8002da4:	4b59      	ldr	r3, [pc, #356]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da8:	4a58      	ldr	r2, [pc, #352]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002daa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dae:	6413      	str	r3, [r2, #64]	; 0x40
 8002db0:	4b56      	ldr	r3, [pc, #344]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	623b      	str	r3, [r7, #32]
 8002dc0:	4b52      	ldr	r3, [pc, #328]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc4:	4a51      	ldr	r2, [pc, #324]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002dc6:	f043 0301 	orr.w	r3, r3, #1
 8002dca:	6313      	str	r3, [r2, #48]	; 0x30
 8002dcc:	4b4f      	ldr	r3, [pc, #316]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	623b      	str	r3, [r7, #32]
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002dd8:	230c      	movs	r3, #12
 8002dda:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ddc:	2302      	movs	r3, #2
 8002dde:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de0:	2300      	movs	r3, #0
 8002de2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de4:	2303      	movs	r3, #3
 8002de6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002de8:	2307      	movs	r3, #7
 8002dea:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002df0:	4619      	mov	r1, r3
 8002df2:	4847      	ldr	r0, [pc, #284]	; (8002f10 <HAL_UART_MspInit+0x2a8>)
 8002df4:	f000 fafe 	bl	80033f4 <HAL_GPIO_Init>
}
 8002df8:	e081      	b.n	8002efe <HAL_UART_MspInit+0x296>
  else if(uartHandle->Instance==USART3)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a48      	ldr	r2, [pc, #288]	; (8002f20 <HAL_UART_MspInit+0x2b8>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d14b      	bne.n	8002e9c <HAL_UART_MspInit+0x234>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e04:	2300      	movs	r3, #0
 8002e06:	61fb      	str	r3, [r7, #28]
 8002e08:	4b40      	ldr	r3, [pc, #256]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	4a3f      	ldr	r2, [pc, #252]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002e0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e12:	6413      	str	r3, [r2, #64]	; 0x40
 8002e14:	4b3d      	ldr	r3, [pc, #244]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e1c:	61fb      	str	r3, [r7, #28]
 8002e1e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e20:	2300      	movs	r3, #0
 8002e22:	61bb      	str	r3, [r7, #24]
 8002e24:	4b39      	ldr	r3, [pc, #228]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e28:	4a38      	ldr	r2, [pc, #224]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002e2a:	f043 0304 	orr.w	r3, r3, #4
 8002e2e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e30:	4b36      	ldr	r3, [pc, #216]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	61bb      	str	r3, [r7, #24]
 8002e3a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	4b32      	ldr	r3, [pc, #200]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e44:	4a31      	ldr	r2, [pc, #196]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002e46:	f043 0302 	orr.w	r3, r3, #2
 8002e4a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4c:	4b2f      	ldr	r3, [pc, #188]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	617b      	str	r3, [r7, #20]
 8002e56:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002e58:	2320      	movs	r3, #32
 8002e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e60:	2300      	movs	r3, #0
 8002e62:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e64:	2303      	movs	r3, #3
 8002e66:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e68:	2307      	movs	r3, #7
 8002e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e6c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e70:	4619      	mov	r1, r3
 8002e72:	482c      	ldr	r0, [pc, #176]	; (8002f24 <HAL_UART_MspInit+0x2bc>)
 8002e74:	f000 fabe 	bl	80033f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e82:	2300      	movs	r3, #0
 8002e84:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e86:	2303      	movs	r3, #3
 8002e88:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e8a:	2307      	movs	r3, #7
 8002e8c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e8e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e92:	4619      	mov	r1, r3
 8002e94:	4820      	ldr	r0, [pc, #128]	; (8002f18 <HAL_UART_MspInit+0x2b0>)
 8002e96:	f000 faad 	bl	80033f4 <HAL_GPIO_Init>
}
 8002e9a:	e030      	b.n	8002efe <HAL_UART_MspInit+0x296>
  else if(uartHandle->Instance==USART6)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a21      	ldr	r2, [pc, #132]	; (8002f28 <HAL_UART_MspInit+0x2c0>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d12b      	bne.n	8002efe <HAL_UART_MspInit+0x296>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	4b18      	ldr	r3, [pc, #96]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eae:	4a17      	ldr	r2, [pc, #92]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002eb0:	f043 0320 	orr.w	r3, r3, #32
 8002eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002eb6:	4b15      	ldr	r3, [pc, #84]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eba:	f003 0320 	and.w	r3, r3, #32
 8002ebe:	613b      	str	r3, [r7, #16]
 8002ec0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	4b11      	ldr	r3, [pc, #68]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	4a10      	ldr	r2, [pc, #64]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002ecc:	f043 0304 	orr.w	r3, r3, #4
 8002ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ed2:	4b0e      	ldr	r3, [pc, #56]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	f003 0304 	and.w	r3, r3, #4
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ede:	23c0      	movs	r3, #192	; 0xc0
 8002ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eea:	2303      	movs	r3, #3
 8002eec:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002eee:	2308      	movs	r3, #8
 8002ef0:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ef2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	480a      	ldr	r0, [pc, #40]	; (8002f24 <HAL_UART_MspInit+0x2bc>)
 8002efa:	f000 fa7b 	bl	80033f4 <HAL_GPIO_Init>
}
 8002efe:	bf00      	nop
 8002f00:	3750      	adds	r7, #80	; 0x50
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40004c00 	.word	0x40004c00
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	40020000 	.word	0x40020000
 8002f14:	40011000 	.word	0x40011000
 8002f18:	40020400 	.word	0x40020400
 8002f1c:	40004400 	.word	0x40004400
 8002f20:	40004800 	.word	0x40004800
 8002f24:	40020800 	.word	0x40020800
 8002f28:	40011400 	.word	0x40011400

08002f2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f30:	480d      	ldr	r0, [pc, #52]	; (8002f68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f32:	490e      	ldr	r1, [pc, #56]	; (8002f6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f34:	4a0e      	ldr	r2, [pc, #56]	; (8002f70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f38:	e002      	b.n	8002f40 <LoopCopyDataInit>

08002f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f3e:	3304      	adds	r3, #4

08002f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f44:	d3f9      	bcc.n	8002f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f46:	4a0b      	ldr	r2, [pc, #44]	; (8002f74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f48:	4c0b      	ldr	r4, [pc, #44]	; (8002f78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f4c:	e001      	b.n	8002f52 <LoopFillZerobss>

08002f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f50:	3204      	adds	r2, #4

08002f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f54:	d3fb      	bcc.n	8002f4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f56:	f7ff fda3 	bl	8002aa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f5a:	f002 fb01 	bl	8005560 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f5e:	f7fe f98b 	bl	8001278 <main>
  bx  lr    
 8002f62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f6c:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8002f70:	080094b4 	.word	0x080094b4
  ldr r2, =_sbss
 8002f74:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8002f78:	20000438 	.word	0x20000438

08002f7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f7c:	e7fe      	b.n	8002f7c <ADC_IRQHandler>
	...

08002f80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f84:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <HAL_Init+0x40>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a0d      	ldr	r2, [pc, #52]	; (8002fc0 <HAL_Init+0x40>)
 8002f8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f90:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <HAL_Init+0x40>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a0a      	ldr	r2, [pc, #40]	; (8002fc0 <HAL_Init+0x40>)
 8002f96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f9c:	4b08      	ldr	r3, [pc, #32]	; (8002fc0 <HAL_Init+0x40>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a07      	ldr	r2, [pc, #28]	; (8002fc0 <HAL_Init+0x40>)
 8002fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fa8:	2003      	movs	r0, #3
 8002faa:	f000 f94f 	bl	800324c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fae:	2000      	movs	r0, #0
 8002fb0:	f000 f808 	bl	8002fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fb4:	f7ff fc6e 	bl	8002894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40023c00 	.word	0x40023c00

08002fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fcc:	4b12      	ldr	r3, [pc, #72]	; (8003018 <HAL_InitTick+0x54>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	4b12      	ldr	r3, [pc, #72]	; (800301c <HAL_InitTick+0x58>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 f967 	bl	80032b6 <HAL_SYSTICK_Config>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e00e      	b.n	8003010 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b0f      	cmp	r3, #15
 8002ff6:	d80a      	bhi.n	800300e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8003000:	f000 f92f 	bl	8003262 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003004:	4a06      	ldr	r2, [pc, #24]	; (8003020 <HAL_InitTick+0x5c>)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800300a:	2300      	movs	r3, #0
 800300c:	e000      	b.n	8003010 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
}
 8003010:	4618      	mov	r0, r3
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	20000030 	.word	0x20000030
 800301c:	20000038 	.word	0x20000038
 8003020:	20000034 	.word	0x20000034

08003024 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003028:	4b06      	ldr	r3, [pc, #24]	; (8003044 <HAL_IncTick+0x20>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	461a      	mov	r2, r3
 800302e:	4b06      	ldr	r3, [pc, #24]	; (8003048 <HAL_IncTick+0x24>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4413      	add	r3, r2
 8003034:	4a04      	ldr	r2, [pc, #16]	; (8003048 <HAL_IncTick+0x24>)
 8003036:	6013      	str	r3, [r2, #0]
}
 8003038:	bf00      	nop
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	20000038 	.word	0x20000038
 8003048:	20000424 	.word	0x20000424

0800304c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  return uwTick;
 8003050:	4b03      	ldr	r3, [pc, #12]	; (8003060 <HAL_GetTick+0x14>)
 8003052:	681b      	ldr	r3, [r3, #0]
}
 8003054:	4618      	mov	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	20000424 	.word	0x20000424

08003064 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800306c:	f7ff ffee 	bl	800304c <HAL_GetTick>
 8003070:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307c:	d005      	beq.n	800308a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800307e:	4b0a      	ldr	r3, [pc, #40]	; (80030a8 <HAL_Delay+0x44>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	461a      	mov	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	4413      	add	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800308a:	bf00      	nop
 800308c:	f7ff ffde 	bl	800304c <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	429a      	cmp	r2, r3
 800309a:	d8f7      	bhi.n	800308c <HAL_Delay+0x28>
  {
  }
}
 800309c:	bf00      	nop
 800309e:	bf00      	nop
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	20000038 	.word	0x20000038

080030ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030bc:	4b0c      	ldr	r3, [pc, #48]	; (80030f0 <__NVIC_SetPriorityGrouping+0x44>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030c8:	4013      	ands	r3, r2
 80030ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030de:	4a04      	ldr	r2, [pc, #16]	; (80030f0 <__NVIC_SetPriorityGrouping+0x44>)
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	60d3      	str	r3, [r2, #12]
}
 80030e4:	bf00      	nop
 80030e6:	3714      	adds	r7, #20
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	e000ed00 	.word	0xe000ed00

080030f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030f8:	4b04      	ldr	r3, [pc, #16]	; (800310c <__NVIC_GetPriorityGrouping+0x18>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	0a1b      	lsrs	r3, r3, #8
 80030fe:	f003 0307 	and.w	r3, r3, #7
}
 8003102:	4618      	mov	r0, r3
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	e000ed00 	.word	0xe000ed00

08003110 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800311a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311e:	2b00      	cmp	r3, #0
 8003120:	db0b      	blt.n	800313a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003122:	79fb      	ldrb	r3, [r7, #7]
 8003124:	f003 021f 	and.w	r2, r3, #31
 8003128:	4907      	ldr	r1, [pc, #28]	; (8003148 <__NVIC_EnableIRQ+0x38>)
 800312a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312e:	095b      	lsrs	r3, r3, #5
 8003130:	2001      	movs	r0, #1
 8003132:	fa00 f202 	lsl.w	r2, r0, r2
 8003136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	e000e100 	.word	0xe000e100

0800314c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	4603      	mov	r3, r0
 8003154:	6039      	str	r1, [r7, #0]
 8003156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315c:	2b00      	cmp	r3, #0
 800315e:	db0a      	blt.n	8003176 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	b2da      	uxtb	r2, r3
 8003164:	490c      	ldr	r1, [pc, #48]	; (8003198 <__NVIC_SetPriority+0x4c>)
 8003166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316a:	0112      	lsls	r2, r2, #4
 800316c:	b2d2      	uxtb	r2, r2
 800316e:	440b      	add	r3, r1
 8003170:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003174:	e00a      	b.n	800318c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	b2da      	uxtb	r2, r3
 800317a:	4908      	ldr	r1, [pc, #32]	; (800319c <__NVIC_SetPriority+0x50>)
 800317c:	79fb      	ldrb	r3, [r7, #7]
 800317e:	f003 030f 	and.w	r3, r3, #15
 8003182:	3b04      	subs	r3, #4
 8003184:	0112      	lsls	r2, r2, #4
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	440b      	add	r3, r1
 800318a:	761a      	strb	r2, [r3, #24]
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr
 8003198:	e000e100 	.word	0xe000e100
 800319c:	e000ed00 	.word	0xe000ed00

080031a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b089      	sub	sp, #36	; 0x24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	f1c3 0307 	rsb	r3, r3, #7
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	bf28      	it	cs
 80031be:	2304      	movcs	r3, #4
 80031c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	3304      	adds	r3, #4
 80031c6:	2b06      	cmp	r3, #6
 80031c8:	d902      	bls.n	80031d0 <NVIC_EncodePriority+0x30>
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	3b03      	subs	r3, #3
 80031ce:	e000      	b.n	80031d2 <NVIC_EncodePriority+0x32>
 80031d0:	2300      	movs	r3, #0
 80031d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d4:	f04f 32ff 	mov.w	r2, #4294967295
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	43da      	mvns	r2, r3
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	401a      	ands	r2, r3
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031e8:	f04f 31ff 	mov.w	r1, #4294967295
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	fa01 f303 	lsl.w	r3, r1, r3
 80031f2:	43d9      	mvns	r1, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f8:	4313      	orrs	r3, r2
         );
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3724      	adds	r7, #36	; 0x24
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
	...

08003208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3b01      	subs	r3, #1
 8003214:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003218:	d301      	bcc.n	800321e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800321a:	2301      	movs	r3, #1
 800321c:	e00f      	b.n	800323e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800321e:	4a0a      	ldr	r2, [pc, #40]	; (8003248 <SysTick_Config+0x40>)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3b01      	subs	r3, #1
 8003224:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003226:	210f      	movs	r1, #15
 8003228:	f04f 30ff 	mov.w	r0, #4294967295
 800322c:	f7ff ff8e 	bl	800314c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003230:	4b05      	ldr	r3, [pc, #20]	; (8003248 <SysTick_Config+0x40>)
 8003232:	2200      	movs	r2, #0
 8003234:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003236:	4b04      	ldr	r3, [pc, #16]	; (8003248 <SysTick_Config+0x40>)
 8003238:	2207      	movs	r2, #7
 800323a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	e000e010 	.word	0xe000e010

0800324c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7ff ff29 	bl	80030ac <__NVIC_SetPriorityGrouping>
}
 800325a:	bf00      	nop
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003262:	b580      	push	{r7, lr}
 8003264:	b086      	sub	sp, #24
 8003266:	af00      	add	r7, sp, #0
 8003268:	4603      	mov	r3, r0
 800326a:	60b9      	str	r1, [r7, #8]
 800326c:	607a      	str	r2, [r7, #4]
 800326e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003270:	2300      	movs	r3, #0
 8003272:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003274:	f7ff ff3e 	bl	80030f4 <__NVIC_GetPriorityGrouping>
 8003278:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	68b9      	ldr	r1, [r7, #8]
 800327e:	6978      	ldr	r0, [r7, #20]
 8003280:	f7ff ff8e 	bl	80031a0 <NVIC_EncodePriority>
 8003284:	4602      	mov	r2, r0
 8003286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800328a:	4611      	mov	r1, r2
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff ff5d 	bl	800314c <__NVIC_SetPriority>
}
 8003292:	bf00      	nop
 8003294:	3718      	adds	r7, #24
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b082      	sub	sp, #8
 800329e:	af00      	add	r7, sp, #0
 80032a0:	4603      	mov	r3, r0
 80032a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff ff31 	bl	8003110 <__NVIC_EnableIRQ>
}
 80032ae:	bf00      	nop
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b082      	sub	sp, #8
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7ff ffa2 	bl	8003208 <SysTick_Config>
 80032c4:	4603      	mov	r3, r0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b084      	sub	sp, #16
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032da:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80032dc:	f7ff feb6 	bl	800304c <HAL_GetTick>
 80032e0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d008      	beq.n	8003300 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2280      	movs	r2, #128	; 0x80
 80032f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e052      	b.n	80033a6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 0216 	bic.w	r2, r2, #22
 800330e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	695a      	ldr	r2, [r3, #20]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800331e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	2b00      	cmp	r3, #0
 8003326:	d103      	bne.n	8003330 <HAL_DMA_Abort+0x62>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800332c:	2b00      	cmp	r3, #0
 800332e:	d007      	beq.n	8003340 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0208 	bic.w	r2, r2, #8
 800333e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0201 	bic.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003350:	e013      	b.n	800337a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003352:	f7ff fe7b 	bl	800304c <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b05      	cmp	r3, #5
 800335e:	d90c      	bls.n	800337a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2220      	movs	r2, #32
 8003364:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2203      	movs	r2, #3
 800336a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e015      	b.n	80033a6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1e4      	bne.n	8003352 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338c:	223f      	movs	r2, #63	; 0x3f
 800338e:	409a      	lsls	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b083      	sub	sp, #12
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d004      	beq.n	80033cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2280      	movs	r2, #128	; 0x80
 80033c6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e00c      	b.n	80033e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2205      	movs	r2, #5
 80033d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 0201 	bic.w	r2, r2, #1
 80033e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
	...

080033f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b089      	sub	sp, #36	; 0x24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033fe:	2300      	movs	r3, #0
 8003400:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003402:	2300      	movs	r3, #0
 8003404:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003406:	2300      	movs	r3, #0
 8003408:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800340a:	2300      	movs	r3, #0
 800340c:	61fb      	str	r3, [r7, #28]
 800340e:	e165      	b.n	80036dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003410:	2201      	movs	r2, #1
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	4013      	ands	r3, r2
 8003422:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	429a      	cmp	r2, r3
 800342a:	f040 8154 	bne.w	80036d6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f003 0303 	and.w	r3, r3, #3
 8003436:	2b01      	cmp	r3, #1
 8003438:	d005      	beq.n	8003446 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003442:	2b02      	cmp	r3, #2
 8003444:	d130      	bne.n	80034a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	2203      	movs	r2, #3
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43db      	mvns	r3, r3
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	4013      	ands	r3, r2
 800345c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	68da      	ldr	r2, [r3, #12]
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	4313      	orrs	r3, r2
 800346e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800347c:	2201      	movs	r2, #1
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	43db      	mvns	r3, r3
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	4013      	ands	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	091b      	lsrs	r3, r3, #4
 8003492:	f003 0201 	and.w	r2, r3, #1
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4313      	orrs	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f003 0303 	and.w	r3, r3, #3
 80034b0:	2b03      	cmp	r3, #3
 80034b2:	d017      	beq.n	80034e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	2203      	movs	r2, #3
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	43db      	mvns	r3, r3
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4013      	ands	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	4313      	orrs	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 0303 	and.w	r3, r3, #3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d123      	bne.n	8003538 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	08da      	lsrs	r2, r3, #3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3208      	adds	r2, #8
 80034f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	220f      	movs	r2, #15
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	43db      	mvns	r3, r3
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	4013      	ands	r3, r2
 8003512:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	691a      	ldr	r2, [r3, #16]
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	fa02 f303 	lsl.w	r3, r2, r3
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	4313      	orrs	r3, r2
 8003528:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	08da      	lsrs	r2, r3, #3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	3208      	adds	r2, #8
 8003532:	69b9      	ldr	r1, [r7, #24]
 8003534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	2203      	movs	r2, #3
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	43db      	mvns	r3, r3
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	4013      	ands	r3, r2
 800354e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 0203 	and.w	r2, r3, #3
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	4313      	orrs	r3, r2
 8003564:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 80ae 	beq.w	80036d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800357a:	2300      	movs	r3, #0
 800357c:	60fb      	str	r3, [r7, #12]
 800357e:	4b5d      	ldr	r3, [pc, #372]	; (80036f4 <HAL_GPIO_Init+0x300>)
 8003580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003582:	4a5c      	ldr	r2, [pc, #368]	; (80036f4 <HAL_GPIO_Init+0x300>)
 8003584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003588:	6453      	str	r3, [r2, #68]	; 0x44
 800358a:	4b5a      	ldr	r3, [pc, #360]	; (80036f4 <HAL_GPIO_Init+0x300>)
 800358c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003592:	60fb      	str	r3, [r7, #12]
 8003594:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003596:	4a58      	ldr	r2, [pc, #352]	; (80036f8 <HAL_GPIO_Init+0x304>)
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	089b      	lsrs	r3, r3, #2
 800359c:	3302      	adds	r3, #2
 800359e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	f003 0303 	and.w	r3, r3, #3
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	220f      	movs	r2, #15
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	43db      	mvns	r3, r3
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	4013      	ands	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a4f      	ldr	r2, [pc, #316]	; (80036fc <HAL_GPIO_Init+0x308>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d025      	beq.n	800360e <HAL_GPIO_Init+0x21a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a4e      	ldr	r2, [pc, #312]	; (8003700 <HAL_GPIO_Init+0x30c>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d01f      	beq.n	800360a <HAL_GPIO_Init+0x216>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a4d      	ldr	r2, [pc, #308]	; (8003704 <HAL_GPIO_Init+0x310>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d019      	beq.n	8003606 <HAL_GPIO_Init+0x212>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a4c      	ldr	r2, [pc, #304]	; (8003708 <HAL_GPIO_Init+0x314>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d013      	beq.n	8003602 <HAL_GPIO_Init+0x20e>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a4b      	ldr	r2, [pc, #300]	; (800370c <HAL_GPIO_Init+0x318>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d00d      	beq.n	80035fe <HAL_GPIO_Init+0x20a>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a4a      	ldr	r2, [pc, #296]	; (8003710 <HAL_GPIO_Init+0x31c>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d007      	beq.n	80035fa <HAL_GPIO_Init+0x206>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a49      	ldr	r2, [pc, #292]	; (8003714 <HAL_GPIO_Init+0x320>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d101      	bne.n	80035f6 <HAL_GPIO_Init+0x202>
 80035f2:	2306      	movs	r3, #6
 80035f4:	e00c      	b.n	8003610 <HAL_GPIO_Init+0x21c>
 80035f6:	2307      	movs	r3, #7
 80035f8:	e00a      	b.n	8003610 <HAL_GPIO_Init+0x21c>
 80035fa:	2305      	movs	r3, #5
 80035fc:	e008      	b.n	8003610 <HAL_GPIO_Init+0x21c>
 80035fe:	2304      	movs	r3, #4
 8003600:	e006      	b.n	8003610 <HAL_GPIO_Init+0x21c>
 8003602:	2303      	movs	r3, #3
 8003604:	e004      	b.n	8003610 <HAL_GPIO_Init+0x21c>
 8003606:	2302      	movs	r3, #2
 8003608:	e002      	b.n	8003610 <HAL_GPIO_Init+0x21c>
 800360a:	2301      	movs	r3, #1
 800360c:	e000      	b.n	8003610 <HAL_GPIO_Init+0x21c>
 800360e:	2300      	movs	r3, #0
 8003610:	69fa      	ldr	r2, [r7, #28]
 8003612:	f002 0203 	and.w	r2, r2, #3
 8003616:	0092      	lsls	r2, r2, #2
 8003618:	4093      	lsls	r3, r2
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	4313      	orrs	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003620:	4935      	ldr	r1, [pc, #212]	; (80036f8 <HAL_GPIO_Init+0x304>)
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	089b      	lsrs	r3, r3, #2
 8003626:	3302      	adds	r3, #2
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800362e:	4b3a      	ldr	r3, [pc, #232]	; (8003718 <HAL_GPIO_Init+0x324>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	43db      	mvns	r3, r3
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	4013      	ands	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	4313      	orrs	r3, r2
 8003650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003652:	4a31      	ldr	r2, [pc, #196]	; (8003718 <HAL_GPIO_Init+0x324>)
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003658:	4b2f      	ldr	r3, [pc, #188]	; (8003718 <HAL_GPIO_Init+0x324>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	43db      	mvns	r3, r3
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	4013      	ands	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	4313      	orrs	r3, r2
 800367a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800367c:	4a26      	ldr	r2, [pc, #152]	; (8003718 <HAL_GPIO_Init+0x324>)
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003682:	4b25      	ldr	r3, [pc, #148]	; (8003718 <HAL_GPIO_Init+0x324>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	43db      	mvns	r3, r3
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	4013      	ands	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036a6:	4a1c      	ldr	r2, [pc, #112]	; (8003718 <HAL_GPIO_Init+0x324>)
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036ac:	4b1a      	ldr	r3, [pc, #104]	; (8003718 <HAL_GPIO_Init+0x324>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	43db      	mvns	r3, r3
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4013      	ands	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036d0:	4a11      	ldr	r2, [pc, #68]	; (8003718 <HAL_GPIO_Init+0x324>)
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	3301      	adds	r3, #1
 80036da:	61fb      	str	r3, [r7, #28]
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	2b0f      	cmp	r3, #15
 80036e0:	f67f ae96 	bls.w	8003410 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036e4:	bf00      	nop
 80036e6:	bf00      	nop
 80036e8:	3724      	adds	r7, #36	; 0x24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	40023800 	.word	0x40023800
 80036f8:	40013800 	.word	0x40013800
 80036fc:	40020000 	.word	0x40020000
 8003700:	40020400 	.word	0x40020400
 8003704:	40020800 	.word	0x40020800
 8003708:	40020c00 	.word	0x40020c00
 800370c:	40021000 	.word	0x40021000
 8003710:	40021400 	.word	0x40021400
 8003714:	40021800 	.word	0x40021800
 8003718:	40013c00 	.word	0x40013c00

0800371c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	460b      	mov	r3, r1
 8003726:	807b      	strh	r3, [r7, #2]
 8003728:	4613      	mov	r3, r2
 800372a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800372c:	787b      	ldrb	r3, [r7, #1]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003732:	887a      	ldrh	r2, [r7, #2]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003738:	e003      	b.n	8003742 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800373a:	887b      	ldrh	r3, [r7, #2]
 800373c:	041a      	lsls	r2, r3, #16
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	619a      	str	r2, [r3, #24]
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
	...

08003750 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e0cc      	b.n	80038fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003764:	4b68      	ldr	r3, [pc, #416]	; (8003908 <HAL_RCC_ClockConfig+0x1b8>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 030f 	and.w	r3, r3, #15
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	d90c      	bls.n	800378c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003772:	4b65      	ldr	r3, [pc, #404]	; (8003908 <HAL_RCC_ClockConfig+0x1b8>)
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	b2d2      	uxtb	r2, r2
 8003778:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800377a:	4b63      	ldr	r3, [pc, #396]	; (8003908 <HAL_RCC_ClockConfig+0x1b8>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 030f 	and.w	r3, r3, #15
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	429a      	cmp	r2, r3
 8003786:	d001      	beq.n	800378c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e0b8      	b.n	80038fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d020      	beq.n	80037da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d005      	beq.n	80037b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037a4:	4b59      	ldr	r3, [pc, #356]	; (800390c <HAL_RCC_ClockConfig+0x1bc>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	4a58      	ldr	r2, [pc, #352]	; (800390c <HAL_RCC_ClockConfig+0x1bc>)
 80037aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0308 	and.w	r3, r3, #8
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d005      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037bc:	4b53      	ldr	r3, [pc, #332]	; (800390c <HAL_RCC_ClockConfig+0x1bc>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	4a52      	ldr	r2, [pc, #328]	; (800390c <HAL_RCC_ClockConfig+0x1bc>)
 80037c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037c8:	4b50      	ldr	r3, [pc, #320]	; (800390c <HAL_RCC_ClockConfig+0x1bc>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	494d      	ldr	r1, [pc, #308]	; (800390c <HAL_RCC_ClockConfig+0x1bc>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d044      	beq.n	8003870 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d107      	bne.n	80037fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ee:	4b47      	ldr	r3, [pc, #284]	; (800390c <HAL_RCC_ClockConfig+0x1bc>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d119      	bne.n	800382e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e07f      	b.n	80038fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	2b02      	cmp	r3, #2
 8003804:	d003      	beq.n	800380e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800380a:	2b03      	cmp	r3, #3
 800380c:	d107      	bne.n	800381e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800380e:	4b3f      	ldr	r3, [pc, #252]	; (800390c <HAL_RCC_ClockConfig+0x1bc>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d109      	bne.n	800382e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e06f      	b.n	80038fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800381e:	4b3b      	ldr	r3, [pc, #236]	; (800390c <HAL_RCC_ClockConfig+0x1bc>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e067      	b.n	80038fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800382e:	4b37      	ldr	r3, [pc, #220]	; (800390c <HAL_RCC_ClockConfig+0x1bc>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f023 0203 	bic.w	r2, r3, #3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	4934      	ldr	r1, [pc, #208]	; (800390c <HAL_RCC_ClockConfig+0x1bc>)
 800383c:	4313      	orrs	r3, r2
 800383e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003840:	f7ff fc04 	bl	800304c <HAL_GetTick>
 8003844:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003846:	e00a      	b.n	800385e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003848:	f7ff fc00 	bl	800304c <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	f241 3288 	movw	r2, #5000	; 0x1388
 8003856:	4293      	cmp	r3, r2
 8003858:	d901      	bls.n	800385e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e04f      	b.n	80038fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800385e:	4b2b      	ldr	r3, [pc, #172]	; (800390c <HAL_RCC_ClockConfig+0x1bc>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 020c 	and.w	r2, r3, #12
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	429a      	cmp	r2, r3
 800386e:	d1eb      	bne.n	8003848 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003870:	4b25      	ldr	r3, [pc, #148]	; (8003908 <HAL_RCC_ClockConfig+0x1b8>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 030f 	and.w	r3, r3, #15
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	429a      	cmp	r2, r3
 800387c:	d20c      	bcs.n	8003898 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800387e:	4b22      	ldr	r3, [pc, #136]	; (8003908 <HAL_RCC_ClockConfig+0x1b8>)
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003886:	4b20      	ldr	r3, [pc, #128]	; (8003908 <HAL_RCC_ClockConfig+0x1b8>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	429a      	cmp	r2, r3
 8003892:	d001      	beq.n	8003898 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e032      	b.n	80038fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0304 	and.w	r3, r3, #4
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d008      	beq.n	80038b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038a4:	4b19      	ldr	r3, [pc, #100]	; (800390c <HAL_RCC_ClockConfig+0x1bc>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	4916      	ldr	r1, [pc, #88]	; (800390c <HAL_RCC_ClockConfig+0x1bc>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0308 	and.w	r3, r3, #8
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d009      	beq.n	80038d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038c2:	4b12      	ldr	r3, [pc, #72]	; (800390c <HAL_RCC_ClockConfig+0x1bc>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	490e      	ldr	r1, [pc, #56]	; (800390c <HAL_RCC_ClockConfig+0x1bc>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038d6:	f000 f855 	bl	8003984 <HAL_RCC_GetSysClockFreq>
 80038da:	4602      	mov	r2, r0
 80038dc:	4b0b      	ldr	r3, [pc, #44]	; (800390c <HAL_RCC_ClockConfig+0x1bc>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	091b      	lsrs	r3, r3, #4
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	490a      	ldr	r1, [pc, #40]	; (8003910 <HAL_RCC_ClockConfig+0x1c0>)
 80038e8:	5ccb      	ldrb	r3, [r1, r3]
 80038ea:	fa22 f303 	lsr.w	r3, r2, r3
 80038ee:	4a09      	ldr	r2, [pc, #36]	; (8003914 <HAL_RCC_ClockConfig+0x1c4>)
 80038f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038f2:	4b09      	ldr	r3, [pc, #36]	; (8003918 <HAL_RCC_ClockConfig+0x1c8>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff fb64 	bl	8002fc4 <HAL_InitTick>

  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	40023c00 	.word	0x40023c00
 800390c:	40023800 	.word	0x40023800
 8003910:	08008ce0 	.word	0x08008ce0
 8003914:	20000030 	.word	0x20000030
 8003918:	20000034 	.word	0x20000034

0800391c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003920:	4b03      	ldr	r3, [pc, #12]	; (8003930 <HAL_RCC_GetHCLKFreq+0x14>)
 8003922:	681b      	ldr	r3, [r3, #0]
}
 8003924:	4618      	mov	r0, r3
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	20000030 	.word	0x20000030

08003934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003938:	f7ff fff0 	bl	800391c <HAL_RCC_GetHCLKFreq>
 800393c:	4602      	mov	r2, r0
 800393e:	4b05      	ldr	r3, [pc, #20]	; (8003954 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	0a9b      	lsrs	r3, r3, #10
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	4903      	ldr	r1, [pc, #12]	; (8003958 <HAL_RCC_GetPCLK1Freq+0x24>)
 800394a:	5ccb      	ldrb	r3, [r1, r3]
 800394c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003950:	4618      	mov	r0, r3
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40023800 	.word	0x40023800
 8003958:	08008cf0 	.word	0x08008cf0

0800395c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003960:	f7ff ffdc 	bl	800391c <HAL_RCC_GetHCLKFreq>
 8003964:	4602      	mov	r2, r0
 8003966:	4b05      	ldr	r3, [pc, #20]	; (800397c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	0b5b      	lsrs	r3, r3, #13
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	4903      	ldr	r1, [pc, #12]	; (8003980 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003972:	5ccb      	ldrb	r3, [r1, r3]
 8003974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003978:	4618      	mov	r0, r3
 800397a:	bd80      	pop	{r7, pc}
 800397c:	40023800 	.word	0x40023800
 8003980:	08008cf0 	.word	0x08008cf0

08003984 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003988:	b0ae      	sub	sp, #184	; 0xb8
 800398a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800398c:	2300      	movs	r3, #0
 800398e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003992:	2300      	movs	r3, #0
 8003994:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003998:	2300      	movs	r3, #0
 800399a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800399e:	2300      	movs	r3, #0
 80039a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80039a4:	2300      	movs	r3, #0
 80039a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039aa:	4bcb      	ldr	r3, [pc, #812]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x354>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 030c 	and.w	r3, r3, #12
 80039b2:	2b0c      	cmp	r3, #12
 80039b4:	f200 8206 	bhi.w	8003dc4 <HAL_RCC_GetSysClockFreq+0x440>
 80039b8:	a201      	add	r2, pc, #4	; (adr r2, 80039c0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80039ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039be:	bf00      	nop
 80039c0:	080039f5 	.word	0x080039f5
 80039c4:	08003dc5 	.word	0x08003dc5
 80039c8:	08003dc5 	.word	0x08003dc5
 80039cc:	08003dc5 	.word	0x08003dc5
 80039d0:	080039fd 	.word	0x080039fd
 80039d4:	08003dc5 	.word	0x08003dc5
 80039d8:	08003dc5 	.word	0x08003dc5
 80039dc:	08003dc5 	.word	0x08003dc5
 80039e0:	08003a05 	.word	0x08003a05
 80039e4:	08003dc5 	.word	0x08003dc5
 80039e8:	08003dc5 	.word	0x08003dc5
 80039ec:	08003dc5 	.word	0x08003dc5
 80039f0:	08003bf5 	.word	0x08003bf5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039f4:	4bb9      	ldr	r3, [pc, #740]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x358>)
 80039f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80039fa:	e1e7      	b.n	8003dcc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039fc:	4bb8      	ldr	r3, [pc, #736]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80039fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003a02:	e1e3      	b.n	8003dcc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a04:	4bb4      	ldr	r3, [pc, #720]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a10:	4bb1      	ldr	r3, [pc, #708]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d071      	beq.n	8003b00 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a1c:	4bae      	ldr	r3, [pc, #696]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	099b      	lsrs	r3, r3, #6
 8003a22:	2200      	movs	r2, #0
 8003a24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a28:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003a2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a38:	2300      	movs	r3, #0
 8003a3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003a3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a42:	4622      	mov	r2, r4
 8003a44:	462b      	mov	r3, r5
 8003a46:	f04f 0000 	mov.w	r0, #0
 8003a4a:	f04f 0100 	mov.w	r1, #0
 8003a4e:	0159      	lsls	r1, r3, #5
 8003a50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a54:	0150      	lsls	r0, r2, #5
 8003a56:	4602      	mov	r2, r0
 8003a58:	460b      	mov	r3, r1
 8003a5a:	4621      	mov	r1, r4
 8003a5c:	1a51      	subs	r1, r2, r1
 8003a5e:	6439      	str	r1, [r7, #64]	; 0x40
 8003a60:	4629      	mov	r1, r5
 8003a62:	eb63 0301 	sbc.w	r3, r3, r1
 8003a66:	647b      	str	r3, [r7, #68]	; 0x44
 8003a68:	f04f 0200 	mov.w	r2, #0
 8003a6c:	f04f 0300 	mov.w	r3, #0
 8003a70:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003a74:	4649      	mov	r1, r9
 8003a76:	018b      	lsls	r3, r1, #6
 8003a78:	4641      	mov	r1, r8
 8003a7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a7e:	4641      	mov	r1, r8
 8003a80:	018a      	lsls	r2, r1, #6
 8003a82:	4641      	mov	r1, r8
 8003a84:	1a51      	subs	r1, r2, r1
 8003a86:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a88:	4649      	mov	r1, r9
 8003a8a:	eb63 0301 	sbc.w	r3, r3, r1
 8003a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a90:	f04f 0200 	mov.w	r2, #0
 8003a94:	f04f 0300 	mov.w	r3, #0
 8003a98:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003a9c:	4649      	mov	r1, r9
 8003a9e:	00cb      	lsls	r3, r1, #3
 8003aa0:	4641      	mov	r1, r8
 8003aa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003aa6:	4641      	mov	r1, r8
 8003aa8:	00ca      	lsls	r2, r1, #3
 8003aaa:	4610      	mov	r0, r2
 8003aac:	4619      	mov	r1, r3
 8003aae:	4603      	mov	r3, r0
 8003ab0:	4622      	mov	r2, r4
 8003ab2:	189b      	adds	r3, r3, r2
 8003ab4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ab6:	462b      	mov	r3, r5
 8003ab8:	460a      	mov	r2, r1
 8003aba:	eb42 0303 	adc.w	r3, r2, r3
 8003abe:	637b      	str	r3, [r7, #52]	; 0x34
 8003ac0:	f04f 0200 	mov.w	r2, #0
 8003ac4:	f04f 0300 	mov.w	r3, #0
 8003ac8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003acc:	4629      	mov	r1, r5
 8003ace:	024b      	lsls	r3, r1, #9
 8003ad0:	4621      	mov	r1, r4
 8003ad2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ad6:	4621      	mov	r1, r4
 8003ad8:	024a      	lsls	r2, r1, #9
 8003ada:	4610      	mov	r0, r2
 8003adc:	4619      	mov	r1, r3
 8003ade:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ae8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003aec:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003af0:	f7fd f8ca 	bl	8000c88 <__aeabi_uldivmod>
 8003af4:	4602      	mov	r2, r0
 8003af6:	460b      	mov	r3, r1
 8003af8:	4613      	mov	r3, r2
 8003afa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003afe:	e067      	b.n	8003bd0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b00:	4b75      	ldr	r3, [pc, #468]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	099b      	lsrs	r3, r3, #6
 8003b06:	2200      	movs	r2, #0
 8003b08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b0c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003b10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b18:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003b1e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003b22:	4622      	mov	r2, r4
 8003b24:	462b      	mov	r3, r5
 8003b26:	f04f 0000 	mov.w	r0, #0
 8003b2a:	f04f 0100 	mov.w	r1, #0
 8003b2e:	0159      	lsls	r1, r3, #5
 8003b30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b34:	0150      	lsls	r0, r2, #5
 8003b36:	4602      	mov	r2, r0
 8003b38:	460b      	mov	r3, r1
 8003b3a:	4621      	mov	r1, r4
 8003b3c:	1a51      	subs	r1, r2, r1
 8003b3e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003b40:	4629      	mov	r1, r5
 8003b42:	eb63 0301 	sbc.w	r3, r3, r1
 8003b46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b48:	f04f 0200 	mov.w	r2, #0
 8003b4c:	f04f 0300 	mov.w	r3, #0
 8003b50:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003b54:	4649      	mov	r1, r9
 8003b56:	018b      	lsls	r3, r1, #6
 8003b58:	4641      	mov	r1, r8
 8003b5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b5e:	4641      	mov	r1, r8
 8003b60:	018a      	lsls	r2, r1, #6
 8003b62:	4641      	mov	r1, r8
 8003b64:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b68:	4649      	mov	r1, r9
 8003b6a:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b6e:	f04f 0200 	mov.w	r2, #0
 8003b72:	f04f 0300 	mov.w	r3, #0
 8003b76:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b7a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b82:	4692      	mov	sl, r2
 8003b84:	469b      	mov	fp, r3
 8003b86:	4623      	mov	r3, r4
 8003b88:	eb1a 0303 	adds.w	r3, sl, r3
 8003b8c:	623b      	str	r3, [r7, #32]
 8003b8e:	462b      	mov	r3, r5
 8003b90:	eb4b 0303 	adc.w	r3, fp, r3
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24
 8003b96:	f04f 0200 	mov.w	r2, #0
 8003b9a:	f04f 0300 	mov.w	r3, #0
 8003b9e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003ba2:	4629      	mov	r1, r5
 8003ba4:	028b      	lsls	r3, r1, #10
 8003ba6:	4621      	mov	r1, r4
 8003ba8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bac:	4621      	mov	r1, r4
 8003bae:	028a      	lsls	r2, r1, #10
 8003bb0:	4610      	mov	r0, r2
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003bb8:	2200      	movs	r2, #0
 8003bba:	673b      	str	r3, [r7, #112]	; 0x70
 8003bbc:	677a      	str	r2, [r7, #116]	; 0x74
 8003bbe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003bc2:	f7fd f861 	bl	8000c88 <__aeabi_uldivmod>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	460b      	mov	r3, r1
 8003bca:	4613      	mov	r3, r2
 8003bcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bd0:	4b41      	ldr	r3, [pc, #260]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	0c1b      	lsrs	r3, r3, #16
 8003bd6:	f003 0303 	and.w	r3, r3, #3
 8003bda:	3301      	adds	r3, #1
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003be2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003be6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003bf2:	e0eb      	b.n	8003dcc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bf4:	4b38      	ldr	r3, [pc, #224]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c00:	4b35      	ldr	r3, [pc, #212]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d06b      	beq.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c0c:	4b32      	ldr	r3, [pc, #200]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	099b      	lsrs	r3, r3, #6
 8003c12:	2200      	movs	r2, #0
 8003c14:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c1e:	663b      	str	r3, [r7, #96]	; 0x60
 8003c20:	2300      	movs	r3, #0
 8003c22:	667b      	str	r3, [r7, #100]	; 0x64
 8003c24:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003c28:	4622      	mov	r2, r4
 8003c2a:	462b      	mov	r3, r5
 8003c2c:	f04f 0000 	mov.w	r0, #0
 8003c30:	f04f 0100 	mov.w	r1, #0
 8003c34:	0159      	lsls	r1, r3, #5
 8003c36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c3a:	0150      	lsls	r0, r2, #5
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4621      	mov	r1, r4
 8003c42:	1a51      	subs	r1, r2, r1
 8003c44:	61b9      	str	r1, [r7, #24]
 8003c46:	4629      	mov	r1, r5
 8003c48:	eb63 0301 	sbc.w	r3, r3, r1
 8003c4c:	61fb      	str	r3, [r7, #28]
 8003c4e:	f04f 0200 	mov.w	r2, #0
 8003c52:	f04f 0300 	mov.w	r3, #0
 8003c56:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003c5a:	4659      	mov	r1, fp
 8003c5c:	018b      	lsls	r3, r1, #6
 8003c5e:	4651      	mov	r1, sl
 8003c60:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c64:	4651      	mov	r1, sl
 8003c66:	018a      	lsls	r2, r1, #6
 8003c68:	4651      	mov	r1, sl
 8003c6a:	ebb2 0801 	subs.w	r8, r2, r1
 8003c6e:	4659      	mov	r1, fp
 8003c70:	eb63 0901 	sbc.w	r9, r3, r1
 8003c74:	f04f 0200 	mov.w	r2, #0
 8003c78:	f04f 0300 	mov.w	r3, #0
 8003c7c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c80:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c84:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c88:	4690      	mov	r8, r2
 8003c8a:	4699      	mov	r9, r3
 8003c8c:	4623      	mov	r3, r4
 8003c8e:	eb18 0303 	adds.w	r3, r8, r3
 8003c92:	613b      	str	r3, [r7, #16]
 8003c94:	462b      	mov	r3, r5
 8003c96:	eb49 0303 	adc.w	r3, r9, r3
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003ca8:	4629      	mov	r1, r5
 8003caa:	024b      	lsls	r3, r1, #9
 8003cac:	4621      	mov	r1, r4
 8003cae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cb2:	4621      	mov	r1, r4
 8003cb4:	024a      	lsls	r2, r1, #9
 8003cb6:	4610      	mov	r0, r2
 8003cb8:	4619      	mov	r1, r3
 8003cba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	65bb      	str	r3, [r7, #88]	; 0x58
 8003cc2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003cc4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003cc8:	f7fc ffde 	bl	8000c88 <__aeabi_uldivmod>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	460b      	mov	r3, r1
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cd6:	e065      	b.n	8003da4 <HAL_RCC_GetSysClockFreq+0x420>
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	00f42400 	.word	0x00f42400
 8003ce0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ce4:	4b3d      	ldr	r3, [pc, #244]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x458>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	099b      	lsrs	r3, r3, #6
 8003cea:	2200      	movs	r2, #0
 8003cec:	4618      	mov	r0, r3
 8003cee:	4611      	mov	r1, r2
 8003cf0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cf4:	653b      	str	r3, [r7, #80]	; 0x50
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	657b      	str	r3, [r7, #84]	; 0x54
 8003cfa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003cfe:	4642      	mov	r2, r8
 8003d00:	464b      	mov	r3, r9
 8003d02:	f04f 0000 	mov.w	r0, #0
 8003d06:	f04f 0100 	mov.w	r1, #0
 8003d0a:	0159      	lsls	r1, r3, #5
 8003d0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d10:	0150      	lsls	r0, r2, #5
 8003d12:	4602      	mov	r2, r0
 8003d14:	460b      	mov	r3, r1
 8003d16:	4641      	mov	r1, r8
 8003d18:	1a51      	subs	r1, r2, r1
 8003d1a:	60b9      	str	r1, [r7, #8]
 8003d1c:	4649      	mov	r1, r9
 8003d1e:	eb63 0301 	sbc.w	r3, r3, r1
 8003d22:	60fb      	str	r3, [r7, #12]
 8003d24:	f04f 0200 	mov.w	r2, #0
 8003d28:	f04f 0300 	mov.w	r3, #0
 8003d2c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003d30:	4659      	mov	r1, fp
 8003d32:	018b      	lsls	r3, r1, #6
 8003d34:	4651      	mov	r1, sl
 8003d36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d3a:	4651      	mov	r1, sl
 8003d3c:	018a      	lsls	r2, r1, #6
 8003d3e:	4651      	mov	r1, sl
 8003d40:	1a54      	subs	r4, r2, r1
 8003d42:	4659      	mov	r1, fp
 8003d44:	eb63 0501 	sbc.w	r5, r3, r1
 8003d48:	f04f 0200 	mov.w	r2, #0
 8003d4c:	f04f 0300 	mov.w	r3, #0
 8003d50:	00eb      	lsls	r3, r5, #3
 8003d52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d56:	00e2      	lsls	r2, r4, #3
 8003d58:	4614      	mov	r4, r2
 8003d5a:	461d      	mov	r5, r3
 8003d5c:	4643      	mov	r3, r8
 8003d5e:	18e3      	adds	r3, r4, r3
 8003d60:	603b      	str	r3, [r7, #0]
 8003d62:	464b      	mov	r3, r9
 8003d64:	eb45 0303 	adc.w	r3, r5, r3
 8003d68:	607b      	str	r3, [r7, #4]
 8003d6a:	f04f 0200 	mov.w	r2, #0
 8003d6e:	f04f 0300 	mov.w	r3, #0
 8003d72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d76:	4629      	mov	r1, r5
 8003d78:	028b      	lsls	r3, r1, #10
 8003d7a:	4621      	mov	r1, r4
 8003d7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d80:	4621      	mov	r1, r4
 8003d82:	028a      	lsls	r2, r1, #10
 8003d84:	4610      	mov	r0, r2
 8003d86:	4619      	mov	r1, r3
 8003d88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d90:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003d92:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d96:	f7fc ff77 	bl	8000c88 <__aeabi_uldivmod>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	4613      	mov	r3, r2
 8003da0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003da4:	4b0d      	ldr	r3, [pc, #52]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x458>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	0f1b      	lsrs	r3, r3, #28
 8003daa:	f003 0307 	and.w	r3, r3, #7
 8003dae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003db2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003db6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003dc2:	e003      	b.n	8003dcc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dc4:	4b06      	ldr	r3, [pc, #24]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003dc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003dca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dcc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	37b8      	adds	r7, #184	; 0xb8
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dda:	bf00      	nop
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	00f42400 	.word	0x00f42400

08003de4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e28d      	b.n	8004312 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 8083 	beq.w	8003f0a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e04:	4b94      	ldr	r3, [pc, #592]	; (8004058 <HAL_RCC_OscConfig+0x274>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f003 030c 	and.w	r3, r3, #12
 8003e0c:	2b04      	cmp	r3, #4
 8003e0e:	d019      	beq.n	8003e44 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e10:	4b91      	ldr	r3, [pc, #580]	; (8004058 <HAL_RCC_OscConfig+0x274>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	d106      	bne.n	8003e2a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e1c:	4b8e      	ldr	r3, [pc, #568]	; (8004058 <HAL_RCC_OscConfig+0x274>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e28:	d00c      	beq.n	8003e44 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e2a:	4b8b      	ldr	r3, [pc, #556]	; (8004058 <HAL_RCC_OscConfig+0x274>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e32:	2b0c      	cmp	r3, #12
 8003e34:	d112      	bne.n	8003e5c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e36:	4b88      	ldr	r3, [pc, #544]	; (8004058 <HAL_RCC_OscConfig+0x274>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e42:	d10b      	bne.n	8003e5c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e44:	4b84      	ldr	r3, [pc, #528]	; (8004058 <HAL_RCC_OscConfig+0x274>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d05b      	beq.n	8003f08 <HAL_RCC_OscConfig+0x124>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d157      	bne.n	8003f08 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e25a      	b.n	8004312 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e64:	d106      	bne.n	8003e74 <HAL_RCC_OscConfig+0x90>
 8003e66:	4b7c      	ldr	r3, [pc, #496]	; (8004058 <HAL_RCC_OscConfig+0x274>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a7b      	ldr	r2, [pc, #492]	; (8004058 <HAL_RCC_OscConfig+0x274>)
 8003e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e70:	6013      	str	r3, [r2, #0]
 8003e72:	e01d      	b.n	8003eb0 <HAL_RCC_OscConfig+0xcc>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e7c:	d10c      	bne.n	8003e98 <HAL_RCC_OscConfig+0xb4>
 8003e7e:	4b76      	ldr	r3, [pc, #472]	; (8004058 <HAL_RCC_OscConfig+0x274>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a75      	ldr	r2, [pc, #468]	; (8004058 <HAL_RCC_OscConfig+0x274>)
 8003e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	4b73      	ldr	r3, [pc, #460]	; (8004058 <HAL_RCC_OscConfig+0x274>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a72      	ldr	r2, [pc, #456]	; (8004058 <HAL_RCC_OscConfig+0x274>)
 8003e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e94:	6013      	str	r3, [r2, #0]
 8003e96:	e00b      	b.n	8003eb0 <HAL_RCC_OscConfig+0xcc>
 8003e98:	4b6f      	ldr	r3, [pc, #444]	; (8004058 <HAL_RCC_OscConfig+0x274>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a6e      	ldr	r2, [pc, #440]	; (8004058 <HAL_RCC_OscConfig+0x274>)
 8003e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ea2:	6013      	str	r3, [r2, #0]
 8003ea4:	4b6c      	ldr	r3, [pc, #432]	; (8004058 <HAL_RCC_OscConfig+0x274>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a6b      	ldr	r2, [pc, #428]	; (8004058 <HAL_RCC_OscConfig+0x274>)
 8003eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d013      	beq.n	8003ee0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb8:	f7ff f8c8 	bl	800304c <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ec0:	f7ff f8c4 	bl	800304c <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b64      	cmp	r3, #100	; 0x64
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e21f      	b.n	8004312 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ed2:	4b61      	ldr	r3, [pc, #388]	; (8004058 <HAL_RCC_OscConfig+0x274>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0f0      	beq.n	8003ec0 <HAL_RCC_OscConfig+0xdc>
 8003ede:	e014      	b.n	8003f0a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee0:	f7ff f8b4 	bl	800304c <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ee8:	f7ff f8b0 	bl	800304c <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b64      	cmp	r3, #100	; 0x64
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e20b      	b.n	8004312 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003efa:	4b57      	ldr	r3, [pc, #348]	; (8004058 <HAL_RCC_OscConfig+0x274>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f0      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x104>
 8003f06:	e000      	b.n	8003f0a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d06f      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003f16:	4b50      	ldr	r3, [pc, #320]	; (8004058 <HAL_RCC_OscConfig+0x274>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 030c 	and.w	r3, r3, #12
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d017      	beq.n	8003f52 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f22:	4b4d      	ldr	r3, [pc, #308]	; (8004058 <HAL_RCC_OscConfig+0x274>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003f2a:	2b08      	cmp	r3, #8
 8003f2c:	d105      	bne.n	8003f3a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f2e:	4b4a      	ldr	r3, [pc, #296]	; (8004058 <HAL_RCC_OscConfig+0x274>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00b      	beq.n	8003f52 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f3a:	4b47      	ldr	r3, [pc, #284]	; (8004058 <HAL_RCC_OscConfig+0x274>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f42:	2b0c      	cmp	r3, #12
 8003f44:	d11c      	bne.n	8003f80 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f46:	4b44      	ldr	r3, [pc, #272]	; (8004058 <HAL_RCC_OscConfig+0x274>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d116      	bne.n	8003f80 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f52:	4b41      	ldr	r3, [pc, #260]	; (8004058 <HAL_RCC_OscConfig+0x274>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d005      	beq.n	8003f6a <HAL_RCC_OscConfig+0x186>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d001      	beq.n	8003f6a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e1d3      	b.n	8004312 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f6a:	4b3b      	ldr	r3, [pc, #236]	; (8004058 <HAL_RCC_OscConfig+0x274>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	4937      	ldr	r1, [pc, #220]	; (8004058 <HAL_RCC_OscConfig+0x274>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f7e:	e03a      	b.n	8003ff6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d020      	beq.n	8003fca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f88:	4b34      	ldr	r3, [pc, #208]	; (800405c <HAL_RCC_OscConfig+0x278>)
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8e:	f7ff f85d 	bl	800304c <HAL_GetTick>
 8003f92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f94:	e008      	b.n	8003fa8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f96:	f7ff f859 	bl	800304c <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d901      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e1b4      	b.n	8004312 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa8:	4b2b      	ldr	r3, [pc, #172]	; (8004058 <HAL_RCC_OscConfig+0x274>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d0f0      	beq.n	8003f96 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb4:	4b28      	ldr	r3, [pc, #160]	; (8004058 <HAL_RCC_OscConfig+0x274>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	4925      	ldr	r1, [pc, #148]	; (8004058 <HAL_RCC_OscConfig+0x274>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	600b      	str	r3, [r1, #0]
 8003fc8:	e015      	b.n	8003ff6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fca:	4b24      	ldr	r3, [pc, #144]	; (800405c <HAL_RCC_OscConfig+0x278>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd0:	f7ff f83c 	bl	800304c <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fd8:	f7ff f838 	bl	800304c <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e193      	b.n	8004312 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fea:	4b1b      	ldr	r3, [pc, #108]	; (8004058 <HAL_RCC_OscConfig+0x274>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f0      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d036      	beq.n	8004070 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d016      	beq.n	8004038 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800400a:	4b15      	ldr	r3, [pc, #84]	; (8004060 <HAL_RCC_OscConfig+0x27c>)
 800400c:	2201      	movs	r2, #1
 800400e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004010:	f7ff f81c 	bl	800304c <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004018:	f7ff f818 	bl	800304c <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e173      	b.n	8004312 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800402a:	4b0b      	ldr	r3, [pc, #44]	; (8004058 <HAL_RCC_OscConfig+0x274>)
 800402c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0f0      	beq.n	8004018 <HAL_RCC_OscConfig+0x234>
 8004036:	e01b      	b.n	8004070 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004038:	4b09      	ldr	r3, [pc, #36]	; (8004060 <HAL_RCC_OscConfig+0x27c>)
 800403a:	2200      	movs	r2, #0
 800403c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800403e:	f7ff f805 	bl	800304c <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004044:	e00e      	b.n	8004064 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004046:	f7ff f801 	bl	800304c <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d907      	bls.n	8004064 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e15c      	b.n	8004312 <HAL_RCC_OscConfig+0x52e>
 8004058:	40023800 	.word	0x40023800
 800405c:	42470000 	.word	0x42470000
 8004060:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004064:	4b8a      	ldr	r3, [pc, #552]	; (8004290 <HAL_RCC_OscConfig+0x4ac>)
 8004066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1ea      	bne.n	8004046 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0304 	and.w	r3, r3, #4
 8004078:	2b00      	cmp	r3, #0
 800407a:	f000 8097 	beq.w	80041ac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800407e:	2300      	movs	r3, #0
 8004080:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004082:	4b83      	ldr	r3, [pc, #524]	; (8004290 <HAL_RCC_OscConfig+0x4ac>)
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10f      	bne.n	80040ae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800408e:	2300      	movs	r3, #0
 8004090:	60bb      	str	r3, [r7, #8]
 8004092:	4b7f      	ldr	r3, [pc, #508]	; (8004290 <HAL_RCC_OscConfig+0x4ac>)
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	4a7e      	ldr	r2, [pc, #504]	; (8004290 <HAL_RCC_OscConfig+0x4ac>)
 8004098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800409c:	6413      	str	r3, [r2, #64]	; 0x40
 800409e:	4b7c      	ldr	r3, [pc, #496]	; (8004290 <HAL_RCC_OscConfig+0x4ac>)
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a6:	60bb      	str	r3, [r7, #8]
 80040a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040aa:	2301      	movs	r3, #1
 80040ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ae:	4b79      	ldr	r3, [pc, #484]	; (8004294 <HAL_RCC_OscConfig+0x4b0>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d118      	bne.n	80040ec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040ba:	4b76      	ldr	r3, [pc, #472]	; (8004294 <HAL_RCC_OscConfig+0x4b0>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a75      	ldr	r2, [pc, #468]	; (8004294 <HAL_RCC_OscConfig+0x4b0>)
 80040c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040c6:	f7fe ffc1 	bl	800304c <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040cc:	e008      	b.n	80040e0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ce:	f7fe ffbd 	bl	800304c <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e118      	b.n	8004312 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e0:	4b6c      	ldr	r3, [pc, #432]	; (8004294 <HAL_RCC_OscConfig+0x4b0>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0f0      	beq.n	80040ce <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d106      	bne.n	8004102 <HAL_RCC_OscConfig+0x31e>
 80040f4:	4b66      	ldr	r3, [pc, #408]	; (8004290 <HAL_RCC_OscConfig+0x4ac>)
 80040f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f8:	4a65      	ldr	r2, [pc, #404]	; (8004290 <HAL_RCC_OscConfig+0x4ac>)
 80040fa:	f043 0301 	orr.w	r3, r3, #1
 80040fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004100:	e01c      	b.n	800413c <HAL_RCC_OscConfig+0x358>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	2b05      	cmp	r3, #5
 8004108:	d10c      	bne.n	8004124 <HAL_RCC_OscConfig+0x340>
 800410a:	4b61      	ldr	r3, [pc, #388]	; (8004290 <HAL_RCC_OscConfig+0x4ac>)
 800410c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410e:	4a60      	ldr	r2, [pc, #384]	; (8004290 <HAL_RCC_OscConfig+0x4ac>)
 8004110:	f043 0304 	orr.w	r3, r3, #4
 8004114:	6713      	str	r3, [r2, #112]	; 0x70
 8004116:	4b5e      	ldr	r3, [pc, #376]	; (8004290 <HAL_RCC_OscConfig+0x4ac>)
 8004118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411a:	4a5d      	ldr	r2, [pc, #372]	; (8004290 <HAL_RCC_OscConfig+0x4ac>)
 800411c:	f043 0301 	orr.w	r3, r3, #1
 8004120:	6713      	str	r3, [r2, #112]	; 0x70
 8004122:	e00b      	b.n	800413c <HAL_RCC_OscConfig+0x358>
 8004124:	4b5a      	ldr	r3, [pc, #360]	; (8004290 <HAL_RCC_OscConfig+0x4ac>)
 8004126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004128:	4a59      	ldr	r2, [pc, #356]	; (8004290 <HAL_RCC_OscConfig+0x4ac>)
 800412a:	f023 0301 	bic.w	r3, r3, #1
 800412e:	6713      	str	r3, [r2, #112]	; 0x70
 8004130:	4b57      	ldr	r3, [pc, #348]	; (8004290 <HAL_RCC_OscConfig+0x4ac>)
 8004132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004134:	4a56      	ldr	r2, [pc, #344]	; (8004290 <HAL_RCC_OscConfig+0x4ac>)
 8004136:	f023 0304 	bic.w	r3, r3, #4
 800413a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d015      	beq.n	8004170 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004144:	f7fe ff82 	bl	800304c <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800414a:	e00a      	b.n	8004162 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800414c:	f7fe ff7e 	bl	800304c <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	f241 3288 	movw	r2, #5000	; 0x1388
 800415a:	4293      	cmp	r3, r2
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e0d7      	b.n	8004312 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004162:	4b4b      	ldr	r3, [pc, #300]	; (8004290 <HAL_RCC_OscConfig+0x4ac>)
 8004164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d0ee      	beq.n	800414c <HAL_RCC_OscConfig+0x368>
 800416e:	e014      	b.n	800419a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004170:	f7fe ff6c 	bl	800304c <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004176:	e00a      	b.n	800418e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004178:	f7fe ff68 	bl	800304c <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	f241 3288 	movw	r2, #5000	; 0x1388
 8004186:	4293      	cmp	r3, r2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e0c1      	b.n	8004312 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800418e:	4b40      	ldr	r3, [pc, #256]	; (8004290 <HAL_RCC_OscConfig+0x4ac>)
 8004190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1ee      	bne.n	8004178 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800419a:	7dfb      	ldrb	r3, [r7, #23]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d105      	bne.n	80041ac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041a0:	4b3b      	ldr	r3, [pc, #236]	; (8004290 <HAL_RCC_OscConfig+0x4ac>)
 80041a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a4:	4a3a      	ldr	r2, [pc, #232]	; (8004290 <HAL_RCC_OscConfig+0x4ac>)
 80041a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 80ad 	beq.w	8004310 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041b6:	4b36      	ldr	r3, [pc, #216]	; (8004290 <HAL_RCC_OscConfig+0x4ac>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 030c 	and.w	r3, r3, #12
 80041be:	2b08      	cmp	r3, #8
 80041c0:	d060      	beq.n	8004284 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d145      	bne.n	8004256 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ca:	4b33      	ldr	r3, [pc, #204]	; (8004298 <HAL_RCC_OscConfig+0x4b4>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d0:	f7fe ff3c 	bl	800304c <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041d8:	f7fe ff38 	bl	800304c <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e093      	b.n	8004312 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ea:	4b29      	ldr	r3, [pc, #164]	; (8004290 <HAL_RCC_OscConfig+0x4ac>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1f0      	bne.n	80041d8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69da      	ldr	r2, [r3, #28]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	019b      	lsls	r3, r3, #6
 8004206:	431a      	orrs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420c:	085b      	lsrs	r3, r3, #1
 800420e:	3b01      	subs	r3, #1
 8004210:	041b      	lsls	r3, r3, #16
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004218:	061b      	lsls	r3, r3, #24
 800421a:	431a      	orrs	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004220:	071b      	lsls	r3, r3, #28
 8004222:	491b      	ldr	r1, [pc, #108]	; (8004290 <HAL_RCC_OscConfig+0x4ac>)
 8004224:	4313      	orrs	r3, r2
 8004226:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004228:	4b1b      	ldr	r3, [pc, #108]	; (8004298 <HAL_RCC_OscConfig+0x4b4>)
 800422a:	2201      	movs	r2, #1
 800422c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422e:	f7fe ff0d 	bl	800304c <HAL_GetTick>
 8004232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004234:	e008      	b.n	8004248 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004236:	f7fe ff09 	bl	800304c <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e064      	b.n	8004312 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004248:	4b11      	ldr	r3, [pc, #68]	; (8004290 <HAL_RCC_OscConfig+0x4ac>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d0f0      	beq.n	8004236 <HAL_RCC_OscConfig+0x452>
 8004254:	e05c      	b.n	8004310 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004256:	4b10      	ldr	r3, [pc, #64]	; (8004298 <HAL_RCC_OscConfig+0x4b4>)
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425c:	f7fe fef6 	bl	800304c <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004262:	e008      	b.n	8004276 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004264:	f7fe fef2 	bl	800304c <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e04d      	b.n	8004312 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004276:	4b06      	ldr	r3, [pc, #24]	; (8004290 <HAL_RCC_OscConfig+0x4ac>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1f0      	bne.n	8004264 <HAL_RCC_OscConfig+0x480>
 8004282:	e045      	b.n	8004310 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d107      	bne.n	800429c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e040      	b.n	8004312 <HAL_RCC_OscConfig+0x52e>
 8004290:	40023800 	.word	0x40023800
 8004294:	40007000 	.word	0x40007000
 8004298:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800429c:	4b1f      	ldr	r3, [pc, #124]	; (800431c <HAL_RCC_OscConfig+0x538>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d030      	beq.n	800430c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d129      	bne.n	800430c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d122      	bne.n	800430c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042cc:	4013      	ands	r3, r2
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d119      	bne.n	800430c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e2:	085b      	lsrs	r3, r3, #1
 80042e4:	3b01      	subs	r3, #1
 80042e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d10f      	bne.n	800430c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d107      	bne.n	800430c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004306:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004308:	429a      	cmp	r2, r3
 800430a:	d001      	beq.n	8004310 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e000      	b.n	8004312 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40023800 	.word	0x40023800

08004320 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e03f      	b.n	80043b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d106      	bne.n	800434c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7fe fc8e 	bl	8002c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2224      	movs	r2, #36	; 0x24
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68da      	ldr	r2, [r3, #12]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004362:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 fe81 	bl	800506c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	691a      	ldr	r2, [r3, #16]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004378:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	695a      	ldr	r2, [r3, #20]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004388:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68da      	ldr	r2, [r3, #12]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004398:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2220      	movs	r2, #32
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2220      	movs	r2, #32
 80043ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b08a      	sub	sp, #40	; 0x28
 80043be:	af02      	add	r7, sp, #8
 80043c0:	60f8      	str	r0, [r7, #12]
 80043c2:	60b9      	str	r1, [r7, #8]
 80043c4:	603b      	str	r3, [r7, #0]
 80043c6:	4613      	mov	r3, r2
 80043c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043ca:	2300      	movs	r3, #0
 80043cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b20      	cmp	r3, #32
 80043d8:	d17c      	bne.n	80044d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d002      	beq.n	80043e6 <HAL_UART_Transmit+0x2c>
 80043e0:	88fb      	ldrh	r3, [r7, #6]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e075      	b.n	80044d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d101      	bne.n	80043f8 <HAL_UART_Transmit+0x3e>
 80043f4:	2302      	movs	r3, #2
 80043f6:	e06e      	b.n	80044d6 <HAL_UART_Transmit+0x11c>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2221      	movs	r2, #33	; 0x21
 800440a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800440e:	f7fe fe1d 	bl	800304c <HAL_GetTick>
 8004412:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	88fa      	ldrh	r2, [r7, #6]
 8004418:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	88fa      	ldrh	r2, [r7, #6]
 800441e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004428:	d108      	bne.n	800443c <HAL_UART_Transmit+0x82>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d104      	bne.n	800443c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004432:	2300      	movs	r3, #0
 8004434:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	61bb      	str	r3, [r7, #24]
 800443a:	e003      	b.n	8004444 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004440:	2300      	movs	r3, #0
 8004442:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800444c:	e02a      	b.n	80044a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	2200      	movs	r2, #0
 8004456:	2180      	movs	r1, #128	; 0x80
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 fbc1 	bl	8004be0 <UART_WaitOnFlagUntilTimeout>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e036      	b.n	80044d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10b      	bne.n	8004486 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	881b      	ldrh	r3, [r3, #0]
 8004472:	461a      	mov	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800447c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	3302      	adds	r3, #2
 8004482:	61bb      	str	r3, [r7, #24]
 8004484:	e007      	b.n	8004496 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	781a      	ldrb	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	3301      	adds	r3, #1
 8004494:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800449a:	b29b      	uxth	r3, r3
 800449c:	3b01      	subs	r3, #1
 800449e:	b29a      	uxth	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1cf      	bne.n	800444e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2200      	movs	r2, #0
 80044b6:	2140      	movs	r1, #64	; 0x40
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f000 fb91 	bl	8004be0 <UART_WaitOnFlagUntilTimeout>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e006      	b.n	80044d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2220      	movs	r2, #32
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80044d0:	2300      	movs	r3, #0
 80044d2:	e000      	b.n	80044d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80044d4:	2302      	movs	r3, #2
  }
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3720      	adds	r7, #32
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b08a      	sub	sp, #40	; 0x28
 80044e2:	af02      	add	r7, sp, #8
 80044e4:	60f8      	str	r0, [r7, #12]
 80044e6:	60b9      	str	r1, [r7, #8]
 80044e8:	603b      	str	r3, [r7, #0]
 80044ea:	4613      	mov	r3, r2
 80044ec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044ee:	2300      	movs	r3, #0
 80044f0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b20      	cmp	r3, #32
 80044fc:	f040 808c 	bne.w	8004618 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d002      	beq.n	800450c <HAL_UART_Receive+0x2e>
 8004506:	88fb      	ldrh	r3, [r7, #6]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d101      	bne.n	8004510 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e084      	b.n	800461a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004516:	2b01      	cmp	r3, #1
 8004518:	d101      	bne.n	800451e <HAL_UART_Receive+0x40>
 800451a:	2302      	movs	r3, #2
 800451c:	e07d      	b.n	800461a <HAL_UART_Receive+0x13c>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2222      	movs	r2, #34	; 0x22
 8004530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800453a:	f7fe fd87 	bl	800304c <HAL_GetTick>
 800453e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	88fa      	ldrh	r2, [r7, #6]
 8004544:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	88fa      	ldrh	r2, [r7, #6]
 800454a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004554:	d108      	bne.n	8004568 <HAL_UART_Receive+0x8a>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d104      	bne.n	8004568 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800455e:	2300      	movs	r3, #0
 8004560:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	61bb      	str	r3, [r7, #24]
 8004566:	e003      	b.n	8004570 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800456c:	2300      	movs	r3, #0
 800456e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004578:	e043      	b.n	8004602 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	2200      	movs	r2, #0
 8004582:	2120      	movs	r1, #32
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f000 fb2b 	bl	8004be0 <UART_WaitOnFlagUntilTimeout>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d001      	beq.n	8004594 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e042      	b.n	800461a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10c      	bne.n	80045b4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	3302      	adds	r3, #2
 80045b0:	61bb      	str	r3, [r7, #24]
 80045b2:	e01f      	b.n	80045f4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045bc:	d007      	beq.n	80045ce <HAL_UART_Receive+0xf0>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10a      	bne.n	80045dc <HAL_UART_Receive+0xfe>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d106      	bne.n	80045dc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	701a      	strb	r2, [r3, #0]
 80045da:	e008      	b.n	80045ee <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	3301      	adds	r3, #1
 80045f2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	3b01      	subs	r3, #1
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004606:	b29b      	uxth	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1b6      	bne.n	800457a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2220      	movs	r2, #32
 8004610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004614:	2300      	movs	r3, #0
 8004616:	e000      	b.n	800461a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004618:	2302      	movs	r3, #2
  }
}
 800461a:	4618      	mov	r0, r3
 800461c:	3720      	adds	r7, #32
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b084      	sub	sp, #16
 8004626:	af00      	add	r7, sp, #0
 8004628:	60f8      	str	r0, [r7, #12]
 800462a:	60b9      	str	r1, [r7, #8]
 800462c:	4613      	mov	r3, r2
 800462e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b20      	cmp	r3, #32
 800463a:	d11d      	bne.n	8004678 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <HAL_UART_Receive_IT+0x26>
 8004642:	88fb      	ldrh	r3, [r7, #6]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e016      	b.n	800467a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004652:	2b01      	cmp	r3, #1
 8004654:	d101      	bne.n	800465a <HAL_UART_Receive_IT+0x38>
 8004656:	2302      	movs	r3, #2
 8004658:	e00f      	b.n	800467a <HAL_UART_Receive_IT+0x58>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004668:	88fb      	ldrh	r3, [r7, #6]
 800466a:	461a      	mov	r2, r3
 800466c:	68b9      	ldr	r1, [r7, #8]
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 fb24 	bl	8004cbc <UART_Start_Receive_IT>
 8004674:	4603      	mov	r3, r0
 8004676:	e000      	b.n	800467a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004678:	2302      	movs	r3, #2
  }
}
 800467a:	4618      	mov	r0, r3
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
	...

08004684 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b0ba      	sub	sp, #232	; 0xe8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80046aa:	2300      	movs	r3, #0
 80046ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80046b0:	2300      	movs	r3, #0
 80046b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80046b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80046c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10f      	bne.n	80046ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ce:	f003 0320 	and.w	r3, r3, #32
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d009      	beq.n	80046ea <HAL_UART_IRQHandler+0x66>
 80046d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046da:	f003 0320 	and.w	r3, r3, #32
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d003      	beq.n	80046ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 fc07 	bl	8004ef6 <UART_Receive_IT>
      return;
 80046e8:	e256      	b.n	8004b98 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80046ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 80de 	beq.w	80048b0 <HAL_UART_IRQHandler+0x22c>
 80046f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d106      	bne.n	800470e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004704:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 80d1 	beq.w	80048b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800470e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00b      	beq.n	8004732 <HAL_UART_IRQHandler+0xae>
 800471a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800471e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004722:	2b00      	cmp	r3, #0
 8004724:	d005      	beq.n	8004732 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	f043 0201 	orr.w	r2, r3, #1
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004736:	f003 0304 	and.w	r3, r3, #4
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00b      	beq.n	8004756 <HAL_UART_IRQHandler+0xd2>
 800473e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d005      	beq.n	8004756 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	f043 0202 	orr.w	r2, r3, #2
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00b      	beq.n	800477a <HAL_UART_IRQHandler+0xf6>
 8004762:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d005      	beq.n	800477a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	f043 0204 	orr.w	r2, r3, #4
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800477a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800477e:	f003 0308 	and.w	r3, r3, #8
 8004782:	2b00      	cmp	r3, #0
 8004784:	d011      	beq.n	80047aa <HAL_UART_IRQHandler+0x126>
 8004786:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800478a:	f003 0320 	and.w	r3, r3, #32
 800478e:	2b00      	cmp	r3, #0
 8004790:	d105      	bne.n	800479e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004792:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d005      	beq.n	80047aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a2:	f043 0208 	orr.w	r2, r3, #8
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f000 81ed 	beq.w	8004b8e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047b8:	f003 0320 	and.w	r3, r3, #32
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d008      	beq.n	80047d2 <HAL_UART_IRQHandler+0x14e>
 80047c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047c4:	f003 0320 	and.w	r3, r3, #32
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d002      	beq.n	80047d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 fb92 	bl	8004ef6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047dc:	2b40      	cmp	r3, #64	; 0x40
 80047de:	bf0c      	ite	eq
 80047e0:	2301      	moveq	r3, #1
 80047e2:	2300      	movne	r3, #0
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ee:	f003 0308 	and.w	r3, r3, #8
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d103      	bne.n	80047fe <HAL_UART_IRQHandler+0x17a>
 80047f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d04f      	beq.n	800489e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 fa9a 	bl	8004d38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480e:	2b40      	cmp	r3, #64	; 0x40
 8004810:	d141      	bne.n	8004896 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	3314      	adds	r3, #20
 8004818:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004820:	e853 3f00 	ldrex	r3, [r3]
 8004824:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004828:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800482c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004830:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	3314      	adds	r3, #20
 800483a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800483e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004842:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004846:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800484a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800484e:	e841 2300 	strex	r3, r2, [r1]
 8004852:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004856:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1d9      	bne.n	8004812 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004862:	2b00      	cmp	r3, #0
 8004864:	d013      	beq.n	800488e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486a:	4a7d      	ldr	r2, [pc, #500]	; (8004a60 <HAL_UART_IRQHandler+0x3dc>)
 800486c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004872:	4618      	mov	r0, r3
 8004874:	f7fe fd9b 	bl	80033ae <HAL_DMA_Abort_IT>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d016      	beq.n	80048ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004888:	4610      	mov	r0, r2
 800488a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800488c:	e00e      	b.n	80048ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f990 	bl	8004bb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004894:	e00a      	b.n	80048ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f98c 	bl	8004bb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800489c:	e006      	b.n	80048ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f988 	bl	8004bb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80048aa:	e170      	b.n	8004b8e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ac:	bf00      	nop
    return;
 80048ae:	e16e      	b.n	8004b8e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	f040 814a 	bne.w	8004b4e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80048ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048be:	f003 0310 	and.w	r3, r3, #16
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f000 8143 	beq.w	8004b4e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80048c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048cc:	f003 0310 	and.w	r3, r3, #16
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f000 813c 	beq.w	8004b4e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048d6:	2300      	movs	r3, #0
 80048d8:	60bb      	str	r3, [r7, #8]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	60bb      	str	r3, [r7, #8]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	60bb      	str	r3, [r7, #8]
 80048ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f6:	2b40      	cmp	r3, #64	; 0x40
 80048f8:	f040 80b4 	bne.w	8004a64 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004908:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 8140 	beq.w	8004b92 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004916:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800491a:	429a      	cmp	r2, r3
 800491c:	f080 8139 	bcs.w	8004b92 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004926:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004932:	f000 8088 	beq.w	8004a46 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	330c      	adds	r3, #12
 800493c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004940:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004944:	e853 3f00 	ldrex	r3, [r3]
 8004948:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800494c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004954:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	330c      	adds	r3, #12
 800495e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004962:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004966:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800496e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004972:	e841 2300 	strex	r3, r2, [r1]
 8004976:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800497a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1d9      	bne.n	8004936 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	3314      	adds	r3, #20
 8004988:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800498c:	e853 3f00 	ldrex	r3, [r3]
 8004990:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004992:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004994:	f023 0301 	bic.w	r3, r3, #1
 8004998:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	3314      	adds	r3, #20
 80049a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80049a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80049aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80049ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80049b2:	e841 2300 	strex	r3, r2, [r1]
 80049b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80049b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1e1      	bne.n	8004982 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	3314      	adds	r3, #20
 80049c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049c8:	e853 3f00 	ldrex	r3, [r3]
 80049cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80049ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	3314      	adds	r3, #20
 80049de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80049e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80049e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80049e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80049ea:	e841 2300 	strex	r3, r2, [r1]
 80049ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80049f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1e3      	bne.n	80049be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2220      	movs	r2, #32
 80049fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	330c      	adds	r3, #12
 8004a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a0e:	e853 3f00 	ldrex	r3, [r3]
 8004a12:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a16:	f023 0310 	bic.w	r3, r3, #16
 8004a1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	330c      	adds	r3, #12
 8004a24:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004a28:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a2a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a30:	e841 2300 	strex	r3, r2, [r1]
 8004a34:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1e3      	bne.n	8004a04 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7fe fc44 	bl	80032ce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	4619      	mov	r1, r3
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f8b6 	bl	8004bc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a5c:	e099      	b.n	8004b92 <HAL_UART_IRQHandler+0x50e>
 8004a5e:	bf00      	nop
 8004a60:	08004dff 	.word	0x08004dff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f000 808b 	beq.w	8004b96 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004a80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 8086 	beq.w	8004b96 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	330c      	adds	r3, #12
 8004a90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a94:	e853 3f00 	ldrex	r3, [r3]
 8004a98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004aa0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	330c      	adds	r3, #12
 8004aaa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004aae:	647a      	str	r2, [r7, #68]	; 0x44
 8004ab0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ab4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ab6:	e841 2300 	strex	r3, r2, [r1]
 8004aba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1e3      	bne.n	8004a8a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	3314      	adds	r3, #20
 8004ac8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	e853 3f00 	ldrex	r3, [r3]
 8004ad0:	623b      	str	r3, [r7, #32]
   return(result);
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	f023 0301 	bic.w	r3, r3, #1
 8004ad8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	3314      	adds	r3, #20
 8004ae2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004ae6:	633a      	str	r2, [r7, #48]	; 0x30
 8004ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004aec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aee:	e841 2300 	strex	r3, r2, [r1]
 8004af2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1e3      	bne.n	8004ac2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2220      	movs	r2, #32
 8004afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	330c      	adds	r3, #12
 8004b0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	e853 3f00 	ldrex	r3, [r3]
 8004b16:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f023 0310 	bic.w	r3, r3, #16
 8004b1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	330c      	adds	r3, #12
 8004b28:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004b2c:	61fa      	str	r2, [r7, #28]
 8004b2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b30:	69b9      	ldr	r1, [r7, #24]
 8004b32:	69fa      	ldr	r2, [r7, #28]
 8004b34:	e841 2300 	strex	r3, r2, [r1]
 8004b38:	617b      	str	r3, [r7, #20]
   return(result);
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1e3      	bne.n	8004b08 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b44:	4619      	mov	r1, r3
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f83e 	bl	8004bc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b4c:	e023      	b.n	8004b96 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d009      	beq.n	8004b6e <HAL_UART_IRQHandler+0x4ea>
 8004b5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f95d 	bl	8004e26 <UART_Transmit_IT>
    return;
 8004b6c:	e014      	b.n	8004b98 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00e      	beq.n	8004b98 <HAL_UART_IRQHandler+0x514>
 8004b7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d008      	beq.n	8004b98 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f99d 	bl	8004ec6 <UART_EndTransmit_IT>
    return;
 8004b8c:	e004      	b.n	8004b98 <HAL_UART_IRQHandler+0x514>
    return;
 8004b8e:	bf00      	nop
 8004b90:	e002      	b.n	8004b98 <HAL_UART_IRQHandler+0x514>
      return;
 8004b92:	bf00      	nop
 8004b94:	e000      	b.n	8004b98 <HAL_UART_IRQHandler+0x514>
      return;
 8004b96:	bf00      	nop
  }
}
 8004b98:	37e8      	adds	r7, #232	; 0xe8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop

08004ba0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b090      	sub	sp, #64	; 0x40
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	603b      	str	r3, [r7, #0]
 8004bec:	4613      	mov	r3, r2
 8004bee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bf0:	e050      	b.n	8004c94 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf8:	d04c      	beq.n	8004c94 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d007      	beq.n	8004c10 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c00:	f7fe fa24 	bl	800304c <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d241      	bcs.n	8004c94 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	330c      	adds	r3, #12
 8004c16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1a:	e853 3f00 	ldrex	r3, [r3]
 8004c1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	330c      	adds	r3, #12
 8004c2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c30:	637a      	str	r2, [r7, #52]	; 0x34
 8004c32:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c38:	e841 2300 	strex	r3, r2, [r1]
 8004c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1e5      	bne.n	8004c10 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	3314      	adds	r3, #20
 8004c4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	e853 3f00 	ldrex	r3, [r3]
 8004c52:	613b      	str	r3, [r7, #16]
   return(result);
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	f023 0301 	bic.w	r3, r3, #1
 8004c5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	3314      	adds	r3, #20
 8004c62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c64:	623a      	str	r2, [r7, #32]
 8004c66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c68:	69f9      	ldr	r1, [r7, #28]
 8004c6a:	6a3a      	ldr	r2, [r7, #32]
 8004c6c:	e841 2300 	strex	r3, r2, [r1]
 8004c70:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1e5      	bne.n	8004c44 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e00f      	b.n	8004cb4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	68ba      	ldr	r2, [r7, #8]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	bf0c      	ite	eq
 8004ca4:	2301      	moveq	r3, #1
 8004ca6:	2300      	movne	r3, #0
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	461a      	mov	r2, r3
 8004cac:	79fb      	ldrb	r3, [r7, #7]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d09f      	beq.n	8004bf2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3740      	adds	r7, #64	; 0x40
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	88fa      	ldrh	r2, [r7, #6]
 8004cd4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	88fa      	ldrh	r2, [r7, #6]
 8004cda:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2222      	movs	r2, #34	; 0x22
 8004ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d007      	beq.n	8004d0a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68da      	ldr	r2, [r3, #12]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d08:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	695a      	ldr	r2, [r3, #20]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f042 0201 	orr.w	r2, r2, #1
 8004d18:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68da      	ldr	r2, [r3, #12]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f042 0220 	orr.w	r2, r2, #32
 8004d28:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3714      	adds	r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b095      	sub	sp, #84	; 0x54
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	330c      	adds	r3, #12
 8004d46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d4a:	e853 3f00 	ldrex	r3, [r3]
 8004d4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	330c      	adds	r3, #12
 8004d5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d60:	643a      	str	r2, [r7, #64]	; 0x40
 8004d62:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d68:	e841 2300 	strex	r3, r2, [r1]
 8004d6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1e5      	bne.n	8004d40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	3314      	adds	r3, #20
 8004d7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7c:	6a3b      	ldr	r3, [r7, #32]
 8004d7e:	e853 3f00 	ldrex	r3, [r3]
 8004d82:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	f023 0301 	bic.w	r3, r3, #1
 8004d8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	3314      	adds	r3, #20
 8004d92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d9c:	e841 2300 	strex	r3, r2, [r1]
 8004da0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1e5      	bne.n	8004d74 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d119      	bne.n	8004de4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	330c      	adds	r3, #12
 8004db6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	e853 3f00 	ldrex	r3, [r3]
 8004dbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	f023 0310 	bic.w	r3, r3, #16
 8004dc6:	647b      	str	r3, [r7, #68]	; 0x44
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	330c      	adds	r3, #12
 8004dce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dd0:	61ba      	str	r2, [r7, #24]
 8004dd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd4:	6979      	ldr	r1, [r7, #20]
 8004dd6:	69ba      	ldr	r2, [r7, #24]
 8004dd8:	e841 2300 	strex	r3, r2, [r1]
 8004ddc:	613b      	str	r3, [r7, #16]
   return(result);
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1e5      	bne.n	8004db0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2220      	movs	r2, #32
 8004de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004df2:	bf00      	nop
 8004df4:	3754      	adds	r7, #84	; 0x54
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b084      	sub	sp, #16
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f7ff fecb 	bl	8004bb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e1e:	bf00      	nop
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b085      	sub	sp, #20
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b21      	cmp	r3, #33	; 0x21
 8004e38:	d13e      	bne.n	8004eb8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e42:	d114      	bne.n	8004e6e <UART_Transmit_IT+0x48>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d110      	bne.n	8004e6e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a1b      	ldr	r3, [r3, #32]
 8004e50:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	881b      	ldrh	r3, [r3, #0]
 8004e56:	461a      	mov	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e60:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	1c9a      	adds	r2, r3, #2
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	621a      	str	r2, [r3, #32]
 8004e6c:	e008      	b.n	8004e80 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	1c59      	adds	r1, r3, #1
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	6211      	str	r1, [r2, #32]
 8004e78:	781a      	ldrb	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	3b01      	subs	r3, #1
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10f      	bne.n	8004eb4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68da      	ldr	r2, [r3, #12]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ea2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68da      	ldr	r2, [r3, #12]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004eb2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	e000      	b.n	8004eba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004eb8:	2302      	movs	r3, #2
  }
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b082      	sub	sp, #8
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68da      	ldr	r2, [r3, #12]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004edc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7ff fe5a 	bl	8004ba0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3708      	adds	r7, #8
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b08c      	sub	sp, #48	; 0x30
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b22      	cmp	r3, #34	; 0x22
 8004f08:	f040 80ab 	bne.w	8005062 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f14:	d117      	bne.n	8004f46 <UART_Receive_IT+0x50>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d113      	bne.n	8004f46 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f26:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f38:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3e:	1c9a      	adds	r2, r3, #2
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	629a      	str	r2, [r3, #40]	; 0x28
 8004f44:	e026      	b.n	8004f94 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f58:	d007      	beq.n	8004f6a <UART_Receive_IT+0x74>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10a      	bne.n	8004f78 <UART_Receive_IT+0x82>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d106      	bne.n	8004f78 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	b2da      	uxtb	r2, r3
 8004f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f74:	701a      	strb	r2, [r3, #0]
 8004f76:	e008      	b.n	8004f8a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f84:	b2da      	uxtb	r2, r3
 8004f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f88:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8e:	1c5a      	adds	r2, r3, #1
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d15a      	bne.n	800505e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 0220 	bic.w	r2, r2, #32
 8004fb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68da      	ldr	r2, [r3, #12]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	695a      	ldr	r2, [r3, #20]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f022 0201 	bic.w	r2, r2, #1
 8004fd6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d135      	bne.n	8005054 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	330c      	adds	r3, #12
 8004ff4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	e853 3f00 	ldrex	r3, [r3]
 8004ffc:	613b      	str	r3, [r7, #16]
   return(result);
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	f023 0310 	bic.w	r3, r3, #16
 8005004:	627b      	str	r3, [r7, #36]	; 0x24
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	330c      	adds	r3, #12
 800500c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800500e:	623a      	str	r2, [r7, #32]
 8005010:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005012:	69f9      	ldr	r1, [r7, #28]
 8005014:	6a3a      	ldr	r2, [r7, #32]
 8005016:	e841 2300 	strex	r3, r2, [r1]
 800501a:	61bb      	str	r3, [r7, #24]
   return(result);
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1e5      	bne.n	8004fee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0310 	and.w	r3, r3, #16
 800502c:	2b10      	cmp	r3, #16
 800502e:	d10a      	bne.n	8005046 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005030:	2300      	movs	r3, #0
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	60fb      	str	r3, [r7, #12]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	60fb      	str	r3, [r7, #12]
 8005044:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800504a:	4619      	mov	r1, r3
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f7ff fdbb 	bl	8004bc8 <HAL_UARTEx_RxEventCallback>
 8005052:	e002      	b.n	800505a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f7fd fb45 	bl	80026e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800505a:	2300      	movs	r3, #0
 800505c:	e002      	b.n	8005064 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800505e:	2300      	movs	r3, #0
 8005060:	e000      	b.n	8005064 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005062:	2302      	movs	r3, #2
  }
}
 8005064:	4618      	mov	r0, r3
 8005066:	3730      	adds	r7, #48	; 0x30
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800506c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005070:	b0c0      	sub	sp, #256	; 0x100
 8005072:	af00      	add	r7, sp, #0
 8005074:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005088:	68d9      	ldr	r1, [r3, #12]
 800508a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	ea40 0301 	orr.w	r3, r0, r1
 8005094:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800509a:	689a      	ldr	r2, [r3, #8]
 800509c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	431a      	orrs	r2, r3
 80050a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	431a      	orrs	r2, r3
 80050ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80050b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80050c4:	f021 010c 	bic.w	r1, r1, #12
 80050c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80050d2:	430b      	orrs	r3, r1
 80050d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80050e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e6:	6999      	ldr	r1, [r3, #24]
 80050e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	ea40 0301 	orr.w	r3, r0, r1
 80050f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	4b8f      	ldr	r3, [pc, #572]	; (8005338 <UART_SetConfig+0x2cc>)
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d005      	beq.n	800510c <UART_SetConfig+0xa0>
 8005100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	4b8d      	ldr	r3, [pc, #564]	; (800533c <UART_SetConfig+0x2d0>)
 8005108:	429a      	cmp	r2, r3
 800510a:	d104      	bne.n	8005116 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800510c:	f7fe fc26 	bl	800395c <HAL_RCC_GetPCLK2Freq>
 8005110:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005114:	e003      	b.n	800511e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005116:	f7fe fc0d 	bl	8003934 <HAL_RCC_GetPCLK1Freq>
 800511a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800511e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005122:	69db      	ldr	r3, [r3, #28]
 8005124:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005128:	f040 810c 	bne.w	8005344 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800512c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005130:	2200      	movs	r2, #0
 8005132:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005136:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800513a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800513e:	4622      	mov	r2, r4
 8005140:	462b      	mov	r3, r5
 8005142:	1891      	adds	r1, r2, r2
 8005144:	65b9      	str	r1, [r7, #88]	; 0x58
 8005146:	415b      	adcs	r3, r3
 8005148:	65fb      	str	r3, [r7, #92]	; 0x5c
 800514a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800514e:	4621      	mov	r1, r4
 8005150:	eb12 0801 	adds.w	r8, r2, r1
 8005154:	4629      	mov	r1, r5
 8005156:	eb43 0901 	adc.w	r9, r3, r1
 800515a:	f04f 0200 	mov.w	r2, #0
 800515e:	f04f 0300 	mov.w	r3, #0
 8005162:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005166:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800516a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800516e:	4690      	mov	r8, r2
 8005170:	4699      	mov	r9, r3
 8005172:	4623      	mov	r3, r4
 8005174:	eb18 0303 	adds.w	r3, r8, r3
 8005178:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800517c:	462b      	mov	r3, r5
 800517e:	eb49 0303 	adc.w	r3, r9, r3
 8005182:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005192:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005196:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800519a:	460b      	mov	r3, r1
 800519c:	18db      	adds	r3, r3, r3
 800519e:	653b      	str	r3, [r7, #80]	; 0x50
 80051a0:	4613      	mov	r3, r2
 80051a2:	eb42 0303 	adc.w	r3, r2, r3
 80051a6:	657b      	str	r3, [r7, #84]	; 0x54
 80051a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80051ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80051b0:	f7fb fd6a 	bl	8000c88 <__aeabi_uldivmod>
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	4b61      	ldr	r3, [pc, #388]	; (8005340 <UART_SetConfig+0x2d4>)
 80051ba:	fba3 2302 	umull	r2, r3, r3, r2
 80051be:	095b      	lsrs	r3, r3, #5
 80051c0:	011c      	lsls	r4, r3, #4
 80051c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051c6:	2200      	movs	r2, #0
 80051c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80051d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80051d4:	4642      	mov	r2, r8
 80051d6:	464b      	mov	r3, r9
 80051d8:	1891      	adds	r1, r2, r2
 80051da:	64b9      	str	r1, [r7, #72]	; 0x48
 80051dc:	415b      	adcs	r3, r3
 80051de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80051e4:	4641      	mov	r1, r8
 80051e6:	eb12 0a01 	adds.w	sl, r2, r1
 80051ea:	4649      	mov	r1, r9
 80051ec:	eb43 0b01 	adc.w	fp, r3, r1
 80051f0:	f04f 0200 	mov.w	r2, #0
 80051f4:	f04f 0300 	mov.w	r3, #0
 80051f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005200:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005204:	4692      	mov	sl, r2
 8005206:	469b      	mov	fp, r3
 8005208:	4643      	mov	r3, r8
 800520a:	eb1a 0303 	adds.w	r3, sl, r3
 800520e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005212:	464b      	mov	r3, r9
 8005214:	eb4b 0303 	adc.w	r3, fp, r3
 8005218:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800521c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005228:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800522c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005230:	460b      	mov	r3, r1
 8005232:	18db      	adds	r3, r3, r3
 8005234:	643b      	str	r3, [r7, #64]	; 0x40
 8005236:	4613      	mov	r3, r2
 8005238:	eb42 0303 	adc.w	r3, r2, r3
 800523c:	647b      	str	r3, [r7, #68]	; 0x44
 800523e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005242:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005246:	f7fb fd1f 	bl	8000c88 <__aeabi_uldivmod>
 800524a:	4602      	mov	r2, r0
 800524c:	460b      	mov	r3, r1
 800524e:	4611      	mov	r1, r2
 8005250:	4b3b      	ldr	r3, [pc, #236]	; (8005340 <UART_SetConfig+0x2d4>)
 8005252:	fba3 2301 	umull	r2, r3, r3, r1
 8005256:	095b      	lsrs	r3, r3, #5
 8005258:	2264      	movs	r2, #100	; 0x64
 800525a:	fb02 f303 	mul.w	r3, r2, r3
 800525e:	1acb      	subs	r3, r1, r3
 8005260:	00db      	lsls	r3, r3, #3
 8005262:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005266:	4b36      	ldr	r3, [pc, #216]	; (8005340 <UART_SetConfig+0x2d4>)
 8005268:	fba3 2302 	umull	r2, r3, r3, r2
 800526c:	095b      	lsrs	r3, r3, #5
 800526e:	005b      	lsls	r3, r3, #1
 8005270:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005274:	441c      	add	r4, r3
 8005276:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800527a:	2200      	movs	r2, #0
 800527c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005280:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005284:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005288:	4642      	mov	r2, r8
 800528a:	464b      	mov	r3, r9
 800528c:	1891      	adds	r1, r2, r2
 800528e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005290:	415b      	adcs	r3, r3
 8005292:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005294:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005298:	4641      	mov	r1, r8
 800529a:	1851      	adds	r1, r2, r1
 800529c:	6339      	str	r1, [r7, #48]	; 0x30
 800529e:	4649      	mov	r1, r9
 80052a0:	414b      	adcs	r3, r1
 80052a2:	637b      	str	r3, [r7, #52]	; 0x34
 80052a4:	f04f 0200 	mov.w	r2, #0
 80052a8:	f04f 0300 	mov.w	r3, #0
 80052ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80052b0:	4659      	mov	r1, fp
 80052b2:	00cb      	lsls	r3, r1, #3
 80052b4:	4651      	mov	r1, sl
 80052b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052ba:	4651      	mov	r1, sl
 80052bc:	00ca      	lsls	r2, r1, #3
 80052be:	4610      	mov	r0, r2
 80052c0:	4619      	mov	r1, r3
 80052c2:	4603      	mov	r3, r0
 80052c4:	4642      	mov	r2, r8
 80052c6:	189b      	adds	r3, r3, r2
 80052c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052cc:	464b      	mov	r3, r9
 80052ce:	460a      	mov	r2, r1
 80052d0:	eb42 0303 	adc.w	r3, r2, r3
 80052d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80052e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80052e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80052ec:	460b      	mov	r3, r1
 80052ee:	18db      	adds	r3, r3, r3
 80052f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80052f2:	4613      	mov	r3, r2
 80052f4:	eb42 0303 	adc.w	r3, r2, r3
 80052f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005302:	f7fb fcc1 	bl	8000c88 <__aeabi_uldivmod>
 8005306:	4602      	mov	r2, r0
 8005308:	460b      	mov	r3, r1
 800530a:	4b0d      	ldr	r3, [pc, #52]	; (8005340 <UART_SetConfig+0x2d4>)
 800530c:	fba3 1302 	umull	r1, r3, r3, r2
 8005310:	095b      	lsrs	r3, r3, #5
 8005312:	2164      	movs	r1, #100	; 0x64
 8005314:	fb01 f303 	mul.w	r3, r1, r3
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	00db      	lsls	r3, r3, #3
 800531c:	3332      	adds	r3, #50	; 0x32
 800531e:	4a08      	ldr	r2, [pc, #32]	; (8005340 <UART_SetConfig+0x2d4>)
 8005320:	fba2 2303 	umull	r2, r3, r2, r3
 8005324:	095b      	lsrs	r3, r3, #5
 8005326:	f003 0207 	and.w	r2, r3, #7
 800532a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4422      	add	r2, r4
 8005332:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005334:	e105      	b.n	8005542 <UART_SetConfig+0x4d6>
 8005336:	bf00      	nop
 8005338:	40011000 	.word	0x40011000
 800533c:	40011400 	.word	0x40011400
 8005340:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005344:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005348:	2200      	movs	r2, #0
 800534a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800534e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005352:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005356:	4642      	mov	r2, r8
 8005358:	464b      	mov	r3, r9
 800535a:	1891      	adds	r1, r2, r2
 800535c:	6239      	str	r1, [r7, #32]
 800535e:	415b      	adcs	r3, r3
 8005360:	627b      	str	r3, [r7, #36]	; 0x24
 8005362:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005366:	4641      	mov	r1, r8
 8005368:	1854      	adds	r4, r2, r1
 800536a:	4649      	mov	r1, r9
 800536c:	eb43 0501 	adc.w	r5, r3, r1
 8005370:	f04f 0200 	mov.w	r2, #0
 8005374:	f04f 0300 	mov.w	r3, #0
 8005378:	00eb      	lsls	r3, r5, #3
 800537a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800537e:	00e2      	lsls	r2, r4, #3
 8005380:	4614      	mov	r4, r2
 8005382:	461d      	mov	r5, r3
 8005384:	4643      	mov	r3, r8
 8005386:	18e3      	adds	r3, r4, r3
 8005388:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800538c:	464b      	mov	r3, r9
 800538e:	eb45 0303 	adc.w	r3, r5, r3
 8005392:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80053a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80053a6:	f04f 0200 	mov.w	r2, #0
 80053aa:	f04f 0300 	mov.w	r3, #0
 80053ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80053b2:	4629      	mov	r1, r5
 80053b4:	008b      	lsls	r3, r1, #2
 80053b6:	4621      	mov	r1, r4
 80053b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053bc:	4621      	mov	r1, r4
 80053be:	008a      	lsls	r2, r1, #2
 80053c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80053c4:	f7fb fc60 	bl	8000c88 <__aeabi_uldivmod>
 80053c8:	4602      	mov	r2, r0
 80053ca:	460b      	mov	r3, r1
 80053cc:	4b60      	ldr	r3, [pc, #384]	; (8005550 <UART_SetConfig+0x4e4>)
 80053ce:	fba3 2302 	umull	r2, r3, r3, r2
 80053d2:	095b      	lsrs	r3, r3, #5
 80053d4:	011c      	lsls	r4, r3, #4
 80053d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053da:	2200      	movs	r2, #0
 80053dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80053e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80053e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80053e8:	4642      	mov	r2, r8
 80053ea:	464b      	mov	r3, r9
 80053ec:	1891      	adds	r1, r2, r2
 80053ee:	61b9      	str	r1, [r7, #24]
 80053f0:	415b      	adcs	r3, r3
 80053f2:	61fb      	str	r3, [r7, #28]
 80053f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053f8:	4641      	mov	r1, r8
 80053fa:	1851      	adds	r1, r2, r1
 80053fc:	6139      	str	r1, [r7, #16]
 80053fe:	4649      	mov	r1, r9
 8005400:	414b      	adcs	r3, r1
 8005402:	617b      	str	r3, [r7, #20]
 8005404:	f04f 0200 	mov.w	r2, #0
 8005408:	f04f 0300 	mov.w	r3, #0
 800540c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005410:	4659      	mov	r1, fp
 8005412:	00cb      	lsls	r3, r1, #3
 8005414:	4651      	mov	r1, sl
 8005416:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800541a:	4651      	mov	r1, sl
 800541c:	00ca      	lsls	r2, r1, #3
 800541e:	4610      	mov	r0, r2
 8005420:	4619      	mov	r1, r3
 8005422:	4603      	mov	r3, r0
 8005424:	4642      	mov	r2, r8
 8005426:	189b      	adds	r3, r3, r2
 8005428:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800542c:	464b      	mov	r3, r9
 800542e:	460a      	mov	r2, r1
 8005430:	eb42 0303 	adc.w	r3, r2, r3
 8005434:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	67bb      	str	r3, [r7, #120]	; 0x78
 8005442:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005444:	f04f 0200 	mov.w	r2, #0
 8005448:	f04f 0300 	mov.w	r3, #0
 800544c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005450:	4649      	mov	r1, r9
 8005452:	008b      	lsls	r3, r1, #2
 8005454:	4641      	mov	r1, r8
 8005456:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800545a:	4641      	mov	r1, r8
 800545c:	008a      	lsls	r2, r1, #2
 800545e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005462:	f7fb fc11 	bl	8000c88 <__aeabi_uldivmod>
 8005466:	4602      	mov	r2, r0
 8005468:	460b      	mov	r3, r1
 800546a:	4b39      	ldr	r3, [pc, #228]	; (8005550 <UART_SetConfig+0x4e4>)
 800546c:	fba3 1302 	umull	r1, r3, r3, r2
 8005470:	095b      	lsrs	r3, r3, #5
 8005472:	2164      	movs	r1, #100	; 0x64
 8005474:	fb01 f303 	mul.w	r3, r1, r3
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	011b      	lsls	r3, r3, #4
 800547c:	3332      	adds	r3, #50	; 0x32
 800547e:	4a34      	ldr	r2, [pc, #208]	; (8005550 <UART_SetConfig+0x4e4>)
 8005480:	fba2 2303 	umull	r2, r3, r2, r3
 8005484:	095b      	lsrs	r3, r3, #5
 8005486:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800548a:	441c      	add	r4, r3
 800548c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005490:	2200      	movs	r2, #0
 8005492:	673b      	str	r3, [r7, #112]	; 0x70
 8005494:	677a      	str	r2, [r7, #116]	; 0x74
 8005496:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800549a:	4642      	mov	r2, r8
 800549c:	464b      	mov	r3, r9
 800549e:	1891      	adds	r1, r2, r2
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	415b      	adcs	r3, r3
 80054a4:	60fb      	str	r3, [r7, #12]
 80054a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054aa:	4641      	mov	r1, r8
 80054ac:	1851      	adds	r1, r2, r1
 80054ae:	6039      	str	r1, [r7, #0]
 80054b0:	4649      	mov	r1, r9
 80054b2:	414b      	adcs	r3, r1
 80054b4:	607b      	str	r3, [r7, #4]
 80054b6:	f04f 0200 	mov.w	r2, #0
 80054ba:	f04f 0300 	mov.w	r3, #0
 80054be:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80054c2:	4659      	mov	r1, fp
 80054c4:	00cb      	lsls	r3, r1, #3
 80054c6:	4651      	mov	r1, sl
 80054c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054cc:	4651      	mov	r1, sl
 80054ce:	00ca      	lsls	r2, r1, #3
 80054d0:	4610      	mov	r0, r2
 80054d2:	4619      	mov	r1, r3
 80054d4:	4603      	mov	r3, r0
 80054d6:	4642      	mov	r2, r8
 80054d8:	189b      	adds	r3, r3, r2
 80054da:	66bb      	str	r3, [r7, #104]	; 0x68
 80054dc:	464b      	mov	r3, r9
 80054de:	460a      	mov	r2, r1
 80054e0:	eb42 0303 	adc.w	r3, r2, r3
 80054e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	663b      	str	r3, [r7, #96]	; 0x60
 80054f0:	667a      	str	r2, [r7, #100]	; 0x64
 80054f2:	f04f 0200 	mov.w	r2, #0
 80054f6:	f04f 0300 	mov.w	r3, #0
 80054fa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80054fe:	4649      	mov	r1, r9
 8005500:	008b      	lsls	r3, r1, #2
 8005502:	4641      	mov	r1, r8
 8005504:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005508:	4641      	mov	r1, r8
 800550a:	008a      	lsls	r2, r1, #2
 800550c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005510:	f7fb fbba 	bl	8000c88 <__aeabi_uldivmod>
 8005514:	4602      	mov	r2, r0
 8005516:	460b      	mov	r3, r1
 8005518:	4b0d      	ldr	r3, [pc, #52]	; (8005550 <UART_SetConfig+0x4e4>)
 800551a:	fba3 1302 	umull	r1, r3, r3, r2
 800551e:	095b      	lsrs	r3, r3, #5
 8005520:	2164      	movs	r1, #100	; 0x64
 8005522:	fb01 f303 	mul.w	r3, r1, r3
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	011b      	lsls	r3, r3, #4
 800552a:	3332      	adds	r3, #50	; 0x32
 800552c:	4a08      	ldr	r2, [pc, #32]	; (8005550 <UART_SetConfig+0x4e4>)
 800552e:	fba2 2303 	umull	r2, r3, r2, r3
 8005532:	095b      	lsrs	r3, r3, #5
 8005534:	f003 020f 	and.w	r2, r3, #15
 8005538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4422      	add	r2, r4
 8005540:	609a      	str	r2, [r3, #8]
}
 8005542:	bf00      	nop
 8005544:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005548:	46bd      	mov	sp, r7
 800554a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800554e:	bf00      	nop
 8005550:	51eb851f 	.word	0x51eb851f

08005554 <__errno>:
 8005554:	4b01      	ldr	r3, [pc, #4]	; (800555c <__errno+0x8>)
 8005556:	6818      	ldr	r0, [r3, #0]
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	2000003c 	.word	0x2000003c

08005560 <__libc_init_array>:
 8005560:	b570      	push	{r4, r5, r6, lr}
 8005562:	4d0d      	ldr	r5, [pc, #52]	; (8005598 <__libc_init_array+0x38>)
 8005564:	4c0d      	ldr	r4, [pc, #52]	; (800559c <__libc_init_array+0x3c>)
 8005566:	1b64      	subs	r4, r4, r5
 8005568:	10a4      	asrs	r4, r4, #2
 800556a:	2600      	movs	r6, #0
 800556c:	42a6      	cmp	r6, r4
 800556e:	d109      	bne.n	8005584 <__libc_init_array+0x24>
 8005570:	4d0b      	ldr	r5, [pc, #44]	; (80055a0 <__libc_init_array+0x40>)
 8005572:	4c0c      	ldr	r4, [pc, #48]	; (80055a4 <__libc_init_array+0x44>)
 8005574:	f003 fba4 	bl	8008cc0 <_init>
 8005578:	1b64      	subs	r4, r4, r5
 800557a:	10a4      	asrs	r4, r4, #2
 800557c:	2600      	movs	r6, #0
 800557e:	42a6      	cmp	r6, r4
 8005580:	d105      	bne.n	800558e <__libc_init_array+0x2e>
 8005582:	bd70      	pop	{r4, r5, r6, pc}
 8005584:	f855 3b04 	ldr.w	r3, [r5], #4
 8005588:	4798      	blx	r3
 800558a:	3601      	adds	r6, #1
 800558c:	e7ee      	b.n	800556c <__libc_init_array+0xc>
 800558e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005592:	4798      	blx	r3
 8005594:	3601      	adds	r6, #1
 8005596:	e7f2      	b.n	800557e <__libc_init_array+0x1e>
 8005598:	080094ac 	.word	0x080094ac
 800559c:	080094ac 	.word	0x080094ac
 80055a0:	080094ac 	.word	0x080094ac
 80055a4:	080094b0 	.word	0x080094b0

080055a8 <memset>:
 80055a8:	4402      	add	r2, r0
 80055aa:	4603      	mov	r3, r0
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d100      	bne.n	80055b2 <memset+0xa>
 80055b0:	4770      	bx	lr
 80055b2:	f803 1b01 	strb.w	r1, [r3], #1
 80055b6:	e7f9      	b.n	80055ac <memset+0x4>

080055b8 <__cvt>:
 80055b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055bc:	ec55 4b10 	vmov	r4, r5, d0
 80055c0:	2d00      	cmp	r5, #0
 80055c2:	460e      	mov	r6, r1
 80055c4:	4619      	mov	r1, r3
 80055c6:	462b      	mov	r3, r5
 80055c8:	bfbb      	ittet	lt
 80055ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80055ce:	461d      	movlt	r5, r3
 80055d0:	2300      	movge	r3, #0
 80055d2:	232d      	movlt	r3, #45	; 0x2d
 80055d4:	700b      	strb	r3, [r1, #0]
 80055d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80055dc:	4691      	mov	r9, r2
 80055de:	f023 0820 	bic.w	r8, r3, #32
 80055e2:	bfbc      	itt	lt
 80055e4:	4622      	movlt	r2, r4
 80055e6:	4614      	movlt	r4, r2
 80055e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80055ec:	d005      	beq.n	80055fa <__cvt+0x42>
 80055ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80055f2:	d100      	bne.n	80055f6 <__cvt+0x3e>
 80055f4:	3601      	adds	r6, #1
 80055f6:	2102      	movs	r1, #2
 80055f8:	e000      	b.n	80055fc <__cvt+0x44>
 80055fa:	2103      	movs	r1, #3
 80055fc:	ab03      	add	r3, sp, #12
 80055fe:	9301      	str	r3, [sp, #4]
 8005600:	ab02      	add	r3, sp, #8
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	ec45 4b10 	vmov	d0, r4, r5
 8005608:	4653      	mov	r3, sl
 800560a:	4632      	mov	r2, r6
 800560c:	f000 fd98 	bl	8006140 <_dtoa_r>
 8005610:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005614:	4607      	mov	r7, r0
 8005616:	d102      	bne.n	800561e <__cvt+0x66>
 8005618:	f019 0f01 	tst.w	r9, #1
 800561c:	d022      	beq.n	8005664 <__cvt+0xac>
 800561e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005622:	eb07 0906 	add.w	r9, r7, r6
 8005626:	d110      	bne.n	800564a <__cvt+0x92>
 8005628:	783b      	ldrb	r3, [r7, #0]
 800562a:	2b30      	cmp	r3, #48	; 0x30
 800562c:	d10a      	bne.n	8005644 <__cvt+0x8c>
 800562e:	2200      	movs	r2, #0
 8005630:	2300      	movs	r3, #0
 8005632:	4620      	mov	r0, r4
 8005634:	4629      	mov	r1, r5
 8005636:	f7fb fa67 	bl	8000b08 <__aeabi_dcmpeq>
 800563a:	b918      	cbnz	r0, 8005644 <__cvt+0x8c>
 800563c:	f1c6 0601 	rsb	r6, r6, #1
 8005640:	f8ca 6000 	str.w	r6, [sl]
 8005644:	f8da 3000 	ldr.w	r3, [sl]
 8005648:	4499      	add	r9, r3
 800564a:	2200      	movs	r2, #0
 800564c:	2300      	movs	r3, #0
 800564e:	4620      	mov	r0, r4
 8005650:	4629      	mov	r1, r5
 8005652:	f7fb fa59 	bl	8000b08 <__aeabi_dcmpeq>
 8005656:	b108      	cbz	r0, 800565c <__cvt+0xa4>
 8005658:	f8cd 900c 	str.w	r9, [sp, #12]
 800565c:	2230      	movs	r2, #48	; 0x30
 800565e:	9b03      	ldr	r3, [sp, #12]
 8005660:	454b      	cmp	r3, r9
 8005662:	d307      	bcc.n	8005674 <__cvt+0xbc>
 8005664:	9b03      	ldr	r3, [sp, #12]
 8005666:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005668:	1bdb      	subs	r3, r3, r7
 800566a:	4638      	mov	r0, r7
 800566c:	6013      	str	r3, [r2, #0]
 800566e:	b004      	add	sp, #16
 8005670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005674:	1c59      	adds	r1, r3, #1
 8005676:	9103      	str	r1, [sp, #12]
 8005678:	701a      	strb	r2, [r3, #0]
 800567a:	e7f0      	b.n	800565e <__cvt+0xa6>

0800567c <__exponent>:
 800567c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800567e:	4603      	mov	r3, r0
 8005680:	2900      	cmp	r1, #0
 8005682:	bfb8      	it	lt
 8005684:	4249      	neglt	r1, r1
 8005686:	f803 2b02 	strb.w	r2, [r3], #2
 800568a:	bfb4      	ite	lt
 800568c:	222d      	movlt	r2, #45	; 0x2d
 800568e:	222b      	movge	r2, #43	; 0x2b
 8005690:	2909      	cmp	r1, #9
 8005692:	7042      	strb	r2, [r0, #1]
 8005694:	dd2a      	ble.n	80056ec <__exponent+0x70>
 8005696:	f10d 0407 	add.w	r4, sp, #7
 800569a:	46a4      	mov	ip, r4
 800569c:	270a      	movs	r7, #10
 800569e:	46a6      	mov	lr, r4
 80056a0:	460a      	mov	r2, r1
 80056a2:	fb91 f6f7 	sdiv	r6, r1, r7
 80056a6:	fb07 1516 	mls	r5, r7, r6, r1
 80056aa:	3530      	adds	r5, #48	; 0x30
 80056ac:	2a63      	cmp	r2, #99	; 0x63
 80056ae:	f104 34ff 	add.w	r4, r4, #4294967295
 80056b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80056b6:	4631      	mov	r1, r6
 80056b8:	dcf1      	bgt.n	800569e <__exponent+0x22>
 80056ba:	3130      	adds	r1, #48	; 0x30
 80056bc:	f1ae 0502 	sub.w	r5, lr, #2
 80056c0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80056c4:	1c44      	adds	r4, r0, #1
 80056c6:	4629      	mov	r1, r5
 80056c8:	4561      	cmp	r1, ip
 80056ca:	d30a      	bcc.n	80056e2 <__exponent+0x66>
 80056cc:	f10d 0209 	add.w	r2, sp, #9
 80056d0:	eba2 020e 	sub.w	r2, r2, lr
 80056d4:	4565      	cmp	r5, ip
 80056d6:	bf88      	it	hi
 80056d8:	2200      	movhi	r2, #0
 80056da:	4413      	add	r3, r2
 80056dc:	1a18      	subs	r0, r3, r0
 80056de:	b003      	add	sp, #12
 80056e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056e6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80056ea:	e7ed      	b.n	80056c8 <__exponent+0x4c>
 80056ec:	2330      	movs	r3, #48	; 0x30
 80056ee:	3130      	adds	r1, #48	; 0x30
 80056f0:	7083      	strb	r3, [r0, #2]
 80056f2:	70c1      	strb	r1, [r0, #3]
 80056f4:	1d03      	adds	r3, r0, #4
 80056f6:	e7f1      	b.n	80056dc <__exponent+0x60>

080056f8 <_printf_float>:
 80056f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056fc:	ed2d 8b02 	vpush	{d8}
 8005700:	b08d      	sub	sp, #52	; 0x34
 8005702:	460c      	mov	r4, r1
 8005704:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005708:	4616      	mov	r6, r2
 800570a:	461f      	mov	r7, r3
 800570c:	4605      	mov	r5, r0
 800570e:	f001 fcbd 	bl	800708c <_localeconv_r>
 8005712:	f8d0 a000 	ldr.w	sl, [r0]
 8005716:	4650      	mov	r0, sl
 8005718:	f7fa fd7a 	bl	8000210 <strlen>
 800571c:	2300      	movs	r3, #0
 800571e:	930a      	str	r3, [sp, #40]	; 0x28
 8005720:	6823      	ldr	r3, [r4, #0]
 8005722:	9305      	str	r3, [sp, #20]
 8005724:	f8d8 3000 	ldr.w	r3, [r8]
 8005728:	f894 b018 	ldrb.w	fp, [r4, #24]
 800572c:	3307      	adds	r3, #7
 800572e:	f023 0307 	bic.w	r3, r3, #7
 8005732:	f103 0208 	add.w	r2, r3, #8
 8005736:	f8c8 2000 	str.w	r2, [r8]
 800573a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005742:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005746:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800574a:	9307      	str	r3, [sp, #28]
 800574c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005750:	ee08 0a10 	vmov	s16, r0
 8005754:	4b9f      	ldr	r3, [pc, #636]	; (80059d4 <_printf_float+0x2dc>)
 8005756:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800575a:	f04f 32ff 	mov.w	r2, #4294967295
 800575e:	f7fb fa05 	bl	8000b6c <__aeabi_dcmpun>
 8005762:	bb88      	cbnz	r0, 80057c8 <_printf_float+0xd0>
 8005764:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005768:	4b9a      	ldr	r3, [pc, #616]	; (80059d4 <_printf_float+0x2dc>)
 800576a:	f04f 32ff 	mov.w	r2, #4294967295
 800576e:	f7fb f9df 	bl	8000b30 <__aeabi_dcmple>
 8005772:	bb48      	cbnz	r0, 80057c8 <_printf_float+0xd0>
 8005774:	2200      	movs	r2, #0
 8005776:	2300      	movs	r3, #0
 8005778:	4640      	mov	r0, r8
 800577a:	4649      	mov	r1, r9
 800577c:	f7fb f9ce 	bl	8000b1c <__aeabi_dcmplt>
 8005780:	b110      	cbz	r0, 8005788 <_printf_float+0x90>
 8005782:	232d      	movs	r3, #45	; 0x2d
 8005784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005788:	4b93      	ldr	r3, [pc, #588]	; (80059d8 <_printf_float+0x2e0>)
 800578a:	4894      	ldr	r0, [pc, #592]	; (80059dc <_printf_float+0x2e4>)
 800578c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005790:	bf94      	ite	ls
 8005792:	4698      	movls	r8, r3
 8005794:	4680      	movhi	r8, r0
 8005796:	2303      	movs	r3, #3
 8005798:	6123      	str	r3, [r4, #16]
 800579a:	9b05      	ldr	r3, [sp, #20]
 800579c:	f023 0204 	bic.w	r2, r3, #4
 80057a0:	6022      	str	r2, [r4, #0]
 80057a2:	f04f 0900 	mov.w	r9, #0
 80057a6:	9700      	str	r7, [sp, #0]
 80057a8:	4633      	mov	r3, r6
 80057aa:	aa0b      	add	r2, sp, #44	; 0x2c
 80057ac:	4621      	mov	r1, r4
 80057ae:	4628      	mov	r0, r5
 80057b0:	f000 f9d8 	bl	8005b64 <_printf_common>
 80057b4:	3001      	adds	r0, #1
 80057b6:	f040 8090 	bne.w	80058da <_printf_float+0x1e2>
 80057ba:	f04f 30ff 	mov.w	r0, #4294967295
 80057be:	b00d      	add	sp, #52	; 0x34
 80057c0:	ecbd 8b02 	vpop	{d8}
 80057c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057c8:	4642      	mov	r2, r8
 80057ca:	464b      	mov	r3, r9
 80057cc:	4640      	mov	r0, r8
 80057ce:	4649      	mov	r1, r9
 80057d0:	f7fb f9cc 	bl	8000b6c <__aeabi_dcmpun>
 80057d4:	b140      	cbz	r0, 80057e8 <_printf_float+0xf0>
 80057d6:	464b      	mov	r3, r9
 80057d8:	2b00      	cmp	r3, #0
 80057da:	bfbc      	itt	lt
 80057dc:	232d      	movlt	r3, #45	; 0x2d
 80057de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80057e2:	487f      	ldr	r0, [pc, #508]	; (80059e0 <_printf_float+0x2e8>)
 80057e4:	4b7f      	ldr	r3, [pc, #508]	; (80059e4 <_printf_float+0x2ec>)
 80057e6:	e7d1      	b.n	800578c <_printf_float+0x94>
 80057e8:	6863      	ldr	r3, [r4, #4]
 80057ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80057ee:	9206      	str	r2, [sp, #24]
 80057f0:	1c5a      	adds	r2, r3, #1
 80057f2:	d13f      	bne.n	8005874 <_printf_float+0x17c>
 80057f4:	2306      	movs	r3, #6
 80057f6:	6063      	str	r3, [r4, #4]
 80057f8:	9b05      	ldr	r3, [sp, #20]
 80057fa:	6861      	ldr	r1, [r4, #4]
 80057fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005800:	2300      	movs	r3, #0
 8005802:	9303      	str	r3, [sp, #12]
 8005804:	ab0a      	add	r3, sp, #40	; 0x28
 8005806:	e9cd b301 	strd	fp, r3, [sp, #4]
 800580a:	ab09      	add	r3, sp, #36	; 0x24
 800580c:	ec49 8b10 	vmov	d0, r8, r9
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	6022      	str	r2, [r4, #0]
 8005814:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005818:	4628      	mov	r0, r5
 800581a:	f7ff fecd 	bl	80055b8 <__cvt>
 800581e:	9b06      	ldr	r3, [sp, #24]
 8005820:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005822:	2b47      	cmp	r3, #71	; 0x47
 8005824:	4680      	mov	r8, r0
 8005826:	d108      	bne.n	800583a <_printf_float+0x142>
 8005828:	1cc8      	adds	r0, r1, #3
 800582a:	db02      	blt.n	8005832 <_printf_float+0x13a>
 800582c:	6863      	ldr	r3, [r4, #4]
 800582e:	4299      	cmp	r1, r3
 8005830:	dd41      	ble.n	80058b6 <_printf_float+0x1be>
 8005832:	f1ab 0b02 	sub.w	fp, fp, #2
 8005836:	fa5f fb8b 	uxtb.w	fp, fp
 800583a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800583e:	d820      	bhi.n	8005882 <_printf_float+0x18a>
 8005840:	3901      	subs	r1, #1
 8005842:	465a      	mov	r2, fp
 8005844:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005848:	9109      	str	r1, [sp, #36]	; 0x24
 800584a:	f7ff ff17 	bl	800567c <__exponent>
 800584e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005850:	1813      	adds	r3, r2, r0
 8005852:	2a01      	cmp	r2, #1
 8005854:	4681      	mov	r9, r0
 8005856:	6123      	str	r3, [r4, #16]
 8005858:	dc02      	bgt.n	8005860 <_printf_float+0x168>
 800585a:	6822      	ldr	r2, [r4, #0]
 800585c:	07d2      	lsls	r2, r2, #31
 800585e:	d501      	bpl.n	8005864 <_printf_float+0x16c>
 8005860:	3301      	adds	r3, #1
 8005862:	6123      	str	r3, [r4, #16]
 8005864:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005868:	2b00      	cmp	r3, #0
 800586a:	d09c      	beq.n	80057a6 <_printf_float+0xae>
 800586c:	232d      	movs	r3, #45	; 0x2d
 800586e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005872:	e798      	b.n	80057a6 <_printf_float+0xae>
 8005874:	9a06      	ldr	r2, [sp, #24]
 8005876:	2a47      	cmp	r2, #71	; 0x47
 8005878:	d1be      	bne.n	80057f8 <_printf_float+0x100>
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1bc      	bne.n	80057f8 <_printf_float+0x100>
 800587e:	2301      	movs	r3, #1
 8005880:	e7b9      	b.n	80057f6 <_printf_float+0xfe>
 8005882:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005886:	d118      	bne.n	80058ba <_printf_float+0x1c2>
 8005888:	2900      	cmp	r1, #0
 800588a:	6863      	ldr	r3, [r4, #4]
 800588c:	dd0b      	ble.n	80058a6 <_printf_float+0x1ae>
 800588e:	6121      	str	r1, [r4, #16]
 8005890:	b913      	cbnz	r3, 8005898 <_printf_float+0x1a0>
 8005892:	6822      	ldr	r2, [r4, #0]
 8005894:	07d0      	lsls	r0, r2, #31
 8005896:	d502      	bpl.n	800589e <_printf_float+0x1a6>
 8005898:	3301      	adds	r3, #1
 800589a:	440b      	add	r3, r1
 800589c:	6123      	str	r3, [r4, #16]
 800589e:	65a1      	str	r1, [r4, #88]	; 0x58
 80058a0:	f04f 0900 	mov.w	r9, #0
 80058a4:	e7de      	b.n	8005864 <_printf_float+0x16c>
 80058a6:	b913      	cbnz	r3, 80058ae <_printf_float+0x1b6>
 80058a8:	6822      	ldr	r2, [r4, #0]
 80058aa:	07d2      	lsls	r2, r2, #31
 80058ac:	d501      	bpl.n	80058b2 <_printf_float+0x1ba>
 80058ae:	3302      	adds	r3, #2
 80058b0:	e7f4      	b.n	800589c <_printf_float+0x1a4>
 80058b2:	2301      	movs	r3, #1
 80058b4:	e7f2      	b.n	800589c <_printf_float+0x1a4>
 80058b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80058ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058bc:	4299      	cmp	r1, r3
 80058be:	db05      	blt.n	80058cc <_printf_float+0x1d4>
 80058c0:	6823      	ldr	r3, [r4, #0]
 80058c2:	6121      	str	r1, [r4, #16]
 80058c4:	07d8      	lsls	r0, r3, #31
 80058c6:	d5ea      	bpl.n	800589e <_printf_float+0x1a6>
 80058c8:	1c4b      	adds	r3, r1, #1
 80058ca:	e7e7      	b.n	800589c <_printf_float+0x1a4>
 80058cc:	2900      	cmp	r1, #0
 80058ce:	bfd4      	ite	le
 80058d0:	f1c1 0202 	rsble	r2, r1, #2
 80058d4:	2201      	movgt	r2, #1
 80058d6:	4413      	add	r3, r2
 80058d8:	e7e0      	b.n	800589c <_printf_float+0x1a4>
 80058da:	6823      	ldr	r3, [r4, #0]
 80058dc:	055a      	lsls	r2, r3, #21
 80058de:	d407      	bmi.n	80058f0 <_printf_float+0x1f8>
 80058e0:	6923      	ldr	r3, [r4, #16]
 80058e2:	4642      	mov	r2, r8
 80058e4:	4631      	mov	r1, r6
 80058e6:	4628      	mov	r0, r5
 80058e8:	47b8      	blx	r7
 80058ea:	3001      	adds	r0, #1
 80058ec:	d12c      	bne.n	8005948 <_printf_float+0x250>
 80058ee:	e764      	b.n	80057ba <_printf_float+0xc2>
 80058f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80058f4:	f240 80e0 	bls.w	8005ab8 <_printf_float+0x3c0>
 80058f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80058fc:	2200      	movs	r2, #0
 80058fe:	2300      	movs	r3, #0
 8005900:	f7fb f902 	bl	8000b08 <__aeabi_dcmpeq>
 8005904:	2800      	cmp	r0, #0
 8005906:	d034      	beq.n	8005972 <_printf_float+0x27a>
 8005908:	4a37      	ldr	r2, [pc, #220]	; (80059e8 <_printf_float+0x2f0>)
 800590a:	2301      	movs	r3, #1
 800590c:	4631      	mov	r1, r6
 800590e:	4628      	mov	r0, r5
 8005910:	47b8      	blx	r7
 8005912:	3001      	adds	r0, #1
 8005914:	f43f af51 	beq.w	80057ba <_printf_float+0xc2>
 8005918:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800591c:	429a      	cmp	r2, r3
 800591e:	db02      	blt.n	8005926 <_printf_float+0x22e>
 8005920:	6823      	ldr	r3, [r4, #0]
 8005922:	07d8      	lsls	r0, r3, #31
 8005924:	d510      	bpl.n	8005948 <_printf_float+0x250>
 8005926:	ee18 3a10 	vmov	r3, s16
 800592a:	4652      	mov	r2, sl
 800592c:	4631      	mov	r1, r6
 800592e:	4628      	mov	r0, r5
 8005930:	47b8      	blx	r7
 8005932:	3001      	adds	r0, #1
 8005934:	f43f af41 	beq.w	80057ba <_printf_float+0xc2>
 8005938:	f04f 0800 	mov.w	r8, #0
 800593c:	f104 091a 	add.w	r9, r4, #26
 8005940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005942:	3b01      	subs	r3, #1
 8005944:	4543      	cmp	r3, r8
 8005946:	dc09      	bgt.n	800595c <_printf_float+0x264>
 8005948:	6823      	ldr	r3, [r4, #0]
 800594a:	079b      	lsls	r3, r3, #30
 800594c:	f100 8105 	bmi.w	8005b5a <_printf_float+0x462>
 8005950:	68e0      	ldr	r0, [r4, #12]
 8005952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005954:	4298      	cmp	r0, r3
 8005956:	bfb8      	it	lt
 8005958:	4618      	movlt	r0, r3
 800595a:	e730      	b.n	80057be <_printf_float+0xc6>
 800595c:	2301      	movs	r3, #1
 800595e:	464a      	mov	r2, r9
 8005960:	4631      	mov	r1, r6
 8005962:	4628      	mov	r0, r5
 8005964:	47b8      	blx	r7
 8005966:	3001      	adds	r0, #1
 8005968:	f43f af27 	beq.w	80057ba <_printf_float+0xc2>
 800596c:	f108 0801 	add.w	r8, r8, #1
 8005970:	e7e6      	b.n	8005940 <_printf_float+0x248>
 8005972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005974:	2b00      	cmp	r3, #0
 8005976:	dc39      	bgt.n	80059ec <_printf_float+0x2f4>
 8005978:	4a1b      	ldr	r2, [pc, #108]	; (80059e8 <_printf_float+0x2f0>)
 800597a:	2301      	movs	r3, #1
 800597c:	4631      	mov	r1, r6
 800597e:	4628      	mov	r0, r5
 8005980:	47b8      	blx	r7
 8005982:	3001      	adds	r0, #1
 8005984:	f43f af19 	beq.w	80057ba <_printf_float+0xc2>
 8005988:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800598c:	4313      	orrs	r3, r2
 800598e:	d102      	bne.n	8005996 <_printf_float+0x29e>
 8005990:	6823      	ldr	r3, [r4, #0]
 8005992:	07d9      	lsls	r1, r3, #31
 8005994:	d5d8      	bpl.n	8005948 <_printf_float+0x250>
 8005996:	ee18 3a10 	vmov	r3, s16
 800599a:	4652      	mov	r2, sl
 800599c:	4631      	mov	r1, r6
 800599e:	4628      	mov	r0, r5
 80059a0:	47b8      	blx	r7
 80059a2:	3001      	adds	r0, #1
 80059a4:	f43f af09 	beq.w	80057ba <_printf_float+0xc2>
 80059a8:	f04f 0900 	mov.w	r9, #0
 80059ac:	f104 0a1a 	add.w	sl, r4, #26
 80059b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059b2:	425b      	negs	r3, r3
 80059b4:	454b      	cmp	r3, r9
 80059b6:	dc01      	bgt.n	80059bc <_printf_float+0x2c4>
 80059b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059ba:	e792      	b.n	80058e2 <_printf_float+0x1ea>
 80059bc:	2301      	movs	r3, #1
 80059be:	4652      	mov	r2, sl
 80059c0:	4631      	mov	r1, r6
 80059c2:	4628      	mov	r0, r5
 80059c4:	47b8      	blx	r7
 80059c6:	3001      	adds	r0, #1
 80059c8:	f43f aef7 	beq.w	80057ba <_printf_float+0xc2>
 80059cc:	f109 0901 	add.w	r9, r9, #1
 80059d0:	e7ee      	b.n	80059b0 <_printf_float+0x2b8>
 80059d2:	bf00      	nop
 80059d4:	7fefffff 	.word	0x7fefffff
 80059d8:	08008cfc 	.word	0x08008cfc
 80059dc:	08008d00 	.word	0x08008d00
 80059e0:	08008d08 	.word	0x08008d08
 80059e4:	08008d04 	.word	0x08008d04
 80059e8:	08008d0c 	.word	0x08008d0c
 80059ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80059f0:	429a      	cmp	r2, r3
 80059f2:	bfa8      	it	ge
 80059f4:	461a      	movge	r2, r3
 80059f6:	2a00      	cmp	r2, #0
 80059f8:	4691      	mov	r9, r2
 80059fa:	dc37      	bgt.n	8005a6c <_printf_float+0x374>
 80059fc:	f04f 0b00 	mov.w	fp, #0
 8005a00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a04:	f104 021a 	add.w	r2, r4, #26
 8005a08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a0a:	9305      	str	r3, [sp, #20]
 8005a0c:	eba3 0309 	sub.w	r3, r3, r9
 8005a10:	455b      	cmp	r3, fp
 8005a12:	dc33      	bgt.n	8005a7c <_printf_float+0x384>
 8005a14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	db3b      	blt.n	8005a94 <_printf_float+0x39c>
 8005a1c:	6823      	ldr	r3, [r4, #0]
 8005a1e:	07da      	lsls	r2, r3, #31
 8005a20:	d438      	bmi.n	8005a94 <_printf_float+0x39c>
 8005a22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a24:	9a05      	ldr	r2, [sp, #20]
 8005a26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a28:	1a9a      	subs	r2, r3, r2
 8005a2a:	eba3 0901 	sub.w	r9, r3, r1
 8005a2e:	4591      	cmp	r9, r2
 8005a30:	bfa8      	it	ge
 8005a32:	4691      	movge	r9, r2
 8005a34:	f1b9 0f00 	cmp.w	r9, #0
 8005a38:	dc35      	bgt.n	8005aa6 <_printf_float+0x3ae>
 8005a3a:	f04f 0800 	mov.w	r8, #0
 8005a3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a42:	f104 0a1a 	add.w	sl, r4, #26
 8005a46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a4a:	1a9b      	subs	r3, r3, r2
 8005a4c:	eba3 0309 	sub.w	r3, r3, r9
 8005a50:	4543      	cmp	r3, r8
 8005a52:	f77f af79 	ble.w	8005948 <_printf_float+0x250>
 8005a56:	2301      	movs	r3, #1
 8005a58:	4652      	mov	r2, sl
 8005a5a:	4631      	mov	r1, r6
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	47b8      	blx	r7
 8005a60:	3001      	adds	r0, #1
 8005a62:	f43f aeaa 	beq.w	80057ba <_printf_float+0xc2>
 8005a66:	f108 0801 	add.w	r8, r8, #1
 8005a6a:	e7ec      	b.n	8005a46 <_printf_float+0x34e>
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	4631      	mov	r1, r6
 8005a70:	4642      	mov	r2, r8
 8005a72:	4628      	mov	r0, r5
 8005a74:	47b8      	blx	r7
 8005a76:	3001      	adds	r0, #1
 8005a78:	d1c0      	bne.n	80059fc <_printf_float+0x304>
 8005a7a:	e69e      	b.n	80057ba <_printf_float+0xc2>
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	4631      	mov	r1, r6
 8005a80:	4628      	mov	r0, r5
 8005a82:	9205      	str	r2, [sp, #20]
 8005a84:	47b8      	blx	r7
 8005a86:	3001      	adds	r0, #1
 8005a88:	f43f ae97 	beq.w	80057ba <_printf_float+0xc2>
 8005a8c:	9a05      	ldr	r2, [sp, #20]
 8005a8e:	f10b 0b01 	add.w	fp, fp, #1
 8005a92:	e7b9      	b.n	8005a08 <_printf_float+0x310>
 8005a94:	ee18 3a10 	vmov	r3, s16
 8005a98:	4652      	mov	r2, sl
 8005a9a:	4631      	mov	r1, r6
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	47b8      	blx	r7
 8005aa0:	3001      	adds	r0, #1
 8005aa2:	d1be      	bne.n	8005a22 <_printf_float+0x32a>
 8005aa4:	e689      	b.n	80057ba <_printf_float+0xc2>
 8005aa6:	9a05      	ldr	r2, [sp, #20]
 8005aa8:	464b      	mov	r3, r9
 8005aaa:	4442      	add	r2, r8
 8005aac:	4631      	mov	r1, r6
 8005aae:	4628      	mov	r0, r5
 8005ab0:	47b8      	blx	r7
 8005ab2:	3001      	adds	r0, #1
 8005ab4:	d1c1      	bne.n	8005a3a <_printf_float+0x342>
 8005ab6:	e680      	b.n	80057ba <_printf_float+0xc2>
 8005ab8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005aba:	2a01      	cmp	r2, #1
 8005abc:	dc01      	bgt.n	8005ac2 <_printf_float+0x3ca>
 8005abe:	07db      	lsls	r3, r3, #31
 8005ac0:	d538      	bpl.n	8005b34 <_printf_float+0x43c>
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	4642      	mov	r2, r8
 8005ac6:	4631      	mov	r1, r6
 8005ac8:	4628      	mov	r0, r5
 8005aca:	47b8      	blx	r7
 8005acc:	3001      	adds	r0, #1
 8005ace:	f43f ae74 	beq.w	80057ba <_printf_float+0xc2>
 8005ad2:	ee18 3a10 	vmov	r3, s16
 8005ad6:	4652      	mov	r2, sl
 8005ad8:	4631      	mov	r1, r6
 8005ada:	4628      	mov	r0, r5
 8005adc:	47b8      	blx	r7
 8005ade:	3001      	adds	r0, #1
 8005ae0:	f43f ae6b 	beq.w	80057ba <_printf_float+0xc2>
 8005ae4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ae8:	2200      	movs	r2, #0
 8005aea:	2300      	movs	r3, #0
 8005aec:	f7fb f80c 	bl	8000b08 <__aeabi_dcmpeq>
 8005af0:	b9d8      	cbnz	r0, 8005b2a <_printf_float+0x432>
 8005af2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005af4:	f108 0201 	add.w	r2, r8, #1
 8005af8:	3b01      	subs	r3, #1
 8005afa:	4631      	mov	r1, r6
 8005afc:	4628      	mov	r0, r5
 8005afe:	47b8      	blx	r7
 8005b00:	3001      	adds	r0, #1
 8005b02:	d10e      	bne.n	8005b22 <_printf_float+0x42a>
 8005b04:	e659      	b.n	80057ba <_printf_float+0xc2>
 8005b06:	2301      	movs	r3, #1
 8005b08:	4652      	mov	r2, sl
 8005b0a:	4631      	mov	r1, r6
 8005b0c:	4628      	mov	r0, r5
 8005b0e:	47b8      	blx	r7
 8005b10:	3001      	adds	r0, #1
 8005b12:	f43f ae52 	beq.w	80057ba <_printf_float+0xc2>
 8005b16:	f108 0801 	add.w	r8, r8, #1
 8005b1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	4543      	cmp	r3, r8
 8005b20:	dcf1      	bgt.n	8005b06 <_printf_float+0x40e>
 8005b22:	464b      	mov	r3, r9
 8005b24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005b28:	e6dc      	b.n	80058e4 <_printf_float+0x1ec>
 8005b2a:	f04f 0800 	mov.w	r8, #0
 8005b2e:	f104 0a1a 	add.w	sl, r4, #26
 8005b32:	e7f2      	b.n	8005b1a <_printf_float+0x422>
 8005b34:	2301      	movs	r3, #1
 8005b36:	4642      	mov	r2, r8
 8005b38:	e7df      	b.n	8005afa <_printf_float+0x402>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	464a      	mov	r2, r9
 8005b3e:	4631      	mov	r1, r6
 8005b40:	4628      	mov	r0, r5
 8005b42:	47b8      	blx	r7
 8005b44:	3001      	adds	r0, #1
 8005b46:	f43f ae38 	beq.w	80057ba <_printf_float+0xc2>
 8005b4a:	f108 0801 	add.w	r8, r8, #1
 8005b4e:	68e3      	ldr	r3, [r4, #12]
 8005b50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b52:	1a5b      	subs	r3, r3, r1
 8005b54:	4543      	cmp	r3, r8
 8005b56:	dcf0      	bgt.n	8005b3a <_printf_float+0x442>
 8005b58:	e6fa      	b.n	8005950 <_printf_float+0x258>
 8005b5a:	f04f 0800 	mov.w	r8, #0
 8005b5e:	f104 0919 	add.w	r9, r4, #25
 8005b62:	e7f4      	b.n	8005b4e <_printf_float+0x456>

08005b64 <_printf_common>:
 8005b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b68:	4616      	mov	r6, r2
 8005b6a:	4699      	mov	r9, r3
 8005b6c:	688a      	ldr	r2, [r1, #8]
 8005b6e:	690b      	ldr	r3, [r1, #16]
 8005b70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b74:	4293      	cmp	r3, r2
 8005b76:	bfb8      	it	lt
 8005b78:	4613      	movlt	r3, r2
 8005b7a:	6033      	str	r3, [r6, #0]
 8005b7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b80:	4607      	mov	r7, r0
 8005b82:	460c      	mov	r4, r1
 8005b84:	b10a      	cbz	r2, 8005b8a <_printf_common+0x26>
 8005b86:	3301      	adds	r3, #1
 8005b88:	6033      	str	r3, [r6, #0]
 8005b8a:	6823      	ldr	r3, [r4, #0]
 8005b8c:	0699      	lsls	r1, r3, #26
 8005b8e:	bf42      	ittt	mi
 8005b90:	6833      	ldrmi	r3, [r6, #0]
 8005b92:	3302      	addmi	r3, #2
 8005b94:	6033      	strmi	r3, [r6, #0]
 8005b96:	6825      	ldr	r5, [r4, #0]
 8005b98:	f015 0506 	ands.w	r5, r5, #6
 8005b9c:	d106      	bne.n	8005bac <_printf_common+0x48>
 8005b9e:	f104 0a19 	add.w	sl, r4, #25
 8005ba2:	68e3      	ldr	r3, [r4, #12]
 8005ba4:	6832      	ldr	r2, [r6, #0]
 8005ba6:	1a9b      	subs	r3, r3, r2
 8005ba8:	42ab      	cmp	r3, r5
 8005baa:	dc26      	bgt.n	8005bfa <_printf_common+0x96>
 8005bac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005bb0:	1e13      	subs	r3, r2, #0
 8005bb2:	6822      	ldr	r2, [r4, #0]
 8005bb4:	bf18      	it	ne
 8005bb6:	2301      	movne	r3, #1
 8005bb8:	0692      	lsls	r2, r2, #26
 8005bba:	d42b      	bmi.n	8005c14 <_printf_common+0xb0>
 8005bbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bc0:	4649      	mov	r1, r9
 8005bc2:	4638      	mov	r0, r7
 8005bc4:	47c0      	blx	r8
 8005bc6:	3001      	adds	r0, #1
 8005bc8:	d01e      	beq.n	8005c08 <_printf_common+0xa4>
 8005bca:	6823      	ldr	r3, [r4, #0]
 8005bcc:	68e5      	ldr	r5, [r4, #12]
 8005bce:	6832      	ldr	r2, [r6, #0]
 8005bd0:	f003 0306 	and.w	r3, r3, #6
 8005bd4:	2b04      	cmp	r3, #4
 8005bd6:	bf08      	it	eq
 8005bd8:	1aad      	subeq	r5, r5, r2
 8005bda:	68a3      	ldr	r3, [r4, #8]
 8005bdc:	6922      	ldr	r2, [r4, #16]
 8005bde:	bf0c      	ite	eq
 8005be0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005be4:	2500      	movne	r5, #0
 8005be6:	4293      	cmp	r3, r2
 8005be8:	bfc4      	itt	gt
 8005bea:	1a9b      	subgt	r3, r3, r2
 8005bec:	18ed      	addgt	r5, r5, r3
 8005bee:	2600      	movs	r6, #0
 8005bf0:	341a      	adds	r4, #26
 8005bf2:	42b5      	cmp	r5, r6
 8005bf4:	d11a      	bne.n	8005c2c <_printf_common+0xc8>
 8005bf6:	2000      	movs	r0, #0
 8005bf8:	e008      	b.n	8005c0c <_printf_common+0xa8>
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	4652      	mov	r2, sl
 8005bfe:	4649      	mov	r1, r9
 8005c00:	4638      	mov	r0, r7
 8005c02:	47c0      	blx	r8
 8005c04:	3001      	adds	r0, #1
 8005c06:	d103      	bne.n	8005c10 <_printf_common+0xac>
 8005c08:	f04f 30ff 	mov.w	r0, #4294967295
 8005c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c10:	3501      	adds	r5, #1
 8005c12:	e7c6      	b.n	8005ba2 <_printf_common+0x3e>
 8005c14:	18e1      	adds	r1, r4, r3
 8005c16:	1c5a      	adds	r2, r3, #1
 8005c18:	2030      	movs	r0, #48	; 0x30
 8005c1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c1e:	4422      	add	r2, r4
 8005c20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c28:	3302      	adds	r3, #2
 8005c2a:	e7c7      	b.n	8005bbc <_printf_common+0x58>
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	4622      	mov	r2, r4
 8005c30:	4649      	mov	r1, r9
 8005c32:	4638      	mov	r0, r7
 8005c34:	47c0      	blx	r8
 8005c36:	3001      	adds	r0, #1
 8005c38:	d0e6      	beq.n	8005c08 <_printf_common+0xa4>
 8005c3a:	3601      	adds	r6, #1
 8005c3c:	e7d9      	b.n	8005bf2 <_printf_common+0x8e>
	...

08005c40 <_printf_i>:
 8005c40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c44:	7e0f      	ldrb	r7, [r1, #24]
 8005c46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c48:	2f78      	cmp	r7, #120	; 0x78
 8005c4a:	4691      	mov	r9, r2
 8005c4c:	4680      	mov	r8, r0
 8005c4e:	460c      	mov	r4, r1
 8005c50:	469a      	mov	sl, r3
 8005c52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c56:	d807      	bhi.n	8005c68 <_printf_i+0x28>
 8005c58:	2f62      	cmp	r7, #98	; 0x62
 8005c5a:	d80a      	bhi.n	8005c72 <_printf_i+0x32>
 8005c5c:	2f00      	cmp	r7, #0
 8005c5e:	f000 80d8 	beq.w	8005e12 <_printf_i+0x1d2>
 8005c62:	2f58      	cmp	r7, #88	; 0x58
 8005c64:	f000 80a3 	beq.w	8005dae <_printf_i+0x16e>
 8005c68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c70:	e03a      	b.n	8005ce8 <_printf_i+0xa8>
 8005c72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c76:	2b15      	cmp	r3, #21
 8005c78:	d8f6      	bhi.n	8005c68 <_printf_i+0x28>
 8005c7a:	a101      	add	r1, pc, #4	; (adr r1, 8005c80 <_printf_i+0x40>)
 8005c7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c80:	08005cd9 	.word	0x08005cd9
 8005c84:	08005ced 	.word	0x08005ced
 8005c88:	08005c69 	.word	0x08005c69
 8005c8c:	08005c69 	.word	0x08005c69
 8005c90:	08005c69 	.word	0x08005c69
 8005c94:	08005c69 	.word	0x08005c69
 8005c98:	08005ced 	.word	0x08005ced
 8005c9c:	08005c69 	.word	0x08005c69
 8005ca0:	08005c69 	.word	0x08005c69
 8005ca4:	08005c69 	.word	0x08005c69
 8005ca8:	08005c69 	.word	0x08005c69
 8005cac:	08005df9 	.word	0x08005df9
 8005cb0:	08005d1d 	.word	0x08005d1d
 8005cb4:	08005ddb 	.word	0x08005ddb
 8005cb8:	08005c69 	.word	0x08005c69
 8005cbc:	08005c69 	.word	0x08005c69
 8005cc0:	08005e1b 	.word	0x08005e1b
 8005cc4:	08005c69 	.word	0x08005c69
 8005cc8:	08005d1d 	.word	0x08005d1d
 8005ccc:	08005c69 	.word	0x08005c69
 8005cd0:	08005c69 	.word	0x08005c69
 8005cd4:	08005de3 	.word	0x08005de3
 8005cd8:	682b      	ldr	r3, [r5, #0]
 8005cda:	1d1a      	adds	r2, r3, #4
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	602a      	str	r2, [r5, #0]
 8005ce0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ce4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e0a3      	b.n	8005e34 <_printf_i+0x1f4>
 8005cec:	6820      	ldr	r0, [r4, #0]
 8005cee:	6829      	ldr	r1, [r5, #0]
 8005cf0:	0606      	lsls	r6, r0, #24
 8005cf2:	f101 0304 	add.w	r3, r1, #4
 8005cf6:	d50a      	bpl.n	8005d0e <_printf_i+0xce>
 8005cf8:	680e      	ldr	r6, [r1, #0]
 8005cfa:	602b      	str	r3, [r5, #0]
 8005cfc:	2e00      	cmp	r6, #0
 8005cfe:	da03      	bge.n	8005d08 <_printf_i+0xc8>
 8005d00:	232d      	movs	r3, #45	; 0x2d
 8005d02:	4276      	negs	r6, r6
 8005d04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d08:	485e      	ldr	r0, [pc, #376]	; (8005e84 <_printf_i+0x244>)
 8005d0a:	230a      	movs	r3, #10
 8005d0c:	e019      	b.n	8005d42 <_printf_i+0x102>
 8005d0e:	680e      	ldr	r6, [r1, #0]
 8005d10:	602b      	str	r3, [r5, #0]
 8005d12:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d16:	bf18      	it	ne
 8005d18:	b236      	sxthne	r6, r6
 8005d1a:	e7ef      	b.n	8005cfc <_printf_i+0xbc>
 8005d1c:	682b      	ldr	r3, [r5, #0]
 8005d1e:	6820      	ldr	r0, [r4, #0]
 8005d20:	1d19      	adds	r1, r3, #4
 8005d22:	6029      	str	r1, [r5, #0]
 8005d24:	0601      	lsls	r1, r0, #24
 8005d26:	d501      	bpl.n	8005d2c <_printf_i+0xec>
 8005d28:	681e      	ldr	r6, [r3, #0]
 8005d2a:	e002      	b.n	8005d32 <_printf_i+0xf2>
 8005d2c:	0646      	lsls	r6, r0, #25
 8005d2e:	d5fb      	bpl.n	8005d28 <_printf_i+0xe8>
 8005d30:	881e      	ldrh	r6, [r3, #0]
 8005d32:	4854      	ldr	r0, [pc, #336]	; (8005e84 <_printf_i+0x244>)
 8005d34:	2f6f      	cmp	r7, #111	; 0x6f
 8005d36:	bf0c      	ite	eq
 8005d38:	2308      	moveq	r3, #8
 8005d3a:	230a      	movne	r3, #10
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d42:	6865      	ldr	r5, [r4, #4]
 8005d44:	60a5      	str	r5, [r4, #8]
 8005d46:	2d00      	cmp	r5, #0
 8005d48:	bfa2      	ittt	ge
 8005d4a:	6821      	ldrge	r1, [r4, #0]
 8005d4c:	f021 0104 	bicge.w	r1, r1, #4
 8005d50:	6021      	strge	r1, [r4, #0]
 8005d52:	b90e      	cbnz	r6, 8005d58 <_printf_i+0x118>
 8005d54:	2d00      	cmp	r5, #0
 8005d56:	d04d      	beq.n	8005df4 <_printf_i+0x1b4>
 8005d58:	4615      	mov	r5, r2
 8005d5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d5e:	fb03 6711 	mls	r7, r3, r1, r6
 8005d62:	5dc7      	ldrb	r7, [r0, r7]
 8005d64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d68:	4637      	mov	r7, r6
 8005d6a:	42bb      	cmp	r3, r7
 8005d6c:	460e      	mov	r6, r1
 8005d6e:	d9f4      	bls.n	8005d5a <_printf_i+0x11a>
 8005d70:	2b08      	cmp	r3, #8
 8005d72:	d10b      	bne.n	8005d8c <_printf_i+0x14c>
 8005d74:	6823      	ldr	r3, [r4, #0]
 8005d76:	07de      	lsls	r6, r3, #31
 8005d78:	d508      	bpl.n	8005d8c <_printf_i+0x14c>
 8005d7a:	6923      	ldr	r3, [r4, #16]
 8005d7c:	6861      	ldr	r1, [r4, #4]
 8005d7e:	4299      	cmp	r1, r3
 8005d80:	bfde      	ittt	le
 8005d82:	2330      	movle	r3, #48	; 0x30
 8005d84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d8c:	1b52      	subs	r2, r2, r5
 8005d8e:	6122      	str	r2, [r4, #16]
 8005d90:	f8cd a000 	str.w	sl, [sp]
 8005d94:	464b      	mov	r3, r9
 8005d96:	aa03      	add	r2, sp, #12
 8005d98:	4621      	mov	r1, r4
 8005d9a:	4640      	mov	r0, r8
 8005d9c:	f7ff fee2 	bl	8005b64 <_printf_common>
 8005da0:	3001      	adds	r0, #1
 8005da2:	d14c      	bne.n	8005e3e <_printf_i+0x1fe>
 8005da4:	f04f 30ff 	mov.w	r0, #4294967295
 8005da8:	b004      	add	sp, #16
 8005daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dae:	4835      	ldr	r0, [pc, #212]	; (8005e84 <_printf_i+0x244>)
 8005db0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005db4:	6829      	ldr	r1, [r5, #0]
 8005db6:	6823      	ldr	r3, [r4, #0]
 8005db8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005dbc:	6029      	str	r1, [r5, #0]
 8005dbe:	061d      	lsls	r5, r3, #24
 8005dc0:	d514      	bpl.n	8005dec <_printf_i+0x1ac>
 8005dc2:	07df      	lsls	r7, r3, #31
 8005dc4:	bf44      	itt	mi
 8005dc6:	f043 0320 	orrmi.w	r3, r3, #32
 8005dca:	6023      	strmi	r3, [r4, #0]
 8005dcc:	b91e      	cbnz	r6, 8005dd6 <_printf_i+0x196>
 8005dce:	6823      	ldr	r3, [r4, #0]
 8005dd0:	f023 0320 	bic.w	r3, r3, #32
 8005dd4:	6023      	str	r3, [r4, #0]
 8005dd6:	2310      	movs	r3, #16
 8005dd8:	e7b0      	b.n	8005d3c <_printf_i+0xfc>
 8005dda:	6823      	ldr	r3, [r4, #0]
 8005ddc:	f043 0320 	orr.w	r3, r3, #32
 8005de0:	6023      	str	r3, [r4, #0]
 8005de2:	2378      	movs	r3, #120	; 0x78
 8005de4:	4828      	ldr	r0, [pc, #160]	; (8005e88 <_printf_i+0x248>)
 8005de6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005dea:	e7e3      	b.n	8005db4 <_printf_i+0x174>
 8005dec:	0659      	lsls	r1, r3, #25
 8005dee:	bf48      	it	mi
 8005df0:	b2b6      	uxthmi	r6, r6
 8005df2:	e7e6      	b.n	8005dc2 <_printf_i+0x182>
 8005df4:	4615      	mov	r5, r2
 8005df6:	e7bb      	b.n	8005d70 <_printf_i+0x130>
 8005df8:	682b      	ldr	r3, [r5, #0]
 8005dfa:	6826      	ldr	r6, [r4, #0]
 8005dfc:	6961      	ldr	r1, [r4, #20]
 8005dfe:	1d18      	adds	r0, r3, #4
 8005e00:	6028      	str	r0, [r5, #0]
 8005e02:	0635      	lsls	r5, r6, #24
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	d501      	bpl.n	8005e0c <_printf_i+0x1cc>
 8005e08:	6019      	str	r1, [r3, #0]
 8005e0a:	e002      	b.n	8005e12 <_printf_i+0x1d2>
 8005e0c:	0670      	lsls	r0, r6, #25
 8005e0e:	d5fb      	bpl.n	8005e08 <_printf_i+0x1c8>
 8005e10:	8019      	strh	r1, [r3, #0]
 8005e12:	2300      	movs	r3, #0
 8005e14:	6123      	str	r3, [r4, #16]
 8005e16:	4615      	mov	r5, r2
 8005e18:	e7ba      	b.n	8005d90 <_printf_i+0x150>
 8005e1a:	682b      	ldr	r3, [r5, #0]
 8005e1c:	1d1a      	adds	r2, r3, #4
 8005e1e:	602a      	str	r2, [r5, #0]
 8005e20:	681d      	ldr	r5, [r3, #0]
 8005e22:	6862      	ldr	r2, [r4, #4]
 8005e24:	2100      	movs	r1, #0
 8005e26:	4628      	mov	r0, r5
 8005e28:	f7fa f9fa 	bl	8000220 <memchr>
 8005e2c:	b108      	cbz	r0, 8005e32 <_printf_i+0x1f2>
 8005e2e:	1b40      	subs	r0, r0, r5
 8005e30:	6060      	str	r0, [r4, #4]
 8005e32:	6863      	ldr	r3, [r4, #4]
 8005e34:	6123      	str	r3, [r4, #16]
 8005e36:	2300      	movs	r3, #0
 8005e38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e3c:	e7a8      	b.n	8005d90 <_printf_i+0x150>
 8005e3e:	6923      	ldr	r3, [r4, #16]
 8005e40:	462a      	mov	r2, r5
 8005e42:	4649      	mov	r1, r9
 8005e44:	4640      	mov	r0, r8
 8005e46:	47d0      	blx	sl
 8005e48:	3001      	adds	r0, #1
 8005e4a:	d0ab      	beq.n	8005da4 <_printf_i+0x164>
 8005e4c:	6823      	ldr	r3, [r4, #0]
 8005e4e:	079b      	lsls	r3, r3, #30
 8005e50:	d413      	bmi.n	8005e7a <_printf_i+0x23a>
 8005e52:	68e0      	ldr	r0, [r4, #12]
 8005e54:	9b03      	ldr	r3, [sp, #12]
 8005e56:	4298      	cmp	r0, r3
 8005e58:	bfb8      	it	lt
 8005e5a:	4618      	movlt	r0, r3
 8005e5c:	e7a4      	b.n	8005da8 <_printf_i+0x168>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	4632      	mov	r2, r6
 8005e62:	4649      	mov	r1, r9
 8005e64:	4640      	mov	r0, r8
 8005e66:	47d0      	blx	sl
 8005e68:	3001      	adds	r0, #1
 8005e6a:	d09b      	beq.n	8005da4 <_printf_i+0x164>
 8005e6c:	3501      	adds	r5, #1
 8005e6e:	68e3      	ldr	r3, [r4, #12]
 8005e70:	9903      	ldr	r1, [sp, #12]
 8005e72:	1a5b      	subs	r3, r3, r1
 8005e74:	42ab      	cmp	r3, r5
 8005e76:	dcf2      	bgt.n	8005e5e <_printf_i+0x21e>
 8005e78:	e7eb      	b.n	8005e52 <_printf_i+0x212>
 8005e7a:	2500      	movs	r5, #0
 8005e7c:	f104 0619 	add.w	r6, r4, #25
 8005e80:	e7f5      	b.n	8005e6e <_printf_i+0x22e>
 8005e82:	bf00      	nop
 8005e84:	08008d0e 	.word	0x08008d0e
 8005e88:	08008d1f 	.word	0x08008d1f

08005e8c <setbuf>:
 8005e8c:	2900      	cmp	r1, #0
 8005e8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e92:	bf0c      	ite	eq
 8005e94:	2202      	moveq	r2, #2
 8005e96:	2200      	movne	r2, #0
 8005e98:	f000 b800 	b.w	8005e9c <setvbuf>

08005e9c <setvbuf>:
 8005e9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005ea0:	461d      	mov	r5, r3
 8005ea2:	4b5d      	ldr	r3, [pc, #372]	; (8006018 <setvbuf+0x17c>)
 8005ea4:	681f      	ldr	r7, [r3, #0]
 8005ea6:	4604      	mov	r4, r0
 8005ea8:	460e      	mov	r6, r1
 8005eaa:	4690      	mov	r8, r2
 8005eac:	b127      	cbz	r7, 8005eb8 <setvbuf+0x1c>
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	b913      	cbnz	r3, 8005eb8 <setvbuf+0x1c>
 8005eb2:	4638      	mov	r0, r7
 8005eb4:	f001 f84c 	bl	8006f50 <__sinit>
 8005eb8:	4b58      	ldr	r3, [pc, #352]	; (800601c <setvbuf+0x180>)
 8005eba:	429c      	cmp	r4, r3
 8005ebc:	d167      	bne.n	8005f8e <setvbuf+0xf2>
 8005ebe:	687c      	ldr	r4, [r7, #4]
 8005ec0:	f1b8 0f02 	cmp.w	r8, #2
 8005ec4:	d006      	beq.n	8005ed4 <setvbuf+0x38>
 8005ec6:	f1b8 0f01 	cmp.w	r8, #1
 8005eca:	f200 809f 	bhi.w	800600c <setvbuf+0x170>
 8005ece:	2d00      	cmp	r5, #0
 8005ed0:	f2c0 809c 	blt.w	800600c <setvbuf+0x170>
 8005ed4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ed6:	07db      	lsls	r3, r3, #31
 8005ed8:	d405      	bmi.n	8005ee6 <setvbuf+0x4a>
 8005eda:	89a3      	ldrh	r3, [r4, #12]
 8005edc:	0598      	lsls	r0, r3, #22
 8005ede:	d402      	bmi.n	8005ee6 <setvbuf+0x4a>
 8005ee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ee2:	f001 f8d8 	bl	8007096 <__retarget_lock_acquire_recursive>
 8005ee6:	4621      	mov	r1, r4
 8005ee8:	4638      	mov	r0, r7
 8005eea:	f000 ff9d 	bl	8006e28 <_fflush_r>
 8005eee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ef0:	b141      	cbz	r1, 8005f04 <setvbuf+0x68>
 8005ef2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ef6:	4299      	cmp	r1, r3
 8005ef8:	d002      	beq.n	8005f00 <setvbuf+0x64>
 8005efa:	4638      	mov	r0, r7
 8005efc:	f001 fce2 	bl	80078c4 <_free_r>
 8005f00:	2300      	movs	r3, #0
 8005f02:	6363      	str	r3, [r4, #52]	; 0x34
 8005f04:	2300      	movs	r3, #0
 8005f06:	61a3      	str	r3, [r4, #24]
 8005f08:	6063      	str	r3, [r4, #4]
 8005f0a:	89a3      	ldrh	r3, [r4, #12]
 8005f0c:	0619      	lsls	r1, r3, #24
 8005f0e:	d503      	bpl.n	8005f18 <setvbuf+0x7c>
 8005f10:	6921      	ldr	r1, [r4, #16]
 8005f12:	4638      	mov	r0, r7
 8005f14:	f001 fcd6 	bl	80078c4 <_free_r>
 8005f18:	89a3      	ldrh	r3, [r4, #12]
 8005f1a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005f1e:	f023 0303 	bic.w	r3, r3, #3
 8005f22:	f1b8 0f02 	cmp.w	r8, #2
 8005f26:	81a3      	strh	r3, [r4, #12]
 8005f28:	d06c      	beq.n	8006004 <setvbuf+0x168>
 8005f2a:	ab01      	add	r3, sp, #4
 8005f2c:	466a      	mov	r2, sp
 8005f2e:	4621      	mov	r1, r4
 8005f30:	4638      	mov	r0, r7
 8005f32:	f001 f8b2 	bl	800709a <__swhatbuf_r>
 8005f36:	89a3      	ldrh	r3, [r4, #12]
 8005f38:	4318      	orrs	r0, r3
 8005f3a:	81a0      	strh	r0, [r4, #12]
 8005f3c:	2d00      	cmp	r5, #0
 8005f3e:	d130      	bne.n	8005fa2 <setvbuf+0x106>
 8005f40:	9d00      	ldr	r5, [sp, #0]
 8005f42:	4628      	mov	r0, r5
 8005f44:	f001 f90e 	bl	8007164 <malloc>
 8005f48:	4606      	mov	r6, r0
 8005f4a:	2800      	cmp	r0, #0
 8005f4c:	d155      	bne.n	8005ffa <setvbuf+0x15e>
 8005f4e:	f8dd 9000 	ldr.w	r9, [sp]
 8005f52:	45a9      	cmp	r9, r5
 8005f54:	d14a      	bne.n	8005fec <setvbuf+0x150>
 8005f56:	f04f 35ff 	mov.w	r5, #4294967295
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	60a2      	str	r2, [r4, #8]
 8005f5e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8005f62:	6022      	str	r2, [r4, #0]
 8005f64:	6122      	str	r2, [r4, #16]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f6c:	6162      	str	r2, [r4, #20]
 8005f6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005f70:	f043 0302 	orr.w	r3, r3, #2
 8005f74:	07d2      	lsls	r2, r2, #31
 8005f76:	81a3      	strh	r3, [r4, #12]
 8005f78:	d405      	bmi.n	8005f86 <setvbuf+0xea>
 8005f7a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005f7e:	d102      	bne.n	8005f86 <setvbuf+0xea>
 8005f80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f82:	f001 f889 	bl	8007098 <__retarget_lock_release_recursive>
 8005f86:	4628      	mov	r0, r5
 8005f88:	b003      	add	sp, #12
 8005f8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f8e:	4b24      	ldr	r3, [pc, #144]	; (8006020 <setvbuf+0x184>)
 8005f90:	429c      	cmp	r4, r3
 8005f92:	d101      	bne.n	8005f98 <setvbuf+0xfc>
 8005f94:	68bc      	ldr	r4, [r7, #8]
 8005f96:	e793      	b.n	8005ec0 <setvbuf+0x24>
 8005f98:	4b22      	ldr	r3, [pc, #136]	; (8006024 <setvbuf+0x188>)
 8005f9a:	429c      	cmp	r4, r3
 8005f9c:	bf08      	it	eq
 8005f9e:	68fc      	ldreq	r4, [r7, #12]
 8005fa0:	e78e      	b.n	8005ec0 <setvbuf+0x24>
 8005fa2:	2e00      	cmp	r6, #0
 8005fa4:	d0cd      	beq.n	8005f42 <setvbuf+0xa6>
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	b913      	cbnz	r3, 8005fb0 <setvbuf+0x114>
 8005faa:	4638      	mov	r0, r7
 8005fac:	f000 ffd0 	bl	8006f50 <__sinit>
 8005fb0:	f1b8 0f01 	cmp.w	r8, #1
 8005fb4:	bf08      	it	eq
 8005fb6:	89a3      	ldrheq	r3, [r4, #12]
 8005fb8:	6026      	str	r6, [r4, #0]
 8005fba:	bf04      	itt	eq
 8005fbc:	f043 0301 	orreq.w	r3, r3, #1
 8005fc0:	81a3      	strheq	r3, [r4, #12]
 8005fc2:	89a2      	ldrh	r2, [r4, #12]
 8005fc4:	f012 0308 	ands.w	r3, r2, #8
 8005fc8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005fcc:	d01c      	beq.n	8006008 <setvbuf+0x16c>
 8005fce:	07d3      	lsls	r3, r2, #31
 8005fd0:	bf41      	itttt	mi
 8005fd2:	2300      	movmi	r3, #0
 8005fd4:	426d      	negmi	r5, r5
 8005fd6:	60a3      	strmi	r3, [r4, #8]
 8005fd8:	61a5      	strmi	r5, [r4, #24]
 8005fda:	bf58      	it	pl
 8005fdc:	60a5      	strpl	r5, [r4, #8]
 8005fde:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005fe0:	f015 0501 	ands.w	r5, r5, #1
 8005fe4:	d115      	bne.n	8006012 <setvbuf+0x176>
 8005fe6:	f412 7f00 	tst.w	r2, #512	; 0x200
 8005fea:	e7c8      	b.n	8005f7e <setvbuf+0xe2>
 8005fec:	4648      	mov	r0, r9
 8005fee:	f001 f8b9 	bl	8007164 <malloc>
 8005ff2:	4606      	mov	r6, r0
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	d0ae      	beq.n	8005f56 <setvbuf+0xba>
 8005ff8:	464d      	mov	r5, r9
 8005ffa:	89a3      	ldrh	r3, [r4, #12]
 8005ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006000:	81a3      	strh	r3, [r4, #12]
 8006002:	e7d0      	b.n	8005fa6 <setvbuf+0x10a>
 8006004:	2500      	movs	r5, #0
 8006006:	e7a8      	b.n	8005f5a <setvbuf+0xbe>
 8006008:	60a3      	str	r3, [r4, #8]
 800600a:	e7e8      	b.n	8005fde <setvbuf+0x142>
 800600c:	f04f 35ff 	mov.w	r5, #4294967295
 8006010:	e7b9      	b.n	8005f86 <setvbuf+0xea>
 8006012:	2500      	movs	r5, #0
 8006014:	e7b7      	b.n	8005f86 <setvbuf+0xea>
 8006016:	bf00      	nop
 8006018:	2000003c 	.word	0x2000003c
 800601c:	08008de0 	.word	0x08008de0
 8006020:	08008e00 	.word	0x08008e00
 8006024:	08008dc0 	.word	0x08008dc0

08006028 <quorem>:
 8006028:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800602c:	6903      	ldr	r3, [r0, #16]
 800602e:	690c      	ldr	r4, [r1, #16]
 8006030:	42a3      	cmp	r3, r4
 8006032:	4607      	mov	r7, r0
 8006034:	f2c0 8081 	blt.w	800613a <quorem+0x112>
 8006038:	3c01      	subs	r4, #1
 800603a:	f101 0814 	add.w	r8, r1, #20
 800603e:	f100 0514 	add.w	r5, r0, #20
 8006042:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006046:	9301      	str	r3, [sp, #4]
 8006048:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800604c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006050:	3301      	adds	r3, #1
 8006052:	429a      	cmp	r2, r3
 8006054:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006058:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800605c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006060:	d331      	bcc.n	80060c6 <quorem+0x9e>
 8006062:	f04f 0e00 	mov.w	lr, #0
 8006066:	4640      	mov	r0, r8
 8006068:	46ac      	mov	ip, r5
 800606a:	46f2      	mov	sl, lr
 800606c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006070:	b293      	uxth	r3, r2
 8006072:	fb06 e303 	mla	r3, r6, r3, lr
 8006076:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800607a:	b29b      	uxth	r3, r3
 800607c:	ebaa 0303 	sub.w	r3, sl, r3
 8006080:	f8dc a000 	ldr.w	sl, [ip]
 8006084:	0c12      	lsrs	r2, r2, #16
 8006086:	fa13 f38a 	uxtah	r3, r3, sl
 800608a:	fb06 e202 	mla	r2, r6, r2, lr
 800608e:	9300      	str	r3, [sp, #0]
 8006090:	9b00      	ldr	r3, [sp, #0]
 8006092:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006096:	b292      	uxth	r2, r2
 8006098:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800609c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060a0:	f8bd 3000 	ldrh.w	r3, [sp]
 80060a4:	4581      	cmp	r9, r0
 80060a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060aa:	f84c 3b04 	str.w	r3, [ip], #4
 80060ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80060b2:	d2db      	bcs.n	800606c <quorem+0x44>
 80060b4:	f855 300b 	ldr.w	r3, [r5, fp]
 80060b8:	b92b      	cbnz	r3, 80060c6 <quorem+0x9e>
 80060ba:	9b01      	ldr	r3, [sp, #4]
 80060bc:	3b04      	subs	r3, #4
 80060be:	429d      	cmp	r5, r3
 80060c0:	461a      	mov	r2, r3
 80060c2:	d32e      	bcc.n	8006122 <quorem+0xfa>
 80060c4:	613c      	str	r4, [r7, #16]
 80060c6:	4638      	mov	r0, r7
 80060c8:	f001 fae4 	bl	8007694 <__mcmp>
 80060cc:	2800      	cmp	r0, #0
 80060ce:	db24      	blt.n	800611a <quorem+0xf2>
 80060d0:	3601      	adds	r6, #1
 80060d2:	4628      	mov	r0, r5
 80060d4:	f04f 0c00 	mov.w	ip, #0
 80060d8:	f858 2b04 	ldr.w	r2, [r8], #4
 80060dc:	f8d0 e000 	ldr.w	lr, [r0]
 80060e0:	b293      	uxth	r3, r2
 80060e2:	ebac 0303 	sub.w	r3, ip, r3
 80060e6:	0c12      	lsrs	r2, r2, #16
 80060e8:	fa13 f38e 	uxtah	r3, r3, lr
 80060ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80060f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060fa:	45c1      	cmp	r9, r8
 80060fc:	f840 3b04 	str.w	r3, [r0], #4
 8006100:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006104:	d2e8      	bcs.n	80060d8 <quorem+0xb0>
 8006106:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800610a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800610e:	b922      	cbnz	r2, 800611a <quorem+0xf2>
 8006110:	3b04      	subs	r3, #4
 8006112:	429d      	cmp	r5, r3
 8006114:	461a      	mov	r2, r3
 8006116:	d30a      	bcc.n	800612e <quorem+0x106>
 8006118:	613c      	str	r4, [r7, #16]
 800611a:	4630      	mov	r0, r6
 800611c:	b003      	add	sp, #12
 800611e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006122:	6812      	ldr	r2, [r2, #0]
 8006124:	3b04      	subs	r3, #4
 8006126:	2a00      	cmp	r2, #0
 8006128:	d1cc      	bne.n	80060c4 <quorem+0x9c>
 800612a:	3c01      	subs	r4, #1
 800612c:	e7c7      	b.n	80060be <quorem+0x96>
 800612e:	6812      	ldr	r2, [r2, #0]
 8006130:	3b04      	subs	r3, #4
 8006132:	2a00      	cmp	r2, #0
 8006134:	d1f0      	bne.n	8006118 <quorem+0xf0>
 8006136:	3c01      	subs	r4, #1
 8006138:	e7eb      	b.n	8006112 <quorem+0xea>
 800613a:	2000      	movs	r0, #0
 800613c:	e7ee      	b.n	800611c <quorem+0xf4>
	...

08006140 <_dtoa_r>:
 8006140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006144:	ed2d 8b04 	vpush	{d8-d9}
 8006148:	ec57 6b10 	vmov	r6, r7, d0
 800614c:	b093      	sub	sp, #76	; 0x4c
 800614e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006150:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006154:	9106      	str	r1, [sp, #24]
 8006156:	ee10 aa10 	vmov	sl, s0
 800615a:	4604      	mov	r4, r0
 800615c:	9209      	str	r2, [sp, #36]	; 0x24
 800615e:	930c      	str	r3, [sp, #48]	; 0x30
 8006160:	46bb      	mov	fp, r7
 8006162:	b975      	cbnz	r5, 8006182 <_dtoa_r+0x42>
 8006164:	2010      	movs	r0, #16
 8006166:	f000 fffd 	bl	8007164 <malloc>
 800616a:	4602      	mov	r2, r0
 800616c:	6260      	str	r0, [r4, #36]	; 0x24
 800616e:	b920      	cbnz	r0, 800617a <_dtoa_r+0x3a>
 8006170:	4ba7      	ldr	r3, [pc, #668]	; (8006410 <_dtoa_r+0x2d0>)
 8006172:	21ea      	movs	r1, #234	; 0xea
 8006174:	48a7      	ldr	r0, [pc, #668]	; (8006414 <_dtoa_r+0x2d4>)
 8006176:	f001 fceb 	bl	8007b50 <__assert_func>
 800617a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800617e:	6005      	str	r5, [r0, #0]
 8006180:	60c5      	str	r5, [r0, #12]
 8006182:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006184:	6819      	ldr	r1, [r3, #0]
 8006186:	b151      	cbz	r1, 800619e <_dtoa_r+0x5e>
 8006188:	685a      	ldr	r2, [r3, #4]
 800618a:	604a      	str	r2, [r1, #4]
 800618c:	2301      	movs	r3, #1
 800618e:	4093      	lsls	r3, r2
 8006190:	608b      	str	r3, [r1, #8]
 8006192:	4620      	mov	r0, r4
 8006194:	f001 f83c 	bl	8007210 <_Bfree>
 8006198:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800619a:	2200      	movs	r2, #0
 800619c:	601a      	str	r2, [r3, #0]
 800619e:	1e3b      	subs	r3, r7, #0
 80061a0:	bfaa      	itet	ge
 80061a2:	2300      	movge	r3, #0
 80061a4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80061a8:	f8c8 3000 	strge.w	r3, [r8]
 80061ac:	4b9a      	ldr	r3, [pc, #616]	; (8006418 <_dtoa_r+0x2d8>)
 80061ae:	bfbc      	itt	lt
 80061b0:	2201      	movlt	r2, #1
 80061b2:	f8c8 2000 	strlt.w	r2, [r8]
 80061b6:	ea33 030b 	bics.w	r3, r3, fp
 80061ba:	d11b      	bne.n	80061f4 <_dtoa_r+0xb4>
 80061bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061be:	f242 730f 	movw	r3, #9999	; 0x270f
 80061c2:	6013      	str	r3, [r2, #0]
 80061c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80061c8:	4333      	orrs	r3, r6
 80061ca:	f000 8592 	beq.w	8006cf2 <_dtoa_r+0xbb2>
 80061ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061d0:	b963      	cbnz	r3, 80061ec <_dtoa_r+0xac>
 80061d2:	4b92      	ldr	r3, [pc, #584]	; (800641c <_dtoa_r+0x2dc>)
 80061d4:	e022      	b.n	800621c <_dtoa_r+0xdc>
 80061d6:	4b92      	ldr	r3, [pc, #584]	; (8006420 <_dtoa_r+0x2e0>)
 80061d8:	9301      	str	r3, [sp, #4]
 80061da:	3308      	adds	r3, #8
 80061dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80061de:	6013      	str	r3, [r2, #0]
 80061e0:	9801      	ldr	r0, [sp, #4]
 80061e2:	b013      	add	sp, #76	; 0x4c
 80061e4:	ecbd 8b04 	vpop	{d8-d9}
 80061e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ec:	4b8b      	ldr	r3, [pc, #556]	; (800641c <_dtoa_r+0x2dc>)
 80061ee:	9301      	str	r3, [sp, #4]
 80061f0:	3303      	adds	r3, #3
 80061f2:	e7f3      	b.n	80061dc <_dtoa_r+0x9c>
 80061f4:	2200      	movs	r2, #0
 80061f6:	2300      	movs	r3, #0
 80061f8:	4650      	mov	r0, sl
 80061fa:	4659      	mov	r1, fp
 80061fc:	f7fa fc84 	bl	8000b08 <__aeabi_dcmpeq>
 8006200:	ec4b ab19 	vmov	d9, sl, fp
 8006204:	4680      	mov	r8, r0
 8006206:	b158      	cbz	r0, 8006220 <_dtoa_r+0xe0>
 8006208:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800620a:	2301      	movs	r3, #1
 800620c:	6013      	str	r3, [r2, #0]
 800620e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006210:	2b00      	cmp	r3, #0
 8006212:	f000 856b 	beq.w	8006cec <_dtoa_r+0xbac>
 8006216:	4883      	ldr	r0, [pc, #524]	; (8006424 <_dtoa_r+0x2e4>)
 8006218:	6018      	str	r0, [r3, #0]
 800621a:	1e43      	subs	r3, r0, #1
 800621c:	9301      	str	r3, [sp, #4]
 800621e:	e7df      	b.n	80061e0 <_dtoa_r+0xa0>
 8006220:	ec4b ab10 	vmov	d0, sl, fp
 8006224:	aa10      	add	r2, sp, #64	; 0x40
 8006226:	a911      	add	r1, sp, #68	; 0x44
 8006228:	4620      	mov	r0, r4
 800622a:	f001 fad9 	bl	80077e0 <__d2b>
 800622e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006232:	ee08 0a10 	vmov	s16, r0
 8006236:	2d00      	cmp	r5, #0
 8006238:	f000 8084 	beq.w	8006344 <_dtoa_r+0x204>
 800623c:	ee19 3a90 	vmov	r3, s19
 8006240:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006244:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006248:	4656      	mov	r6, sl
 800624a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800624e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006252:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006256:	4b74      	ldr	r3, [pc, #464]	; (8006428 <_dtoa_r+0x2e8>)
 8006258:	2200      	movs	r2, #0
 800625a:	4630      	mov	r0, r6
 800625c:	4639      	mov	r1, r7
 800625e:	f7fa f833 	bl	80002c8 <__aeabi_dsub>
 8006262:	a365      	add	r3, pc, #404	; (adr r3, 80063f8 <_dtoa_r+0x2b8>)
 8006264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006268:	f7fa f9e6 	bl	8000638 <__aeabi_dmul>
 800626c:	a364      	add	r3, pc, #400	; (adr r3, 8006400 <_dtoa_r+0x2c0>)
 800626e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006272:	f7fa f82b 	bl	80002cc <__adddf3>
 8006276:	4606      	mov	r6, r0
 8006278:	4628      	mov	r0, r5
 800627a:	460f      	mov	r7, r1
 800627c:	f7fa f972 	bl	8000564 <__aeabi_i2d>
 8006280:	a361      	add	r3, pc, #388	; (adr r3, 8006408 <_dtoa_r+0x2c8>)
 8006282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006286:	f7fa f9d7 	bl	8000638 <__aeabi_dmul>
 800628a:	4602      	mov	r2, r0
 800628c:	460b      	mov	r3, r1
 800628e:	4630      	mov	r0, r6
 8006290:	4639      	mov	r1, r7
 8006292:	f7fa f81b 	bl	80002cc <__adddf3>
 8006296:	4606      	mov	r6, r0
 8006298:	460f      	mov	r7, r1
 800629a:	f7fa fc7d 	bl	8000b98 <__aeabi_d2iz>
 800629e:	2200      	movs	r2, #0
 80062a0:	9000      	str	r0, [sp, #0]
 80062a2:	2300      	movs	r3, #0
 80062a4:	4630      	mov	r0, r6
 80062a6:	4639      	mov	r1, r7
 80062a8:	f7fa fc38 	bl	8000b1c <__aeabi_dcmplt>
 80062ac:	b150      	cbz	r0, 80062c4 <_dtoa_r+0x184>
 80062ae:	9800      	ldr	r0, [sp, #0]
 80062b0:	f7fa f958 	bl	8000564 <__aeabi_i2d>
 80062b4:	4632      	mov	r2, r6
 80062b6:	463b      	mov	r3, r7
 80062b8:	f7fa fc26 	bl	8000b08 <__aeabi_dcmpeq>
 80062bc:	b910      	cbnz	r0, 80062c4 <_dtoa_r+0x184>
 80062be:	9b00      	ldr	r3, [sp, #0]
 80062c0:	3b01      	subs	r3, #1
 80062c2:	9300      	str	r3, [sp, #0]
 80062c4:	9b00      	ldr	r3, [sp, #0]
 80062c6:	2b16      	cmp	r3, #22
 80062c8:	d85a      	bhi.n	8006380 <_dtoa_r+0x240>
 80062ca:	9a00      	ldr	r2, [sp, #0]
 80062cc:	4b57      	ldr	r3, [pc, #348]	; (800642c <_dtoa_r+0x2ec>)
 80062ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d6:	ec51 0b19 	vmov	r0, r1, d9
 80062da:	f7fa fc1f 	bl	8000b1c <__aeabi_dcmplt>
 80062de:	2800      	cmp	r0, #0
 80062e0:	d050      	beq.n	8006384 <_dtoa_r+0x244>
 80062e2:	9b00      	ldr	r3, [sp, #0]
 80062e4:	3b01      	subs	r3, #1
 80062e6:	9300      	str	r3, [sp, #0]
 80062e8:	2300      	movs	r3, #0
 80062ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80062ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80062ee:	1b5d      	subs	r5, r3, r5
 80062f0:	1e6b      	subs	r3, r5, #1
 80062f2:	9305      	str	r3, [sp, #20]
 80062f4:	bf45      	ittet	mi
 80062f6:	f1c5 0301 	rsbmi	r3, r5, #1
 80062fa:	9304      	strmi	r3, [sp, #16]
 80062fc:	2300      	movpl	r3, #0
 80062fe:	2300      	movmi	r3, #0
 8006300:	bf4c      	ite	mi
 8006302:	9305      	strmi	r3, [sp, #20]
 8006304:	9304      	strpl	r3, [sp, #16]
 8006306:	9b00      	ldr	r3, [sp, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	db3d      	blt.n	8006388 <_dtoa_r+0x248>
 800630c:	9b05      	ldr	r3, [sp, #20]
 800630e:	9a00      	ldr	r2, [sp, #0]
 8006310:	920a      	str	r2, [sp, #40]	; 0x28
 8006312:	4413      	add	r3, r2
 8006314:	9305      	str	r3, [sp, #20]
 8006316:	2300      	movs	r3, #0
 8006318:	9307      	str	r3, [sp, #28]
 800631a:	9b06      	ldr	r3, [sp, #24]
 800631c:	2b09      	cmp	r3, #9
 800631e:	f200 8089 	bhi.w	8006434 <_dtoa_r+0x2f4>
 8006322:	2b05      	cmp	r3, #5
 8006324:	bfc4      	itt	gt
 8006326:	3b04      	subgt	r3, #4
 8006328:	9306      	strgt	r3, [sp, #24]
 800632a:	9b06      	ldr	r3, [sp, #24]
 800632c:	f1a3 0302 	sub.w	r3, r3, #2
 8006330:	bfcc      	ite	gt
 8006332:	2500      	movgt	r5, #0
 8006334:	2501      	movle	r5, #1
 8006336:	2b03      	cmp	r3, #3
 8006338:	f200 8087 	bhi.w	800644a <_dtoa_r+0x30a>
 800633c:	e8df f003 	tbb	[pc, r3]
 8006340:	59383a2d 	.word	0x59383a2d
 8006344:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006348:	441d      	add	r5, r3
 800634a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800634e:	2b20      	cmp	r3, #32
 8006350:	bfc1      	itttt	gt
 8006352:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006356:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800635a:	fa0b f303 	lslgt.w	r3, fp, r3
 800635e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006362:	bfda      	itte	le
 8006364:	f1c3 0320 	rsble	r3, r3, #32
 8006368:	fa06 f003 	lslle.w	r0, r6, r3
 800636c:	4318      	orrgt	r0, r3
 800636e:	f7fa f8e9 	bl	8000544 <__aeabi_ui2d>
 8006372:	2301      	movs	r3, #1
 8006374:	4606      	mov	r6, r0
 8006376:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800637a:	3d01      	subs	r5, #1
 800637c:	930e      	str	r3, [sp, #56]	; 0x38
 800637e:	e76a      	b.n	8006256 <_dtoa_r+0x116>
 8006380:	2301      	movs	r3, #1
 8006382:	e7b2      	b.n	80062ea <_dtoa_r+0x1aa>
 8006384:	900b      	str	r0, [sp, #44]	; 0x2c
 8006386:	e7b1      	b.n	80062ec <_dtoa_r+0x1ac>
 8006388:	9b04      	ldr	r3, [sp, #16]
 800638a:	9a00      	ldr	r2, [sp, #0]
 800638c:	1a9b      	subs	r3, r3, r2
 800638e:	9304      	str	r3, [sp, #16]
 8006390:	4253      	negs	r3, r2
 8006392:	9307      	str	r3, [sp, #28]
 8006394:	2300      	movs	r3, #0
 8006396:	930a      	str	r3, [sp, #40]	; 0x28
 8006398:	e7bf      	b.n	800631a <_dtoa_r+0x1da>
 800639a:	2300      	movs	r3, #0
 800639c:	9308      	str	r3, [sp, #32]
 800639e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	dc55      	bgt.n	8006450 <_dtoa_r+0x310>
 80063a4:	2301      	movs	r3, #1
 80063a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80063aa:	461a      	mov	r2, r3
 80063ac:	9209      	str	r2, [sp, #36]	; 0x24
 80063ae:	e00c      	b.n	80063ca <_dtoa_r+0x28a>
 80063b0:	2301      	movs	r3, #1
 80063b2:	e7f3      	b.n	800639c <_dtoa_r+0x25c>
 80063b4:	2300      	movs	r3, #0
 80063b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063b8:	9308      	str	r3, [sp, #32]
 80063ba:	9b00      	ldr	r3, [sp, #0]
 80063bc:	4413      	add	r3, r2
 80063be:	9302      	str	r3, [sp, #8]
 80063c0:	3301      	adds	r3, #1
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	9303      	str	r3, [sp, #12]
 80063c6:	bfb8      	it	lt
 80063c8:	2301      	movlt	r3, #1
 80063ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80063cc:	2200      	movs	r2, #0
 80063ce:	6042      	str	r2, [r0, #4]
 80063d0:	2204      	movs	r2, #4
 80063d2:	f102 0614 	add.w	r6, r2, #20
 80063d6:	429e      	cmp	r6, r3
 80063d8:	6841      	ldr	r1, [r0, #4]
 80063da:	d93d      	bls.n	8006458 <_dtoa_r+0x318>
 80063dc:	4620      	mov	r0, r4
 80063de:	f000 fed7 	bl	8007190 <_Balloc>
 80063e2:	9001      	str	r0, [sp, #4]
 80063e4:	2800      	cmp	r0, #0
 80063e6:	d13b      	bne.n	8006460 <_dtoa_r+0x320>
 80063e8:	4b11      	ldr	r3, [pc, #68]	; (8006430 <_dtoa_r+0x2f0>)
 80063ea:	4602      	mov	r2, r0
 80063ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80063f0:	e6c0      	b.n	8006174 <_dtoa_r+0x34>
 80063f2:	2301      	movs	r3, #1
 80063f4:	e7df      	b.n	80063b6 <_dtoa_r+0x276>
 80063f6:	bf00      	nop
 80063f8:	636f4361 	.word	0x636f4361
 80063fc:	3fd287a7 	.word	0x3fd287a7
 8006400:	8b60c8b3 	.word	0x8b60c8b3
 8006404:	3fc68a28 	.word	0x3fc68a28
 8006408:	509f79fb 	.word	0x509f79fb
 800640c:	3fd34413 	.word	0x3fd34413
 8006410:	08008d3d 	.word	0x08008d3d
 8006414:	08008d54 	.word	0x08008d54
 8006418:	7ff00000 	.word	0x7ff00000
 800641c:	08008d39 	.word	0x08008d39
 8006420:	08008d30 	.word	0x08008d30
 8006424:	08008d0d 	.word	0x08008d0d
 8006428:	3ff80000 	.word	0x3ff80000
 800642c:	08008ea8 	.word	0x08008ea8
 8006430:	08008daf 	.word	0x08008daf
 8006434:	2501      	movs	r5, #1
 8006436:	2300      	movs	r3, #0
 8006438:	9306      	str	r3, [sp, #24]
 800643a:	9508      	str	r5, [sp, #32]
 800643c:	f04f 33ff 	mov.w	r3, #4294967295
 8006440:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006444:	2200      	movs	r2, #0
 8006446:	2312      	movs	r3, #18
 8006448:	e7b0      	b.n	80063ac <_dtoa_r+0x26c>
 800644a:	2301      	movs	r3, #1
 800644c:	9308      	str	r3, [sp, #32]
 800644e:	e7f5      	b.n	800643c <_dtoa_r+0x2fc>
 8006450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006452:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006456:	e7b8      	b.n	80063ca <_dtoa_r+0x28a>
 8006458:	3101      	adds	r1, #1
 800645a:	6041      	str	r1, [r0, #4]
 800645c:	0052      	lsls	r2, r2, #1
 800645e:	e7b8      	b.n	80063d2 <_dtoa_r+0x292>
 8006460:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006462:	9a01      	ldr	r2, [sp, #4]
 8006464:	601a      	str	r2, [r3, #0]
 8006466:	9b03      	ldr	r3, [sp, #12]
 8006468:	2b0e      	cmp	r3, #14
 800646a:	f200 809d 	bhi.w	80065a8 <_dtoa_r+0x468>
 800646e:	2d00      	cmp	r5, #0
 8006470:	f000 809a 	beq.w	80065a8 <_dtoa_r+0x468>
 8006474:	9b00      	ldr	r3, [sp, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	dd32      	ble.n	80064e0 <_dtoa_r+0x3a0>
 800647a:	4ab7      	ldr	r2, [pc, #732]	; (8006758 <_dtoa_r+0x618>)
 800647c:	f003 030f 	and.w	r3, r3, #15
 8006480:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006484:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006488:	9b00      	ldr	r3, [sp, #0]
 800648a:	05d8      	lsls	r0, r3, #23
 800648c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006490:	d516      	bpl.n	80064c0 <_dtoa_r+0x380>
 8006492:	4bb2      	ldr	r3, [pc, #712]	; (800675c <_dtoa_r+0x61c>)
 8006494:	ec51 0b19 	vmov	r0, r1, d9
 8006498:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800649c:	f7fa f9f6 	bl	800088c <__aeabi_ddiv>
 80064a0:	f007 070f 	and.w	r7, r7, #15
 80064a4:	4682      	mov	sl, r0
 80064a6:	468b      	mov	fp, r1
 80064a8:	2503      	movs	r5, #3
 80064aa:	4eac      	ldr	r6, [pc, #688]	; (800675c <_dtoa_r+0x61c>)
 80064ac:	b957      	cbnz	r7, 80064c4 <_dtoa_r+0x384>
 80064ae:	4642      	mov	r2, r8
 80064b0:	464b      	mov	r3, r9
 80064b2:	4650      	mov	r0, sl
 80064b4:	4659      	mov	r1, fp
 80064b6:	f7fa f9e9 	bl	800088c <__aeabi_ddiv>
 80064ba:	4682      	mov	sl, r0
 80064bc:	468b      	mov	fp, r1
 80064be:	e028      	b.n	8006512 <_dtoa_r+0x3d2>
 80064c0:	2502      	movs	r5, #2
 80064c2:	e7f2      	b.n	80064aa <_dtoa_r+0x36a>
 80064c4:	07f9      	lsls	r1, r7, #31
 80064c6:	d508      	bpl.n	80064da <_dtoa_r+0x39a>
 80064c8:	4640      	mov	r0, r8
 80064ca:	4649      	mov	r1, r9
 80064cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80064d0:	f7fa f8b2 	bl	8000638 <__aeabi_dmul>
 80064d4:	3501      	adds	r5, #1
 80064d6:	4680      	mov	r8, r0
 80064d8:	4689      	mov	r9, r1
 80064da:	107f      	asrs	r7, r7, #1
 80064dc:	3608      	adds	r6, #8
 80064de:	e7e5      	b.n	80064ac <_dtoa_r+0x36c>
 80064e0:	f000 809b 	beq.w	800661a <_dtoa_r+0x4da>
 80064e4:	9b00      	ldr	r3, [sp, #0]
 80064e6:	4f9d      	ldr	r7, [pc, #628]	; (800675c <_dtoa_r+0x61c>)
 80064e8:	425e      	negs	r6, r3
 80064ea:	4b9b      	ldr	r3, [pc, #620]	; (8006758 <_dtoa_r+0x618>)
 80064ec:	f006 020f 	and.w	r2, r6, #15
 80064f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f8:	ec51 0b19 	vmov	r0, r1, d9
 80064fc:	f7fa f89c 	bl	8000638 <__aeabi_dmul>
 8006500:	1136      	asrs	r6, r6, #4
 8006502:	4682      	mov	sl, r0
 8006504:	468b      	mov	fp, r1
 8006506:	2300      	movs	r3, #0
 8006508:	2502      	movs	r5, #2
 800650a:	2e00      	cmp	r6, #0
 800650c:	d17a      	bne.n	8006604 <_dtoa_r+0x4c4>
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1d3      	bne.n	80064ba <_dtoa_r+0x37a>
 8006512:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006514:	2b00      	cmp	r3, #0
 8006516:	f000 8082 	beq.w	800661e <_dtoa_r+0x4de>
 800651a:	4b91      	ldr	r3, [pc, #580]	; (8006760 <_dtoa_r+0x620>)
 800651c:	2200      	movs	r2, #0
 800651e:	4650      	mov	r0, sl
 8006520:	4659      	mov	r1, fp
 8006522:	f7fa fafb 	bl	8000b1c <__aeabi_dcmplt>
 8006526:	2800      	cmp	r0, #0
 8006528:	d079      	beq.n	800661e <_dtoa_r+0x4de>
 800652a:	9b03      	ldr	r3, [sp, #12]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d076      	beq.n	800661e <_dtoa_r+0x4de>
 8006530:	9b02      	ldr	r3, [sp, #8]
 8006532:	2b00      	cmp	r3, #0
 8006534:	dd36      	ble.n	80065a4 <_dtoa_r+0x464>
 8006536:	9b00      	ldr	r3, [sp, #0]
 8006538:	4650      	mov	r0, sl
 800653a:	4659      	mov	r1, fp
 800653c:	1e5f      	subs	r7, r3, #1
 800653e:	2200      	movs	r2, #0
 8006540:	4b88      	ldr	r3, [pc, #544]	; (8006764 <_dtoa_r+0x624>)
 8006542:	f7fa f879 	bl	8000638 <__aeabi_dmul>
 8006546:	9e02      	ldr	r6, [sp, #8]
 8006548:	4682      	mov	sl, r0
 800654a:	468b      	mov	fp, r1
 800654c:	3501      	adds	r5, #1
 800654e:	4628      	mov	r0, r5
 8006550:	f7fa f808 	bl	8000564 <__aeabi_i2d>
 8006554:	4652      	mov	r2, sl
 8006556:	465b      	mov	r3, fp
 8006558:	f7fa f86e 	bl	8000638 <__aeabi_dmul>
 800655c:	4b82      	ldr	r3, [pc, #520]	; (8006768 <_dtoa_r+0x628>)
 800655e:	2200      	movs	r2, #0
 8006560:	f7f9 feb4 	bl	80002cc <__adddf3>
 8006564:	46d0      	mov	r8, sl
 8006566:	46d9      	mov	r9, fp
 8006568:	4682      	mov	sl, r0
 800656a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800656e:	2e00      	cmp	r6, #0
 8006570:	d158      	bne.n	8006624 <_dtoa_r+0x4e4>
 8006572:	4b7e      	ldr	r3, [pc, #504]	; (800676c <_dtoa_r+0x62c>)
 8006574:	2200      	movs	r2, #0
 8006576:	4640      	mov	r0, r8
 8006578:	4649      	mov	r1, r9
 800657a:	f7f9 fea5 	bl	80002c8 <__aeabi_dsub>
 800657e:	4652      	mov	r2, sl
 8006580:	465b      	mov	r3, fp
 8006582:	4680      	mov	r8, r0
 8006584:	4689      	mov	r9, r1
 8006586:	f7fa fae7 	bl	8000b58 <__aeabi_dcmpgt>
 800658a:	2800      	cmp	r0, #0
 800658c:	f040 8295 	bne.w	8006aba <_dtoa_r+0x97a>
 8006590:	4652      	mov	r2, sl
 8006592:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006596:	4640      	mov	r0, r8
 8006598:	4649      	mov	r1, r9
 800659a:	f7fa fabf 	bl	8000b1c <__aeabi_dcmplt>
 800659e:	2800      	cmp	r0, #0
 80065a0:	f040 8289 	bne.w	8006ab6 <_dtoa_r+0x976>
 80065a4:	ec5b ab19 	vmov	sl, fp, d9
 80065a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f2c0 8148 	blt.w	8006840 <_dtoa_r+0x700>
 80065b0:	9a00      	ldr	r2, [sp, #0]
 80065b2:	2a0e      	cmp	r2, #14
 80065b4:	f300 8144 	bgt.w	8006840 <_dtoa_r+0x700>
 80065b8:	4b67      	ldr	r3, [pc, #412]	; (8006758 <_dtoa_r+0x618>)
 80065ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80065c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f280 80d5 	bge.w	8006774 <_dtoa_r+0x634>
 80065ca:	9b03      	ldr	r3, [sp, #12]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f300 80d1 	bgt.w	8006774 <_dtoa_r+0x634>
 80065d2:	f040 826f 	bne.w	8006ab4 <_dtoa_r+0x974>
 80065d6:	4b65      	ldr	r3, [pc, #404]	; (800676c <_dtoa_r+0x62c>)
 80065d8:	2200      	movs	r2, #0
 80065da:	4640      	mov	r0, r8
 80065dc:	4649      	mov	r1, r9
 80065de:	f7fa f82b 	bl	8000638 <__aeabi_dmul>
 80065e2:	4652      	mov	r2, sl
 80065e4:	465b      	mov	r3, fp
 80065e6:	f7fa faad 	bl	8000b44 <__aeabi_dcmpge>
 80065ea:	9e03      	ldr	r6, [sp, #12]
 80065ec:	4637      	mov	r7, r6
 80065ee:	2800      	cmp	r0, #0
 80065f0:	f040 8245 	bne.w	8006a7e <_dtoa_r+0x93e>
 80065f4:	9d01      	ldr	r5, [sp, #4]
 80065f6:	2331      	movs	r3, #49	; 0x31
 80065f8:	f805 3b01 	strb.w	r3, [r5], #1
 80065fc:	9b00      	ldr	r3, [sp, #0]
 80065fe:	3301      	adds	r3, #1
 8006600:	9300      	str	r3, [sp, #0]
 8006602:	e240      	b.n	8006a86 <_dtoa_r+0x946>
 8006604:	07f2      	lsls	r2, r6, #31
 8006606:	d505      	bpl.n	8006614 <_dtoa_r+0x4d4>
 8006608:	e9d7 2300 	ldrd	r2, r3, [r7]
 800660c:	f7fa f814 	bl	8000638 <__aeabi_dmul>
 8006610:	3501      	adds	r5, #1
 8006612:	2301      	movs	r3, #1
 8006614:	1076      	asrs	r6, r6, #1
 8006616:	3708      	adds	r7, #8
 8006618:	e777      	b.n	800650a <_dtoa_r+0x3ca>
 800661a:	2502      	movs	r5, #2
 800661c:	e779      	b.n	8006512 <_dtoa_r+0x3d2>
 800661e:	9f00      	ldr	r7, [sp, #0]
 8006620:	9e03      	ldr	r6, [sp, #12]
 8006622:	e794      	b.n	800654e <_dtoa_r+0x40e>
 8006624:	9901      	ldr	r1, [sp, #4]
 8006626:	4b4c      	ldr	r3, [pc, #304]	; (8006758 <_dtoa_r+0x618>)
 8006628:	4431      	add	r1, r6
 800662a:	910d      	str	r1, [sp, #52]	; 0x34
 800662c:	9908      	ldr	r1, [sp, #32]
 800662e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006632:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006636:	2900      	cmp	r1, #0
 8006638:	d043      	beq.n	80066c2 <_dtoa_r+0x582>
 800663a:	494d      	ldr	r1, [pc, #308]	; (8006770 <_dtoa_r+0x630>)
 800663c:	2000      	movs	r0, #0
 800663e:	f7fa f925 	bl	800088c <__aeabi_ddiv>
 8006642:	4652      	mov	r2, sl
 8006644:	465b      	mov	r3, fp
 8006646:	f7f9 fe3f 	bl	80002c8 <__aeabi_dsub>
 800664a:	9d01      	ldr	r5, [sp, #4]
 800664c:	4682      	mov	sl, r0
 800664e:	468b      	mov	fp, r1
 8006650:	4649      	mov	r1, r9
 8006652:	4640      	mov	r0, r8
 8006654:	f7fa faa0 	bl	8000b98 <__aeabi_d2iz>
 8006658:	4606      	mov	r6, r0
 800665a:	f7f9 ff83 	bl	8000564 <__aeabi_i2d>
 800665e:	4602      	mov	r2, r0
 8006660:	460b      	mov	r3, r1
 8006662:	4640      	mov	r0, r8
 8006664:	4649      	mov	r1, r9
 8006666:	f7f9 fe2f 	bl	80002c8 <__aeabi_dsub>
 800666a:	3630      	adds	r6, #48	; 0x30
 800666c:	f805 6b01 	strb.w	r6, [r5], #1
 8006670:	4652      	mov	r2, sl
 8006672:	465b      	mov	r3, fp
 8006674:	4680      	mov	r8, r0
 8006676:	4689      	mov	r9, r1
 8006678:	f7fa fa50 	bl	8000b1c <__aeabi_dcmplt>
 800667c:	2800      	cmp	r0, #0
 800667e:	d163      	bne.n	8006748 <_dtoa_r+0x608>
 8006680:	4642      	mov	r2, r8
 8006682:	464b      	mov	r3, r9
 8006684:	4936      	ldr	r1, [pc, #216]	; (8006760 <_dtoa_r+0x620>)
 8006686:	2000      	movs	r0, #0
 8006688:	f7f9 fe1e 	bl	80002c8 <__aeabi_dsub>
 800668c:	4652      	mov	r2, sl
 800668e:	465b      	mov	r3, fp
 8006690:	f7fa fa44 	bl	8000b1c <__aeabi_dcmplt>
 8006694:	2800      	cmp	r0, #0
 8006696:	f040 80b5 	bne.w	8006804 <_dtoa_r+0x6c4>
 800669a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800669c:	429d      	cmp	r5, r3
 800669e:	d081      	beq.n	80065a4 <_dtoa_r+0x464>
 80066a0:	4b30      	ldr	r3, [pc, #192]	; (8006764 <_dtoa_r+0x624>)
 80066a2:	2200      	movs	r2, #0
 80066a4:	4650      	mov	r0, sl
 80066a6:	4659      	mov	r1, fp
 80066a8:	f7f9 ffc6 	bl	8000638 <__aeabi_dmul>
 80066ac:	4b2d      	ldr	r3, [pc, #180]	; (8006764 <_dtoa_r+0x624>)
 80066ae:	4682      	mov	sl, r0
 80066b0:	468b      	mov	fp, r1
 80066b2:	4640      	mov	r0, r8
 80066b4:	4649      	mov	r1, r9
 80066b6:	2200      	movs	r2, #0
 80066b8:	f7f9 ffbe 	bl	8000638 <__aeabi_dmul>
 80066bc:	4680      	mov	r8, r0
 80066be:	4689      	mov	r9, r1
 80066c0:	e7c6      	b.n	8006650 <_dtoa_r+0x510>
 80066c2:	4650      	mov	r0, sl
 80066c4:	4659      	mov	r1, fp
 80066c6:	f7f9 ffb7 	bl	8000638 <__aeabi_dmul>
 80066ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066cc:	9d01      	ldr	r5, [sp, #4]
 80066ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80066d0:	4682      	mov	sl, r0
 80066d2:	468b      	mov	fp, r1
 80066d4:	4649      	mov	r1, r9
 80066d6:	4640      	mov	r0, r8
 80066d8:	f7fa fa5e 	bl	8000b98 <__aeabi_d2iz>
 80066dc:	4606      	mov	r6, r0
 80066de:	f7f9 ff41 	bl	8000564 <__aeabi_i2d>
 80066e2:	3630      	adds	r6, #48	; 0x30
 80066e4:	4602      	mov	r2, r0
 80066e6:	460b      	mov	r3, r1
 80066e8:	4640      	mov	r0, r8
 80066ea:	4649      	mov	r1, r9
 80066ec:	f7f9 fdec 	bl	80002c8 <__aeabi_dsub>
 80066f0:	f805 6b01 	strb.w	r6, [r5], #1
 80066f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066f6:	429d      	cmp	r5, r3
 80066f8:	4680      	mov	r8, r0
 80066fa:	4689      	mov	r9, r1
 80066fc:	f04f 0200 	mov.w	r2, #0
 8006700:	d124      	bne.n	800674c <_dtoa_r+0x60c>
 8006702:	4b1b      	ldr	r3, [pc, #108]	; (8006770 <_dtoa_r+0x630>)
 8006704:	4650      	mov	r0, sl
 8006706:	4659      	mov	r1, fp
 8006708:	f7f9 fde0 	bl	80002cc <__adddf3>
 800670c:	4602      	mov	r2, r0
 800670e:	460b      	mov	r3, r1
 8006710:	4640      	mov	r0, r8
 8006712:	4649      	mov	r1, r9
 8006714:	f7fa fa20 	bl	8000b58 <__aeabi_dcmpgt>
 8006718:	2800      	cmp	r0, #0
 800671a:	d173      	bne.n	8006804 <_dtoa_r+0x6c4>
 800671c:	4652      	mov	r2, sl
 800671e:	465b      	mov	r3, fp
 8006720:	4913      	ldr	r1, [pc, #76]	; (8006770 <_dtoa_r+0x630>)
 8006722:	2000      	movs	r0, #0
 8006724:	f7f9 fdd0 	bl	80002c8 <__aeabi_dsub>
 8006728:	4602      	mov	r2, r0
 800672a:	460b      	mov	r3, r1
 800672c:	4640      	mov	r0, r8
 800672e:	4649      	mov	r1, r9
 8006730:	f7fa f9f4 	bl	8000b1c <__aeabi_dcmplt>
 8006734:	2800      	cmp	r0, #0
 8006736:	f43f af35 	beq.w	80065a4 <_dtoa_r+0x464>
 800673a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800673c:	1e6b      	subs	r3, r5, #1
 800673e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006740:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006744:	2b30      	cmp	r3, #48	; 0x30
 8006746:	d0f8      	beq.n	800673a <_dtoa_r+0x5fa>
 8006748:	9700      	str	r7, [sp, #0]
 800674a:	e049      	b.n	80067e0 <_dtoa_r+0x6a0>
 800674c:	4b05      	ldr	r3, [pc, #20]	; (8006764 <_dtoa_r+0x624>)
 800674e:	f7f9 ff73 	bl	8000638 <__aeabi_dmul>
 8006752:	4680      	mov	r8, r0
 8006754:	4689      	mov	r9, r1
 8006756:	e7bd      	b.n	80066d4 <_dtoa_r+0x594>
 8006758:	08008ea8 	.word	0x08008ea8
 800675c:	08008e80 	.word	0x08008e80
 8006760:	3ff00000 	.word	0x3ff00000
 8006764:	40240000 	.word	0x40240000
 8006768:	401c0000 	.word	0x401c0000
 800676c:	40140000 	.word	0x40140000
 8006770:	3fe00000 	.word	0x3fe00000
 8006774:	9d01      	ldr	r5, [sp, #4]
 8006776:	4656      	mov	r6, sl
 8006778:	465f      	mov	r7, fp
 800677a:	4642      	mov	r2, r8
 800677c:	464b      	mov	r3, r9
 800677e:	4630      	mov	r0, r6
 8006780:	4639      	mov	r1, r7
 8006782:	f7fa f883 	bl	800088c <__aeabi_ddiv>
 8006786:	f7fa fa07 	bl	8000b98 <__aeabi_d2iz>
 800678a:	4682      	mov	sl, r0
 800678c:	f7f9 feea 	bl	8000564 <__aeabi_i2d>
 8006790:	4642      	mov	r2, r8
 8006792:	464b      	mov	r3, r9
 8006794:	f7f9 ff50 	bl	8000638 <__aeabi_dmul>
 8006798:	4602      	mov	r2, r0
 800679a:	460b      	mov	r3, r1
 800679c:	4630      	mov	r0, r6
 800679e:	4639      	mov	r1, r7
 80067a0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80067a4:	f7f9 fd90 	bl	80002c8 <__aeabi_dsub>
 80067a8:	f805 6b01 	strb.w	r6, [r5], #1
 80067ac:	9e01      	ldr	r6, [sp, #4]
 80067ae:	9f03      	ldr	r7, [sp, #12]
 80067b0:	1bae      	subs	r6, r5, r6
 80067b2:	42b7      	cmp	r7, r6
 80067b4:	4602      	mov	r2, r0
 80067b6:	460b      	mov	r3, r1
 80067b8:	d135      	bne.n	8006826 <_dtoa_r+0x6e6>
 80067ba:	f7f9 fd87 	bl	80002cc <__adddf3>
 80067be:	4642      	mov	r2, r8
 80067c0:	464b      	mov	r3, r9
 80067c2:	4606      	mov	r6, r0
 80067c4:	460f      	mov	r7, r1
 80067c6:	f7fa f9c7 	bl	8000b58 <__aeabi_dcmpgt>
 80067ca:	b9d0      	cbnz	r0, 8006802 <_dtoa_r+0x6c2>
 80067cc:	4642      	mov	r2, r8
 80067ce:	464b      	mov	r3, r9
 80067d0:	4630      	mov	r0, r6
 80067d2:	4639      	mov	r1, r7
 80067d4:	f7fa f998 	bl	8000b08 <__aeabi_dcmpeq>
 80067d8:	b110      	cbz	r0, 80067e0 <_dtoa_r+0x6a0>
 80067da:	f01a 0f01 	tst.w	sl, #1
 80067de:	d110      	bne.n	8006802 <_dtoa_r+0x6c2>
 80067e0:	4620      	mov	r0, r4
 80067e2:	ee18 1a10 	vmov	r1, s16
 80067e6:	f000 fd13 	bl	8007210 <_Bfree>
 80067ea:	2300      	movs	r3, #0
 80067ec:	9800      	ldr	r0, [sp, #0]
 80067ee:	702b      	strb	r3, [r5, #0]
 80067f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067f2:	3001      	adds	r0, #1
 80067f4:	6018      	str	r0, [r3, #0]
 80067f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f43f acf1 	beq.w	80061e0 <_dtoa_r+0xa0>
 80067fe:	601d      	str	r5, [r3, #0]
 8006800:	e4ee      	b.n	80061e0 <_dtoa_r+0xa0>
 8006802:	9f00      	ldr	r7, [sp, #0]
 8006804:	462b      	mov	r3, r5
 8006806:	461d      	mov	r5, r3
 8006808:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800680c:	2a39      	cmp	r2, #57	; 0x39
 800680e:	d106      	bne.n	800681e <_dtoa_r+0x6de>
 8006810:	9a01      	ldr	r2, [sp, #4]
 8006812:	429a      	cmp	r2, r3
 8006814:	d1f7      	bne.n	8006806 <_dtoa_r+0x6c6>
 8006816:	9901      	ldr	r1, [sp, #4]
 8006818:	2230      	movs	r2, #48	; 0x30
 800681a:	3701      	adds	r7, #1
 800681c:	700a      	strb	r2, [r1, #0]
 800681e:	781a      	ldrb	r2, [r3, #0]
 8006820:	3201      	adds	r2, #1
 8006822:	701a      	strb	r2, [r3, #0]
 8006824:	e790      	b.n	8006748 <_dtoa_r+0x608>
 8006826:	4ba6      	ldr	r3, [pc, #664]	; (8006ac0 <_dtoa_r+0x980>)
 8006828:	2200      	movs	r2, #0
 800682a:	f7f9 ff05 	bl	8000638 <__aeabi_dmul>
 800682e:	2200      	movs	r2, #0
 8006830:	2300      	movs	r3, #0
 8006832:	4606      	mov	r6, r0
 8006834:	460f      	mov	r7, r1
 8006836:	f7fa f967 	bl	8000b08 <__aeabi_dcmpeq>
 800683a:	2800      	cmp	r0, #0
 800683c:	d09d      	beq.n	800677a <_dtoa_r+0x63a>
 800683e:	e7cf      	b.n	80067e0 <_dtoa_r+0x6a0>
 8006840:	9a08      	ldr	r2, [sp, #32]
 8006842:	2a00      	cmp	r2, #0
 8006844:	f000 80d7 	beq.w	80069f6 <_dtoa_r+0x8b6>
 8006848:	9a06      	ldr	r2, [sp, #24]
 800684a:	2a01      	cmp	r2, #1
 800684c:	f300 80ba 	bgt.w	80069c4 <_dtoa_r+0x884>
 8006850:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006852:	2a00      	cmp	r2, #0
 8006854:	f000 80b2 	beq.w	80069bc <_dtoa_r+0x87c>
 8006858:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800685c:	9e07      	ldr	r6, [sp, #28]
 800685e:	9d04      	ldr	r5, [sp, #16]
 8006860:	9a04      	ldr	r2, [sp, #16]
 8006862:	441a      	add	r2, r3
 8006864:	9204      	str	r2, [sp, #16]
 8006866:	9a05      	ldr	r2, [sp, #20]
 8006868:	2101      	movs	r1, #1
 800686a:	441a      	add	r2, r3
 800686c:	4620      	mov	r0, r4
 800686e:	9205      	str	r2, [sp, #20]
 8006870:	f000 fd86 	bl	8007380 <__i2b>
 8006874:	4607      	mov	r7, r0
 8006876:	2d00      	cmp	r5, #0
 8006878:	dd0c      	ble.n	8006894 <_dtoa_r+0x754>
 800687a:	9b05      	ldr	r3, [sp, #20]
 800687c:	2b00      	cmp	r3, #0
 800687e:	dd09      	ble.n	8006894 <_dtoa_r+0x754>
 8006880:	42ab      	cmp	r3, r5
 8006882:	9a04      	ldr	r2, [sp, #16]
 8006884:	bfa8      	it	ge
 8006886:	462b      	movge	r3, r5
 8006888:	1ad2      	subs	r2, r2, r3
 800688a:	9204      	str	r2, [sp, #16]
 800688c:	9a05      	ldr	r2, [sp, #20]
 800688e:	1aed      	subs	r5, r5, r3
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	9305      	str	r3, [sp, #20]
 8006894:	9b07      	ldr	r3, [sp, #28]
 8006896:	b31b      	cbz	r3, 80068e0 <_dtoa_r+0x7a0>
 8006898:	9b08      	ldr	r3, [sp, #32]
 800689a:	2b00      	cmp	r3, #0
 800689c:	f000 80af 	beq.w	80069fe <_dtoa_r+0x8be>
 80068a0:	2e00      	cmp	r6, #0
 80068a2:	dd13      	ble.n	80068cc <_dtoa_r+0x78c>
 80068a4:	4639      	mov	r1, r7
 80068a6:	4632      	mov	r2, r6
 80068a8:	4620      	mov	r0, r4
 80068aa:	f000 fe29 	bl	8007500 <__pow5mult>
 80068ae:	ee18 2a10 	vmov	r2, s16
 80068b2:	4601      	mov	r1, r0
 80068b4:	4607      	mov	r7, r0
 80068b6:	4620      	mov	r0, r4
 80068b8:	f000 fd78 	bl	80073ac <__multiply>
 80068bc:	ee18 1a10 	vmov	r1, s16
 80068c0:	4680      	mov	r8, r0
 80068c2:	4620      	mov	r0, r4
 80068c4:	f000 fca4 	bl	8007210 <_Bfree>
 80068c8:	ee08 8a10 	vmov	s16, r8
 80068cc:	9b07      	ldr	r3, [sp, #28]
 80068ce:	1b9a      	subs	r2, r3, r6
 80068d0:	d006      	beq.n	80068e0 <_dtoa_r+0x7a0>
 80068d2:	ee18 1a10 	vmov	r1, s16
 80068d6:	4620      	mov	r0, r4
 80068d8:	f000 fe12 	bl	8007500 <__pow5mult>
 80068dc:	ee08 0a10 	vmov	s16, r0
 80068e0:	2101      	movs	r1, #1
 80068e2:	4620      	mov	r0, r4
 80068e4:	f000 fd4c 	bl	8007380 <__i2b>
 80068e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	4606      	mov	r6, r0
 80068ee:	f340 8088 	ble.w	8006a02 <_dtoa_r+0x8c2>
 80068f2:	461a      	mov	r2, r3
 80068f4:	4601      	mov	r1, r0
 80068f6:	4620      	mov	r0, r4
 80068f8:	f000 fe02 	bl	8007500 <__pow5mult>
 80068fc:	9b06      	ldr	r3, [sp, #24]
 80068fe:	2b01      	cmp	r3, #1
 8006900:	4606      	mov	r6, r0
 8006902:	f340 8081 	ble.w	8006a08 <_dtoa_r+0x8c8>
 8006906:	f04f 0800 	mov.w	r8, #0
 800690a:	6933      	ldr	r3, [r6, #16]
 800690c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006910:	6918      	ldr	r0, [r3, #16]
 8006912:	f000 fce5 	bl	80072e0 <__hi0bits>
 8006916:	f1c0 0020 	rsb	r0, r0, #32
 800691a:	9b05      	ldr	r3, [sp, #20]
 800691c:	4418      	add	r0, r3
 800691e:	f010 001f 	ands.w	r0, r0, #31
 8006922:	f000 8092 	beq.w	8006a4a <_dtoa_r+0x90a>
 8006926:	f1c0 0320 	rsb	r3, r0, #32
 800692a:	2b04      	cmp	r3, #4
 800692c:	f340 808a 	ble.w	8006a44 <_dtoa_r+0x904>
 8006930:	f1c0 001c 	rsb	r0, r0, #28
 8006934:	9b04      	ldr	r3, [sp, #16]
 8006936:	4403      	add	r3, r0
 8006938:	9304      	str	r3, [sp, #16]
 800693a:	9b05      	ldr	r3, [sp, #20]
 800693c:	4403      	add	r3, r0
 800693e:	4405      	add	r5, r0
 8006940:	9305      	str	r3, [sp, #20]
 8006942:	9b04      	ldr	r3, [sp, #16]
 8006944:	2b00      	cmp	r3, #0
 8006946:	dd07      	ble.n	8006958 <_dtoa_r+0x818>
 8006948:	ee18 1a10 	vmov	r1, s16
 800694c:	461a      	mov	r2, r3
 800694e:	4620      	mov	r0, r4
 8006950:	f000 fe30 	bl	80075b4 <__lshift>
 8006954:	ee08 0a10 	vmov	s16, r0
 8006958:	9b05      	ldr	r3, [sp, #20]
 800695a:	2b00      	cmp	r3, #0
 800695c:	dd05      	ble.n	800696a <_dtoa_r+0x82a>
 800695e:	4631      	mov	r1, r6
 8006960:	461a      	mov	r2, r3
 8006962:	4620      	mov	r0, r4
 8006964:	f000 fe26 	bl	80075b4 <__lshift>
 8006968:	4606      	mov	r6, r0
 800696a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800696c:	2b00      	cmp	r3, #0
 800696e:	d06e      	beq.n	8006a4e <_dtoa_r+0x90e>
 8006970:	ee18 0a10 	vmov	r0, s16
 8006974:	4631      	mov	r1, r6
 8006976:	f000 fe8d 	bl	8007694 <__mcmp>
 800697a:	2800      	cmp	r0, #0
 800697c:	da67      	bge.n	8006a4e <_dtoa_r+0x90e>
 800697e:	9b00      	ldr	r3, [sp, #0]
 8006980:	3b01      	subs	r3, #1
 8006982:	ee18 1a10 	vmov	r1, s16
 8006986:	9300      	str	r3, [sp, #0]
 8006988:	220a      	movs	r2, #10
 800698a:	2300      	movs	r3, #0
 800698c:	4620      	mov	r0, r4
 800698e:	f000 fc61 	bl	8007254 <__multadd>
 8006992:	9b08      	ldr	r3, [sp, #32]
 8006994:	ee08 0a10 	vmov	s16, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	f000 81b1 	beq.w	8006d00 <_dtoa_r+0xbc0>
 800699e:	2300      	movs	r3, #0
 80069a0:	4639      	mov	r1, r7
 80069a2:	220a      	movs	r2, #10
 80069a4:	4620      	mov	r0, r4
 80069a6:	f000 fc55 	bl	8007254 <__multadd>
 80069aa:	9b02      	ldr	r3, [sp, #8]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	4607      	mov	r7, r0
 80069b0:	f300 808e 	bgt.w	8006ad0 <_dtoa_r+0x990>
 80069b4:	9b06      	ldr	r3, [sp, #24]
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	dc51      	bgt.n	8006a5e <_dtoa_r+0x91e>
 80069ba:	e089      	b.n	8006ad0 <_dtoa_r+0x990>
 80069bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80069be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80069c2:	e74b      	b.n	800685c <_dtoa_r+0x71c>
 80069c4:	9b03      	ldr	r3, [sp, #12]
 80069c6:	1e5e      	subs	r6, r3, #1
 80069c8:	9b07      	ldr	r3, [sp, #28]
 80069ca:	42b3      	cmp	r3, r6
 80069cc:	bfbf      	itttt	lt
 80069ce:	9b07      	ldrlt	r3, [sp, #28]
 80069d0:	9607      	strlt	r6, [sp, #28]
 80069d2:	1af2      	sublt	r2, r6, r3
 80069d4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80069d6:	bfb6      	itet	lt
 80069d8:	189b      	addlt	r3, r3, r2
 80069da:	1b9e      	subge	r6, r3, r6
 80069dc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80069de:	9b03      	ldr	r3, [sp, #12]
 80069e0:	bfb8      	it	lt
 80069e2:	2600      	movlt	r6, #0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	bfb7      	itett	lt
 80069e8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80069ec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80069f0:	1a9d      	sublt	r5, r3, r2
 80069f2:	2300      	movlt	r3, #0
 80069f4:	e734      	b.n	8006860 <_dtoa_r+0x720>
 80069f6:	9e07      	ldr	r6, [sp, #28]
 80069f8:	9d04      	ldr	r5, [sp, #16]
 80069fa:	9f08      	ldr	r7, [sp, #32]
 80069fc:	e73b      	b.n	8006876 <_dtoa_r+0x736>
 80069fe:	9a07      	ldr	r2, [sp, #28]
 8006a00:	e767      	b.n	80068d2 <_dtoa_r+0x792>
 8006a02:	9b06      	ldr	r3, [sp, #24]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	dc18      	bgt.n	8006a3a <_dtoa_r+0x8fa>
 8006a08:	f1ba 0f00 	cmp.w	sl, #0
 8006a0c:	d115      	bne.n	8006a3a <_dtoa_r+0x8fa>
 8006a0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a12:	b993      	cbnz	r3, 8006a3a <_dtoa_r+0x8fa>
 8006a14:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006a18:	0d1b      	lsrs	r3, r3, #20
 8006a1a:	051b      	lsls	r3, r3, #20
 8006a1c:	b183      	cbz	r3, 8006a40 <_dtoa_r+0x900>
 8006a1e:	9b04      	ldr	r3, [sp, #16]
 8006a20:	3301      	adds	r3, #1
 8006a22:	9304      	str	r3, [sp, #16]
 8006a24:	9b05      	ldr	r3, [sp, #20]
 8006a26:	3301      	adds	r3, #1
 8006a28:	9305      	str	r3, [sp, #20]
 8006a2a:	f04f 0801 	mov.w	r8, #1
 8006a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f47f af6a 	bne.w	800690a <_dtoa_r+0x7ca>
 8006a36:	2001      	movs	r0, #1
 8006a38:	e76f      	b.n	800691a <_dtoa_r+0x7da>
 8006a3a:	f04f 0800 	mov.w	r8, #0
 8006a3e:	e7f6      	b.n	8006a2e <_dtoa_r+0x8ee>
 8006a40:	4698      	mov	r8, r3
 8006a42:	e7f4      	b.n	8006a2e <_dtoa_r+0x8ee>
 8006a44:	f43f af7d 	beq.w	8006942 <_dtoa_r+0x802>
 8006a48:	4618      	mov	r0, r3
 8006a4a:	301c      	adds	r0, #28
 8006a4c:	e772      	b.n	8006934 <_dtoa_r+0x7f4>
 8006a4e:	9b03      	ldr	r3, [sp, #12]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	dc37      	bgt.n	8006ac4 <_dtoa_r+0x984>
 8006a54:	9b06      	ldr	r3, [sp, #24]
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	dd34      	ble.n	8006ac4 <_dtoa_r+0x984>
 8006a5a:	9b03      	ldr	r3, [sp, #12]
 8006a5c:	9302      	str	r3, [sp, #8]
 8006a5e:	9b02      	ldr	r3, [sp, #8]
 8006a60:	b96b      	cbnz	r3, 8006a7e <_dtoa_r+0x93e>
 8006a62:	4631      	mov	r1, r6
 8006a64:	2205      	movs	r2, #5
 8006a66:	4620      	mov	r0, r4
 8006a68:	f000 fbf4 	bl	8007254 <__multadd>
 8006a6c:	4601      	mov	r1, r0
 8006a6e:	4606      	mov	r6, r0
 8006a70:	ee18 0a10 	vmov	r0, s16
 8006a74:	f000 fe0e 	bl	8007694 <__mcmp>
 8006a78:	2800      	cmp	r0, #0
 8006a7a:	f73f adbb 	bgt.w	80065f4 <_dtoa_r+0x4b4>
 8006a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a80:	9d01      	ldr	r5, [sp, #4]
 8006a82:	43db      	mvns	r3, r3
 8006a84:	9300      	str	r3, [sp, #0]
 8006a86:	f04f 0800 	mov.w	r8, #0
 8006a8a:	4631      	mov	r1, r6
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	f000 fbbf 	bl	8007210 <_Bfree>
 8006a92:	2f00      	cmp	r7, #0
 8006a94:	f43f aea4 	beq.w	80067e0 <_dtoa_r+0x6a0>
 8006a98:	f1b8 0f00 	cmp.w	r8, #0
 8006a9c:	d005      	beq.n	8006aaa <_dtoa_r+0x96a>
 8006a9e:	45b8      	cmp	r8, r7
 8006aa0:	d003      	beq.n	8006aaa <_dtoa_r+0x96a>
 8006aa2:	4641      	mov	r1, r8
 8006aa4:	4620      	mov	r0, r4
 8006aa6:	f000 fbb3 	bl	8007210 <_Bfree>
 8006aaa:	4639      	mov	r1, r7
 8006aac:	4620      	mov	r0, r4
 8006aae:	f000 fbaf 	bl	8007210 <_Bfree>
 8006ab2:	e695      	b.n	80067e0 <_dtoa_r+0x6a0>
 8006ab4:	2600      	movs	r6, #0
 8006ab6:	4637      	mov	r7, r6
 8006ab8:	e7e1      	b.n	8006a7e <_dtoa_r+0x93e>
 8006aba:	9700      	str	r7, [sp, #0]
 8006abc:	4637      	mov	r7, r6
 8006abe:	e599      	b.n	80065f4 <_dtoa_r+0x4b4>
 8006ac0:	40240000 	.word	0x40240000
 8006ac4:	9b08      	ldr	r3, [sp, #32]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f000 80ca 	beq.w	8006c60 <_dtoa_r+0xb20>
 8006acc:	9b03      	ldr	r3, [sp, #12]
 8006ace:	9302      	str	r3, [sp, #8]
 8006ad0:	2d00      	cmp	r5, #0
 8006ad2:	dd05      	ble.n	8006ae0 <_dtoa_r+0x9a0>
 8006ad4:	4639      	mov	r1, r7
 8006ad6:	462a      	mov	r2, r5
 8006ad8:	4620      	mov	r0, r4
 8006ada:	f000 fd6b 	bl	80075b4 <__lshift>
 8006ade:	4607      	mov	r7, r0
 8006ae0:	f1b8 0f00 	cmp.w	r8, #0
 8006ae4:	d05b      	beq.n	8006b9e <_dtoa_r+0xa5e>
 8006ae6:	6879      	ldr	r1, [r7, #4]
 8006ae8:	4620      	mov	r0, r4
 8006aea:	f000 fb51 	bl	8007190 <_Balloc>
 8006aee:	4605      	mov	r5, r0
 8006af0:	b928      	cbnz	r0, 8006afe <_dtoa_r+0x9be>
 8006af2:	4b87      	ldr	r3, [pc, #540]	; (8006d10 <_dtoa_r+0xbd0>)
 8006af4:	4602      	mov	r2, r0
 8006af6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006afa:	f7ff bb3b 	b.w	8006174 <_dtoa_r+0x34>
 8006afe:	693a      	ldr	r2, [r7, #16]
 8006b00:	3202      	adds	r2, #2
 8006b02:	0092      	lsls	r2, r2, #2
 8006b04:	f107 010c 	add.w	r1, r7, #12
 8006b08:	300c      	adds	r0, #12
 8006b0a:	f000 fb33 	bl	8007174 <memcpy>
 8006b0e:	2201      	movs	r2, #1
 8006b10:	4629      	mov	r1, r5
 8006b12:	4620      	mov	r0, r4
 8006b14:	f000 fd4e 	bl	80075b4 <__lshift>
 8006b18:	9b01      	ldr	r3, [sp, #4]
 8006b1a:	f103 0901 	add.w	r9, r3, #1
 8006b1e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006b22:	4413      	add	r3, r2
 8006b24:	9305      	str	r3, [sp, #20]
 8006b26:	f00a 0301 	and.w	r3, sl, #1
 8006b2a:	46b8      	mov	r8, r7
 8006b2c:	9304      	str	r3, [sp, #16]
 8006b2e:	4607      	mov	r7, r0
 8006b30:	4631      	mov	r1, r6
 8006b32:	ee18 0a10 	vmov	r0, s16
 8006b36:	f7ff fa77 	bl	8006028 <quorem>
 8006b3a:	4641      	mov	r1, r8
 8006b3c:	9002      	str	r0, [sp, #8]
 8006b3e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006b42:	ee18 0a10 	vmov	r0, s16
 8006b46:	f000 fda5 	bl	8007694 <__mcmp>
 8006b4a:	463a      	mov	r2, r7
 8006b4c:	9003      	str	r0, [sp, #12]
 8006b4e:	4631      	mov	r1, r6
 8006b50:	4620      	mov	r0, r4
 8006b52:	f000 fdbb 	bl	80076cc <__mdiff>
 8006b56:	68c2      	ldr	r2, [r0, #12]
 8006b58:	f109 3bff 	add.w	fp, r9, #4294967295
 8006b5c:	4605      	mov	r5, r0
 8006b5e:	bb02      	cbnz	r2, 8006ba2 <_dtoa_r+0xa62>
 8006b60:	4601      	mov	r1, r0
 8006b62:	ee18 0a10 	vmov	r0, s16
 8006b66:	f000 fd95 	bl	8007694 <__mcmp>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	4629      	mov	r1, r5
 8006b6e:	4620      	mov	r0, r4
 8006b70:	9207      	str	r2, [sp, #28]
 8006b72:	f000 fb4d 	bl	8007210 <_Bfree>
 8006b76:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006b7a:	ea43 0102 	orr.w	r1, r3, r2
 8006b7e:	9b04      	ldr	r3, [sp, #16]
 8006b80:	430b      	orrs	r3, r1
 8006b82:	464d      	mov	r5, r9
 8006b84:	d10f      	bne.n	8006ba6 <_dtoa_r+0xa66>
 8006b86:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006b8a:	d02a      	beq.n	8006be2 <_dtoa_r+0xaa2>
 8006b8c:	9b03      	ldr	r3, [sp, #12]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	dd02      	ble.n	8006b98 <_dtoa_r+0xa58>
 8006b92:	9b02      	ldr	r3, [sp, #8]
 8006b94:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006b98:	f88b a000 	strb.w	sl, [fp]
 8006b9c:	e775      	b.n	8006a8a <_dtoa_r+0x94a>
 8006b9e:	4638      	mov	r0, r7
 8006ba0:	e7ba      	b.n	8006b18 <_dtoa_r+0x9d8>
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	e7e2      	b.n	8006b6c <_dtoa_r+0xa2c>
 8006ba6:	9b03      	ldr	r3, [sp, #12]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	db04      	blt.n	8006bb6 <_dtoa_r+0xa76>
 8006bac:	9906      	ldr	r1, [sp, #24]
 8006bae:	430b      	orrs	r3, r1
 8006bb0:	9904      	ldr	r1, [sp, #16]
 8006bb2:	430b      	orrs	r3, r1
 8006bb4:	d122      	bne.n	8006bfc <_dtoa_r+0xabc>
 8006bb6:	2a00      	cmp	r2, #0
 8006bb8:	ddee      	ble.n	8006b98 <_dtoa_r+0xa58>
 8006bba:	ee18 1a10 	vmov	r1, s16
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	f000 fcf7 	bl	80075b4 <__lshift>
 8006bc6:	4631      	mov	r1, r6
 8006bc8:	ee08 0a10 	vmov	s16, r0
 8006bcc:	f000 fd62 	bl	8007694 <__mcmp>
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	dc03      	bgt.n	8006bdc <_dtoa_r+0xa9c>
 8006bd4:	d1e0      	bne.n	8006b98 <_dtoa_r+0xa58>
 8006bd6:	f01a 0f01 	tst.w	sl, #1
 8006bda:	d0dd      	beq.n	8006b98 <_dtoa_r+0xa58>
 8006bdc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006be0:	d1d7      	bne.n	8006b92 <_dtoa_r+0xa52>
 8006be2:	2339      	movs	r3, #57	; 0x39
 8006be4:	f88b 3000 	strb.w	r3, [fp]
 8006be8:	462b      	mov	r3, r5
 8006bea:	461d      	mov	r5, r3
 8006bec:	3b01      	subs	r3, #1
 8006bee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006bf2:	2a39      	cmp	r2, #57	; 0x39
 8006bf4:	d071      	beq.n	8006cda <_dtoa_r+0xb9a>
 8006bf6:	3201      	adds	r2, #1
 8006bf8:	701a      	strb	r2, [r3, #0]
 8006bfa:	e746      	b.n	8006a8a <_dtoa_r+0x94a>
 8006bfc:	2a00      	cmp	r2, #0
 8006bfe:	dd07      	ble.n	8006c10 <_dtoa_r+0xad0>
 8006c00:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006c04:	d0ed      	beq.n	8006be2 <_dtoa_r+0xaa2>
 8006c06:	f10a 0301 	add.w	r3, sl, #1
 8006c0a:	f88b 3000 	strb.w	r3, [fp]
 8006c0e:	e73c      	b.n	8006a8a <_dtoa_r+0x94a>
 8006c10:	9b05      	ldr	r3, [sp, #20]
 8006c12:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006c16:	4599      	cmp	r9, r3
 8006c18:	d047      	beq.n	8006caa <_dtoa_r+0xb6a>
 8006c1a:	ee18 1a10 	vmov	r1, s16
 8006c1e:	2300      	movs	r3, #0
 8006c20:	220a      	movs	r2, #10
 8006c22:	4620      	mov	r0, r4
 8006c24:	f000 fb16 	bl	8007254 <__multadd>
 8006c28:	45b8      	cmp	r8, r7
 8006c2a:	ee08 0a10 	vmov	s16, r0
 8006c2e:	f04f 0300 	mov.w	r3, #0
 8006c32:	f04f 020a 	mov.w	r2, #10
 8006c36:	4641      	mov	r1, r8
 8006c38:	4620      	mov	r0, r4
 8006c3a:	d106      	bne.n	8006c4a <_dtoa_r+0xb0a>
 8006c3c:	f000 fb0a 	bl	8007254 <__multadd>
 8006c40:	4680      	mov	r8, r0
 8006c42:	4607      	mov	r7, r0
 8006c44:	f109 0901 	add.w	r9, r9, #1
 8006c48:	e772      	b.n	8006b30 <_dtoa_r+0x9f0>
 8006c4a:	f000 fb03 	bl	8007254 <__multadd>
 8006c4e:	4639      	mov	r1, r7
 8006c50:	4680      	mov	r8, r0
 8006c52:	2300      	movs	r3, #0
 8006c54:	220a      	movs	r2, #10
 8006c56:	4620      	mov	r0, r4
 8006c58:	f000 fafc 	bl	8007254 <__multadd>
 8006c5c:	4607      	mov	r7, r0
 8006c5e:	e7f1      	b.n	8006c44 <_dtoa_r+0xb04>
 8006c60:	9b03      	ldr	r3, [sp, #12]
 8006c62:	9302      	str	r3, [sp, #8]
 8006c64:	9d01      	ldr	r5, [sp, #4]
 8006c66:	ee18 0a10 	vmov	r0, s16
 8006c6a:	4631      	mov	r1, r6
 8006c6c:	f7ff f9dc 	bl	8006028 <quorem>
 8006c70:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006c74:	9b01      	ldr	r3, [sp, #4]
 8006c76:	f805 ab01 	strb.w	sl, [r5], #1
 8006c7a:	1aea      	subs	r2, r5, r3
 8006c7c:	9b02      	ldr	r3, [sp, #8]
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	dd09      	ble.n	8006c96 <_dtoa_r+0xb56>
 8006c82:	ee18 1a10 	vmov	r1, s16
 8006c86:	2300      	movs	r3, #0
 8006c88:	220a      	movs	r2, #10
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	f000 fae2 	bl	8007254 <__multadd>
 8006c90:	ee08 0a10 	vmov	s16, r0
 8006c94:	e7e7      	b.n	8006c66 <_dtoa_r+0xb26>
 8006c96:	9b02      	ldr	r3, [sp, #8]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	bfc8      	it	gt
 8006c9c:	461d      	movgt	r5, r3
 8006c9e:	9b01      	ldr	r3, [sp, #4]
 8006ca0:	bfd8      	it	le
 8006ca2:	2501      	movle	r5, #1
 8006ca4:	441d      	add	r5, r3
 8006ca6:	f04f 0800 	mov.w	r8, #0
 8006caa:	ee18 1a10 	vmov	r1, s16
 8006cae:	2201      	movs	r2, #1
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	f000 fc7f 	bl	80075b4 <__lshift>
 8006cb6:	4631      	mov	r1, r6
 8006cb8:	ee08 0a10 	vmov	s16, r0
 8006cbc:	f000 fcea 	bl	8007694 <__mcmp>
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	dc91      	bgt.n	8006be8 <_dtoa_r+0xaa8>
 8006cc4:	d102      	bne.n	8006ccc <_dtoa_r+0xb8c>
 8006cc6:	f01a 0f01 	tst.w	sl, #1
 8006cca:	d18d      	bne.n	8006be8 <_dtoa_r+0xaa8>
 8006ccc:	462b      	mov	r3, r5
 8006cce:	461d      	mov	r5, r3
 8006cd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cd4:	2a30      	cmp	r2, #48	; 0x30
 8006cd6:	d0fa      	beq.n	8006cce <_dtoa_r+0xb8e>
 8006cd8:	e6d7      	b.n	8006a8a <_dtoa_r+0x94a>
 8006cda:	9a01      	ldr	r2, [sp, #4]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d184      	bne.n	8006bea <_dtoa_r+0xaaa>
 8006ce0:	9b00      	ldr	r3, [sp, #0]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	9300      	str	r3, [sp, #0]
 8006ce6:	2331      	movs	r3, #49	; 0x31
 8006ce8:	7013      	strb	r3, [r2, #0]
 8006cea:	e6ce      	b.n	8006a8a <_dtoa_r+0x94a>
 8006cec:	4b09      	ldr	r3, [pc, #36]	; (8006d14 <_dtoa_r+0xbd4>)
 8006cee:	f7ff ba95 	b.w	800621c <_dtoa_r+0xdc>
 8006cf2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f47f aa6e 	bne.w	80061d6 <_dtoa_r+0x96>
 8006cfa:	4b07      	ldr	r3, [pc, #28]	; (8006d18 <_dtoa_r+0xbd8>)
 8006cfc:	f7ff ba8e 	b.w	800621c <_dtoa_r+0xdc>
 8006d00:	9b02      	ldr	r3, [sp, #8]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	dcae      	bgt.n	8006c64 <_dtoa_r+0xb24>
 8006d06:	9b06      	ldr	r3, [sp, #24]
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	f73f aea8 	bgt.w	8006a5e <_dtoa_r+0x91e>
 8006d0e:	e7a9      	b.n	8006c64 <_dtoa_r+0xb24>
 8006d10:	08008daf 	.word	0x08008daf
 8006d14:	08008d0c 	.word	0x08008d0c
 8006d18:	08008d30 	.word	0x08008d30

08006d1c <__sflush_r>:
 8006d1c:	898a      	ldrh	r2, [r1, #12]
 8006d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d22:	4605      	mov	r5, r0
 8006d24:	0710      	lsls	r0, r2, #28
 8006d26:	460c      	mov	r4, r1
 8006d28:	d458      	bmi.n	8006ddc <__sflush_r+0xc0>
 8006d2a:	684b      	ldr	r3, [r1, #4]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	dc05      	bgt.n	8006d3c <__sflush_r+0x20>
 8006d30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	dc02      	bgt.n	8006d3c <__sflush_r+0x20>
 8006d36:	2000      	movs	r0, #0
 8006d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d3e:	2e00      	cmp	r6, #0
 8006d40:	d0f9      	beq.n	8006d36 <__sflush_r+0x1a>
 8006d42:	2300      	movs	r3, #0
 8006d44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d48:	682f      	ldr	r7, [r5, #0]
 8006d4a:	602b      	str	r3, [r5, #0]
 8006d4c:	d032      	beq.n	8006db4 <__sflush_r+0x98>
 8006d4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d50:	89a3      	ldrh	r3, [r4, #12]
 8006d52:	075a      	lsls	r2, r3, #29
 8006d54:	d505      	bpl.n	8006d62 <__sflush_r+0x46>
 8006d56:	6863      	ldr	r3, [r4, #4]
 8006d58:	1ac0      	subs	r0, r0, r3
 8006d5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d5c:	b10b      	cbz	r3, 8006d62 <__sflush_r+0x46>
 8006d5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d60:	1ac0      	subs	r0, r0, r3
 8006d62:	2300      	movs	r3, #0
 8006d64:	4602      	mov	r2, r0
 8006d66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d68:	6a21      	ldr	r1, [r4, #32]
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	47b0      	blx	r6
 8006d6e:	1c43      	adds	r3, r0, #1
 8006d70:	89a3      	ldrh	r3, [r4, #12]
 8006d72:	d106      	bne.n	8006d82 <__sflush_r+0x66>
 8006d74:	6829      	ldr	r1, [r5, #0]
 8006d76:	291d      	cmp	r1, #29
 8006d78:	d82c      	bhi.n	8006dd4 <__sflush_r+0xb8>
 8006d7a:	4a2a      	ldr	r2, [pc, #168]	; (8006e24 <__sflush_r+0x108>)
 8006d7c:	40ca      	lsrs	r2, r1
 8006d7e:	07d6      	lsls	r6, r2, #31
 8006d80:	d528      	bpl.n	8006dd4 <__sflush_r+0xb8>
 8006d82:	2200      	movs	r2, #0
 8006d84:	6062      	str	r2, [r4, #4]
 8006d86:	04d9      	lsls	r1, r3, #19
 8006d88:	6922      	ldr	r2, [r4, #16]
 8006d8a:	6022      	str	r2, [r4, #0]
 8006d8c:	d504      	bpl.n	8006d98 <__sflush_r+0x7c>
 8006d8e:	1c42      	adds	r2, r0, #1
 8006d90:	d101      	bne.n	8006d96 <__sflush_r+0x7a>
 8006d92:	682b      	ldr	r3, [r5, #0]
 8006d94:	b903      	cbnz	r3, 8006d98 <__sflush_r+0x7c>
 8006d96:	6560      	str	r0, [r4, #84]	; 0x54
 8006d98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d9a:	602f      	str	r7, [r5, #0]
 8006d9c:	2900      	cmp	r1, #0
 8006d9e:	d0ca      	beq.n	8006d36 <__sflush_r+0x1a>
 8006da0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006da4:	4299      	cmp	r1, r3
 8006da6:	d002      	beq.n	8006dae <__sflush_r+0x92>
 8006da8:	4628      	mov	r0, r5
 8006daa:	f000 fd8b 	bl	80078c4 <_free_r>
 8006dae:	2000      	movs	r0, #0
 8006db0:	6360      	str	r0, [r4, #52]	; 0x34
 8006db2:	e7c1      	b.n	8006d38 <__sflush_r+0x1c>
 8006db4:	6a21      	ldr	r1, [r4, #32]
 8006db6:	2301      	movs	r3, #1
 8006db8:	4628      	mov	r0, r5
 8006dba:	47b0      	blx	r6
 8006dbc:	1c41      	adds	r1, r0, #1
 8006dbe:	d1c7      	bne.n	8006d50 <__sflush_r+0x34>
 8006dc0:	682b      	ldr	r3, [r5, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d0c4      	beq.n	8006d50 <__sflush_r+0x34>
 8006dc6:	2b1d      	cmp	r3, #29
 8006dc8:	d001      	beq.n	8006dce <__sflush_r+0xb2>
 8006dca:	2b16      	cmp	r3, #22
 8006dcc:	d101      	bne.n	8006dd2 <__sflush_r+0xb6>
 8006dce:	602f      	str	r7, [r5, #0]
 8006dd0:	e7b1      	b.n	8006d36 <__sflush_r+0x1a>
 8006dd2:	89a3      	ldrh	r3, [r4, #12]
 8006dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dd8:	81a3      	strh	r3, [r4, #12]
 8006dda:	e7ad      	b.n	8006d38 <__sflush_r+0x1c>
 8006ddc:	690f      	ldr	r7, [r1, #16]
 8006dde:	2f00      	cmp	r7, #0
 8006de0:	d0a9      	beq.n	8006d36 <__sflush_r+0x1a>
 8006de2:	0793      	lsls	r3, r2, #30
 8006de4:	680e      	ldr	r6, [r1, #0]
 8006de6:	bf08      	it	eq
 8006de8:	694b      	ldreq	r3, [r1, #20]
 8006dea:	600f      	str	r7, [r1, #0]
 8006dec:	bf18      	it	ne
 8006dee:	2300      	movne	r3, #0
 8006df0:	eba6 0807 	sub.w	r8, r6, r7
 8006df4:	608b      	str	r3, [r1, #8]
 8006df6:	f1b8 0f00 	cmp.w	r8, #0
 8006dfa:	dd9c      	ble.n	8006d36 <__sflush_r+0x1a>
 8006dfc:	6a21      	ldr	r1, [r4, #32]
 8006dfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006e00:	4643      	mov	r3, r8
 8006e02:	463a      	mov	r2, r7
 8006e04:	4628      	mov	r0, r5
 8006e06:	47b0      	blx	r6
 8006e08:	2800      	cmp	r0, #0
 8006e0a:	dc06      	bgt.n	8006e1a <__sflush_r+0xfe>
 8006e0c:	89a3      	ldrh	r3, [r4, #12]
 8006e0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e12:	81a3      	strh	r3, [r4, #12]
 8006e14:	f04f 30ff 	mov.w	r0, #4294967295
 8006e18:	e78e      	b.n	8006d38 <__sflush_r+0x1c>
 8006e1a:	4407      	add	r7, r0
 8006e1c:	eba8 0800 	sub.w	r8, r8, r0
 8006e20:	e7e9      	b.n	8006df6 <__sflush_r+0xda>
 8006e22:	bf00      	nop
 8006e24:	20400001 	.word	0x20400001

08006e28 <_fflush_r>:
 8006e28:	b538      	push	{r3, r4, r5, lr}
 8006e2a:	690b      	ldr	r3, [r1, #16]
 8006e2c:	4605      	mov	r5, r0
 8006e2e:	460c      	mov	r4, r1
 8006e30:	b913      	cbnz	r3, 8006e38 <_fflush_r+0x10>
 8006e32:	2500      	movs	r5, #0
 8006e34:	4628      	mov	r0, r5
 8006e36:	bd38      	pop	{r3, r4, r5, pc}
 8006e38:	b118      	cbz	r0, 8006e42 <_fflush_r+0x1a>
 8006e3a:	6983      	ldr	r3, [r0, #24]
 8006e3c:	b90b      	cbnz	r3, 8006e42 <_fflush_r+0x1a>
 8006e3e:	f000 f887 	bl	8006f50 <__sinit>
 8006e42:	4b14      	ldr	r3, [pc, #80]	; (8006e94 <_fflush_r+0x6c>)
 8006e44:	429c      	cmp	r4, r3
 8006e46:	d11b      	bne.n	8006e80 <_fflush_r+0x58>
 8006e48:	686c      	ldr	r4, [r5, #4]
 8006e4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d0ef      	beq.n	8006e32 <_fflush_r+0xa>
 8006e52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e54:	07d0      	lsls	r0, r2, #31
 8006e56:	d404      	bmi.n	8006e62 <_fflush_r+0x3a>
 8006e58:	0599      	lsls	r1, r3, #22
 8006e5a:	d402      	bmi.n	8006e62 <_fflush_r+0x3a>
 8006e5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e5e:	f000 f91a 	bl	8007096 <__retarget_lock_acquire_recursive>
 8006e62:	4628      	mov	r0, r5
 8006e64:	4621      	mov	r1, r4
 8006e66:	f7ff ff59 	bl	8006d1c <__sflush_r>
 8006e6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e6c:	07da      	lsls	r2, r3, #31
 8006e6e:	4605      	mov	r5, r0
 8006e70:	d4e0      	bmi.n	8006e34 <_fflush_r+0xc>
 8006e72:	89a3      	ldrh	r3, [r4, #12]
 8006e74:	059b      	lsls	r3, r3, #22
 8006e76:	d4dd      	bmi.n	8006e34 <_fflush_r+0xc>
 8006e78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e7a:	f000 f90d 	bl	8007098 <__retarget_lock_release_recursive>
 8006e7e:	e7d9      	b.n	8006e34 <_fflush_r+0xc>
 8006e80:	4b05      	ldr	r3, [pc, #20]	; (8006e98 <_fflush_r+0x70>)
 8006e82:	429c      	cmp	r4, r3
 8006e84:	d101      	bne.n	8006e8a <_fflush_r+0x62>
 8006e86:	68ac      	ldr	r4, [r5, #8]
 8006e88:	e7df      	b.n	8006e4a <_fflush_r+0x22>
 8006e8a:	4b04      	ldr	r3, [pc, #16]	; (8006e9c <_fflush_r+0x74>)
 8006e8c:	429c      	cmp	r4, r3
 8006e8e:	bf08      	it	eq
 8006e90:	68ec      	ldreq	r4, [r5, #12]
 8006e92:	e7da      	b.n	8006e4a <_fflush_r+0x22>
 8006e94:	08008de0 	.word	0x08008de0
 8006e98:	08008e00 	.word	0x08008e00
 8006e9c:	08008dc0 	.word	0x08008dc0

08006ea0 <std>:
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	b510      	push	{r4, lr}
 8006ea4:	4604      	mov	r4, r0
 8006ea6:	e9c0 3300 	strd	r3, r3, [r0]
 8006eaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006eae:	6083      	str	r3, [r0, #8]
 8006eb0:	8181      	strh	r1, [r0, #12]
 8006eb2:	6643      	str	r3, [r0, #100]	; 0x64
 8006eb4:	81c2      	strh	r2, [r0, #14]
 8006eb6:	6183      	str	r3, [r0, #24]
 8006eb8:	4619      	mov	r1, r3
 8006eba:	2208      	movs	r2, #8
 8006ebc:	305c      	adds	r0, #92	; 0x5c
 8006ebe:	f7fe fb73 	bl	80055a8 <memset>
 8006ec2:	4b05      	ldr	r3, [pc, #20]	; (8006ed8 <std+0x38>)
 8006ec4:	6263      	str	r3, [r4, #36]	; 0x24
 8006ec6:	4b05      	ldr	r3, [pc, #20]	; (8006edc <std+0x3c>)
 8006ec8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006eca:	4b05      	ldr	r3, [pc, #20]	; (8006ee0 <std+0x40>)
 8006ecc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ece:	4b05      	ldr	r3, [pc, #20]	; (8006ee4 <std+0x44>)
 8006ed0:	6224      	str	r4, [r4, #32]
 8006ed2:	6323      	str	r3, [r4, #48]	; 0x30
 8006ed4:	bd10      	pop	{r4, pc}
 8006ed6:	bf00      	nop
 8006ed8:	08007aa5 	.word	0x08007aa5
 8006edc:	08007ac7 	.word	0x08007ac7
 8006ee0:	08007aff 	.word	0x08007aff
 8006ee4:	08007b23 	.word	0x08007b23

08006ee8 <_cleanup_r>:
 8006ee8:	4901      	ldr	r1, [pc, #4]	; (8006ef0 <_cleanup_r+0x8>)
 8006eea:	f000 b8af 	b.w	800704c <_fwalk_reent>
 8006eee:	bf00      	nop
 8006ef0:	08006e29 	.word	0x08006e29

08006ef4 <__sfmoreglue>:
 8006ef4:	b570      	push	{r4, r5, r6, lr}
 8006ef6:	2268      	movs	r2, #104	; 0x68
 8006ef8:	1e4d      	subs	r5, r1, #1
 8006efa:	4355      	muls	r5, r2
 8006efc:	460e      	mov	r6, r1
 8006efe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006f02:	f000 fd4b 	bl	800799c <_malloc_r>
 8006f06:	4604      	mov	r4, r0
 8006f08:	b140      	cbz	r0, 8006f1c <__sfmoreglue+0x28>
 8006f0a:	2100      	movs	r1, #0
 8006f0c:	e9c0 1600 	strd	r1, r6, [r0]
 8006f10:	300c      	adds	r0, #12
 8006f12:	60a0      	str	r0, [r4, #8]
 8006f14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f18:	f7fe fb46 	bl	80055a8 <memset>
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	bd70      	pop	{r4, r5, r6, pc}

08006f20 <__sfp_lock_acquire>:
 8006f20:	4801      	ldr	r0, [pc, #4]	; (8006f28 <__sfp_lock_acquire+0x8>)
 8006f22:	f000 b8b8 	b.w	8007096 <__retarget_lock_acquire_recursive>
 8006f26:	bf00      	nop
 8006f28:	20000429 	.word	0x20000429

08006f2c <__sfp_lock_release>:
 8006f2c:	4801      	ldr	r0, [pc, #4]	; (8006f34 <__sfp_lock_release+0x8>)
 8006f2e:	f000 b8b3 	b.w	8007098 <__retarget_lock_release_recursive>
 8006f32:	bf00      	nop
 8006f34:	20000429 	.word	0x20000429

08006f38 <__sinit_lock_acquire>:
 8006f38:	4801      	ldr	r0, [pc, #4]	; (8006f40 <__sinit_lock_acquire+0x8>)
 8006f3a:	f000 b8ac 	b.w	8007096 <__retarget_lock_acquire_recursive>
 8006f3e:	bf00      	nop
 8006f40:	2000042a 	.word	0x2000042a

08006f44 <__sinit_lock_release>:
 8006f44:	4801      	ldr	r0, [pc, #4]	; (8006f4c <__sinit_lock_release+0x8>)
 8006f46:	f000 b8a7 	b.w	8007098 <__retarget_lock_release_recursive>
 8006f4a:	bf00      	nop
 8006f4c:	2000042a 	.word	0x2000042a

08006f50 <__sinit>:
 8006f50:	b510      	push	{r4, lr}
 8006f52:	4604      	mov	r4, r0
 8006f54:	f7ff fff0 	bl	8006f38 <__sinit_lock_acquire>
 8006f58:	69a3      	ldr	r3, [r4, #24]
 8006f5a:	b11b      	cbz	r3, 8006f64 <__sinit+0x14>
 8006f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f60:	f7ff bff0 	b.w	8006f44 <__sinit_lock_release>
 8006f64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006f68:	6523      	str	r3, [r4, #80]	; 0x50
 8006f6a:	4b13      	ldr	r3, [pc, #76]	; (8006fb8 <__sinit+0x68>)
 8006f6c:	4a13      	ldr	r2, [pc, #76]	; (8006fbc <__sinit+0x6c>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f72:	42a3      	cmp	r3, r4
 8006f74:	bf04      	itt	eq
 8006f76:	2301      	moveq	r3, #1
 8006f78:	61a3      	streq	r3, [r4, #24]
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	f000 f820 	bl	8006fc0 <__sfp>
 8006f80:	6060      	str	r0, [r4, #4]
 8006f82:	4620      	mov	r0, r4
 8006f84:	f000 f81c 	bl	8006fc0 <__sfp>
 8006f88:	60a0      	str	r0, [r4, #8]
 8006f8a:	4620      	mov	r0, r4
 8006f8c:	f000 f818 	bl	8006fc0 <__sfp>
 8006f90:	2200      	movs	r2, #0
 8006f92:	60e0      	str	r0, [r4, #12]
 8006f94:	2104      	movs	r1, #4
 8006f96:	6860      	ldr	r0, [r4, #4]
 8006f98:	f7ff ff82 	bl	8006ea0 <std>
 8006f9c:	68a0      	ldr	r0, [r4, #8]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	2109      	movs	r1, #9
 8006fa2:	f7ff ff7d 	bl	8006ea0 <std>
 8006fa6:	68e0      	ldr	r0, [r4, #12]
 8006fa8:	2202      	movs	r2, #2
 8006faa:	2112      	movs	r1, #18
 8006fac:	f7ff ff78 	bl	8006ea0 <std>
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	61a3      	str	r3, [r4, #24]
 8006fb4:	e7d2      	b.n	8006f5c <__sinit+0xc>
 8006fb6:	bf00      	nop
 8006fb8:	08008cf8 	.word	0x08008cf8
 8006fbc:	08006ee9 	.word	0x08006ee9

08006fc0 <__sfp>:
 8006fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fc2:	4607      	mov	r7, r0
 8006fc4:	f7ff ffac 	bl	8006f20 <__sfp_lock_acquire>
 8006fc8:	4b1e      	ldr	r3, [pc, #120]	; (8007044 <__sfp+0x84>)
 8006fca:	681e      	ldr	r6, [r3, #0]
 8006fcc:	69b3      	ldr	r3, [r6, #24]
 8006fce:	b913      	cbnz	r3, 8006fd6 <__sfp+0x16>
 8006fd0:	4630      	mov	r0, r6
 8006fd2:	f7ff ffbd 	bl	8006f50 <__sinit>
 8006fd6:	3648      	adds	r6, #72	; 0x48
 8006fd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	d503      	bpl.n	8006fe8 <__sfp+0x28>
 8006fe0:	6833      	ldr	r3, [r6, #0]
 8006fe2:	b30b      	cbz	r3, 8007028 <__sfp+0x68>
 8006fe4:	6836      	ldr	r6, [r6, #0]
 8006fe6:	e7f7      	b.n	8006fd8 <__sfp+0x18>
 8006fe8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006fec:	b9d5      	cbnz	r5, 8007024 <__sfp+0x64>
 8006fee:	4b16      	ldr	r3, [pc, #88]	; (8007048 <__sfp+0x88>)
 8006ff0:	60e3      	str	r3, [r4, #12]
 8006ff2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ff6:	6665      	str	r5, [r4, #100]	; 0x64
 8006ff8:	f000 f84c 	bl	8007094 <__retarget_lock_init_recursive>
 8006ffc:	f7ff ff96 	bl	8006f2c <__sfp_lock_release>
 8007000:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007004:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007008:	6025      	str	r5, [r4, #0]
 800700a:	61a5      	str	r5, [r4, #24]
 800700c:	2208      	movs	r2, #8
 800700e:	4629      	mov	r1, r5
 8007010:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007014:	f7fe fac8 	bl	80055a8 <memset>
 8007018:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800701c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007020:	4620      	mov	r0, r4
 8007022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007024:	3468      	adds	r4, #104	; 0x68
 8007026:	e7d9      	b.n	8006fdc <__sfp+0x1c>
 8007028:	2104      	movs	r1, #4
 800702a:	4638      	mov	r0, r7
 800702c:	f7ff ff62 	bl	8006ef4 <__sfmoreglue>
 8007030:	4604      	mov	r4, r0
 8007032:	6030      	str	r0, [r6, #0]
 8007034:	2800      	cmp	r0, #0
 8007036:	d1d5      	bne.n	8006fe4 <__sfp+0x24>
 8007038:	f7ff ff78 	bl	8006f2c <__sfp_lock_release>
 800703c:	230c      	movs	r3, #12
 800703e:	603b      	str	r3, [r7, #0]
 8007040:	e7ee      	b.n	8007020 <__sfp+0x60>
 8007042:	bf00      	nop
 8007044:	08008cf8 	.word	0x08008cf8
 8007048:	ffff0001 	.word	0xffff0001

0800704c <_fwalk_reent>:
 800704c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007050:	4606      	mov	r6, r0
 8007052:	4688      	mov	r8, r1
 8007054:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007058:	2700      	movs	r7, #0
 800705a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800705e:	f1b9 0901 	subs.w	r9, r9, #1
 8007062:	d505      	bpl.n	8007070 <_fwalk_reent+0x24>
 8007064:	6824      	ldr	r4, [r4, #0]
 8007066:	2c00      	cmp	r4, #0
 8007068:	d1f7      	bne.n	800705a <_fwalk_reent+0xe>
 800706a:	4638      	mov	r0, r7
 800706c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007070:	89ab      	ldrh	r3, [r5, #12]
 8007072:	2b01      	cmp	r3, #1
 8007074:	d907      	bls.n	8007086 <_fwalk_reent+0x3a>
 8007076:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800707a:	3301      	adds	r3, #1
 800707c:	d003      	beq.n	8007086 <_fwalk_reent+0x3a>
 800707e:	4629      	mov	r1, r5
 8007080:	4630      	mov	r0, r6
 8007082:	47c0      	blx	r8
 8007084:	4307      	orrs	r7, r0
 8007086:	3568      	adds	r5, #104	; 0x68
 8007088:	e7e9      	b.n	800705e <_fwalk_reent+0x12>
	...

0800708c <_localeconv_r>:
 800708c:	4800      	ldr	r0, [pc, #0]	; (8007090 <_localeconv_r+0x4>)
 800708e:	4770      	bx	lr
 8007090:	20000190 	.word	0x20000190

08007094 <__retarget_lock_init_recursive>:
 8007094:	4770      	bx	lr

08007096 <__retarget_lock_acquire_recursive>:
 8007096:	4770      	bx	lr

08007098 <__retarget_lock_release_recursive>:
 8007098:	4770      	bx	lr

0800709a <__swhatbuf_r>:
 800709a:	b570      	push	{r4, r5, r6, lr}
 800709c:	460e      	mov	r6, r1
 800709e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070a2:	2900      	cmp	r1, #0
 80070a4:	b096      	sub	sp, #88	; 0x58
 80070a6:	4614      	mov	r4, r2
 80070a8:	461d      	mov	r5, r3
 80070aa:	da08      	bge.n	80070be <__swhatbuf_r+0x24>
 80070ac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80070b0:	2200      	movs	r2, #0
 80070b2:	602a      	str	r2, [r5, #0]
 80070b4:	061a      	lsls	r2, r3, #24
 80070b6:	d410      	bmi.n	80070da <__swhatbuf_r+0x40>
 80070b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070bc:	e00e      	b.n	80070dc <__swhatbuf_r+0x42>
 80070be:	466a      	mov	r2, sp
 80070c0:	f000 fd86 	bl	8007bd0 <_fstat_r>
 80070c4:	2800      	cmp	r0, #0
 80070c6:	dbf1      	blt.n	80070ac <__swhatbuf_r+0x12>
 80070c8:	9a01      	ldr	r2, [sp, #4]
 80070ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80070ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80070d2:	425a      	negs	r2, r3
 80070d4:	415a      	adcs	r2, r3
 80070d6:	602a      	str	r2, [r5, #0]
 80070d8:	e7ee      	b.n	80070b8 <__swhatbuf_r+0x1e>
 80070da:	2340      	movs	r3, #64	; 0x40
 80070dc:	2000      	movs	r0, #0
 80070de:	6023      	str	r3, [r4, #0]
 80070e0:	b016      	add	sp, #88	; 0x58
 80070e2:	bd70      	pop	{r4, r5, r6, pc}

080070e4 <__smakebuf_r>:
 80070e4:	898b      	ldrh	r3, [r1, #12]
 80070e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80070e8:	079d      	lsls	r5, r3, #30
 80070ea:	4606      	mov	r6, r0
 80070ec:	460c      	mov	r4, r1
 80070ee:	d507      	bpl.n	8007100 <__smakebuf_r+0x1c>
 80070f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80070f4:	6023      	str	r3, [r4, #0]
 80070f6:	6123      	str	r3, [r4, #16]
 80070f8:	2301      	movs	r3, #1
 80070fa:	6163      	str	r3, [r4, #20]
 80070fc:	b002      	add	sp, #8
 80070fe:	bd70      	pop	{r4, r5, r6, pc}
 8007100:	ab01      	add	r3, sp, #4
 8007102:	466a      	mov	r2, sp
 8007104:	f7ff ffc9 	bl	800709a <__swhatbuf_r>
 8007108:	9900      	ldr	r1, [sp, #0]
 800710a:	4605      	mov	r5, r0
 800710c:	4630      	mov	r0, r6
 800710e:	f000 fc45 	bl	800799c <_malloc_r>
 8007112:	b948      	cbnz	r0, 8007128 <__smakebuf_r+0x44>
 8007114:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007118:	059a      	lsls	r2, r3, #22
 800711a:	d4ef      	bmi.n	80070fc <__smakebuf_r+0x18>
 800711c:	f023 0303 	bic.w	r3, r3, #3
 8007120:	f043 0302 	orr.w	r3, r3, #2
 8007124:	81a3      	strh	r3, [r4, #12]
 8007126:	e7e3      	b.n	80070f0 <__smakebuf_r+0xc>
 8007128:	4b0d      	ldr	r3, [pc, #52]	; (8007160 <__smakebuf_r+0x7c>)
 800712a:	62b3      	str	r3, [r6, #40]	; 0x28
 800712c:	89a3      	ldrh	r3, [r4, #12]
 800712e:	6020      	str	r0, [r4, #0]
 8007130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007134:	81a3      	strh	r3, [r4, #12]
 8007136:	9b00      	ldr	r3, [sp, #0]
 8007138:	6163      	str	r3, [r4, #20]
 800713a:	9b01      	ldr	r3, [sp, #4]
 800713c:	6120      	str	r0, [r4, #16]
 800713e:	b15b      	cbz	r3, 8007158 <__smakebuf_r+0x74>
 8007140:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007144:	4630      	mov	r0, r6
 8007146:	f000 fd55 	bl	8007bf4 <_isatty_r>
 800714a:	b128      	cbz	r0, 8007158 <__smakebuf_r+0x74>
 800714c:	89a3      	ldrh	r3, [r4, #12]
 800714e:	f023 0303 	bic.w	r3, r3, #3
 8007152:	f043 0301 	orr.w	r3, r3, #1
 8007156:	81a3      	strh	r3, [r4, #12]
 8007158:	89a0      	ldrh	r0, [r4, #12]
 800715a:	4305      	orrs	r5, r0
 800715c:	81a5      	strh	r5, [r4, #12]
 800715e:	e7cd      	b.n	80070fc <__smakebuf_r+0x18>
 8007160:	08006ee9 	.word	0x08006ee9

08007164 <malloc>:
 8007164:	4b02      	ldr	r3, [pc, #8]	; (8007170 <malloc+0xc>)
 8007166:	4601      	mov	r1, r0
 8007168:	6818      	ldr	r0, [r3, #0]
 800716a:	f000 bc17 	b.w	800799c <_malloc_r>
 800716e:	bf00      	nop
 8007170:	2000003c 	.word	0x2000003c

08007174 <memcpy>:
 8007174:	440a      	add	r2, r1
 8007176:	4291      	cmp	r1, r2
 8007178:	f100 33ff 	add.w	r3, r0, #4294967295
 800717c:	d100      	bne.n	8007180 <memcpy+0xc>
 800717e:	4770      	bx	lr
 8007180:	b510      	push	{r4, lr}
 8007182:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007186:	f803 4f01 	strb.w	r4, [r3, #1]!
 800718a:	4291      	cmp	r1, r2
 800718c:	d1f9      	bne.n	8007182 <memcpy+0xe>
 800718e:	bd10      	pop	{r4, pc}

08007190 <_Balloc>:
 8007190:	b570      	push	{r4, r5, r6, lr}
 8007192:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007194:	4604      	mov	r4, r0
 8007196:	460d      	mov	r5, r1
 8007198:	b976      	cbnz	r6, 80071b8 <_Balloc+0x28>
 800719a:	2010      	movs	r0, #16
 800719c:	f7ff ffe2 	bl	8007164 <malloc>
 80071a0:	4602      	mov	r2, r0
 80071a2:	6260      	str	r0, [r4, #36]	; 0x24
 80071a4:	b920      	cbnz	r0, 80071b0 <_Balloc+0x20>
 80071a6:	4b18      	ldr	r3, [pc, #96]	; (8007208 <_Balloc+0x78>)
 80071a8:	4818      	ldr	r0, [pc, #96]	; (800720c <_Balloc+0x7c>)
 80071aa:	2166      	movs	r1, #102	; 0x66
 80071ac:	f000 fcd0 	bl	8007b50 <__assert_func>
 80071b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071b4:	6006      	str	r6, [r0, #0]
 80071b6:	60c6      	str	r6, [r0, #12]
 80071b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80071ba:	68f3      	ldr	r3, [r6, #12]
 80071bc:	b183      	cbz	r3, 80071e0 <_Balloc+0x50>
 80071be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80071c6:	b9b8      	cbnz	r0, 80071f8 <_Balloc+0x68>
 80071c8:	2101      	movs	r1, #1
 80071ca:	fa01 f605 	lsl.w	r6, r1, r5
 80071ce:	1d72      	adds	r2, r6, #5
 80071d0:	0092      	lsls	r2, r2, #2
 80071d2:	4620      	mov	r0, r4
 80071d4:	f000 fb60 	bl	8007898 <_calloc_r>
 80071d8:	b160      	cbz	r0, 80071f4 <_Balloc+0x64>
 80071da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80071de:	e00e      	b.n	80071fe <_Balloc+0x6e>
 80071e0:	2221      	movs	r2, #33	; 0x21
 80071e2:	2104      	movs	r1, #4
 80071e4:	4620      	mov	r0, r4
 80071e6:	f000 fb57 	bl	8007898 <_calloc_r>
 80071ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071ec:	60f0      	str	r0, [r6, #12]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d1e4      	bne.n	80071be <_Balloc+0x2e>
 80071f4:	2000      	movs	r0, #0
 80071f6:	bd70      	pop	{r4, r5, r6, pc}
 80071f8:	6802      	ldr	r2, [r0, #0]
 80071fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80071fe:	2300      	movs	r3, #0
 8007200:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007204:	e7f7      	b.n	80071f6 <_Balloc+0x66>
 8007206:	bf00      	nop
 8007208:	08008d3d 	.word	0x08008d3d
 800720c:	08008e20 	.word	0x08008e20

08007210 <_Bfree>:
 8007210:	b570      	push	{r4, r5, r6, lr}
 8007212:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007214:	4605      	mov	r5, r0
 8007216:	460c      	mov	r4, r1
 8007218:	b976      	cbnz	r6, 8007238 <_Bfree+0x28>
 800721a:	2010      	movs	r0, #16
 800721c:	f7ff ffa2 	bl	8007164 <malloc>
 8007220:	4602      	mov	r2, r0
 8007222:	6268      	str	r0, [r5, #36]	; 0x24
 8007224:	b920      	cbnz	r0, 8007230 <_Bfree+0x20>
 8007226:	4b09      	ldr	r3, [pc, #36]	; (800724c <_Bfree+0x3c>)
 8007228:	4809      	ldr	r0, [pc, #36]	; (8007250 <_Bfree+0x40>)
 800722a:	218a      	movs	r1, #138	; 0x8a
 800722c:	f000 fc90 	bl	8007b50 <__assert_func>
 8007230:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007234:	6006      	str	r6, [r0, #0]
 8007236:	60c6      	str	r6, [r0, #12]
 8007238:	b13c      	cbz	r4, 800724a <_Bfree+0x3a>
 800723a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800723c:	6862      	ldr	r2, [r4, #4]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007244:	6021      	str	r1, [r4, #0]
 8007246:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800724a:	bd70      	pop	{r4, r5, r6, pc}
 800724c:	08008d3d 	.word	0x08008d3d
 8007250:	08008e20 	.word	0x08008e20

08007254 <__multadd>:
 8007254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007258:	690d      	ldr	r5, [r1, #16]
 800725a:	4607      	mov	r7, r0
 800725c:	460c      	mov	r4, r1
 800725e:	461e      	mov	r6, r3
 8007260:	f101 0c14 	add.w	ip, r1, #20
 8007264:	2000      	movs	r0, #0
 8007266:	f8dc 3000 	ldr.w	r3, [ip]
 800726a:	b299      	uxth	r1, r3
 800726c:	fb02 6101 	mla	r1, r2, r1, r6
 8007270:	0c1e      	lsrs	r6, r3, #16
 8007272:	0c0b      	lsrs	r3, r1, #16
 8007274:	fb02 3306 	mla	r3, r2, r6, r3
 8007278:	b289      	uxth	r1, r1
 800727a:	3001      	adds	r0, #1
 800727c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007280:	4285      	cmp	r5, r0
 8007282:	f84c 1b04 	str.w	r1, [ip], #4
 8007286:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800728a:	dcec      	bgt.n	8007266 <__multadd+0x12>
 800728c:	b30e      	cbz	r6, 80072d2 <__multadd+0x7e>
 800728e:	68a3      	ldr	r3, [r4, #8]
 8007290:	42ab      	cmp	r3, r5
 8007292:	dc19      	bgt.n	80072c8 <__multadd+0x74>
 8007294:	6861      	ldr	r1, [r4, #4]
 8007296:	4638      	mov	r0, r7
 8007298:	3101      	adds	r1, #1
 800729a:	f7ff ff79 	bl	8007190 <_Balloc>
 800729e:	4680      	mov	r8, r0
 80072a0:	b928      	cbnz	r0, 80072ae <__multadd+0x5a>
 80072a2:	4602      	mov	r2, r0
 80072a4:	4b0c      	ldr	r3, [pc, #48]	; (80072d8 <__multadd+0x84>)
 80072a6:	480d      	ldr	r0, [pc, #52]	; (80072dc <__multadd+0x88>)
 80072a8:	21b5      	movs	r1, #181	; 0xb5
 80072aa:	f000 fc51 	bl	8007b50 <__assert_func>
 80072ae:	6922      	ldr	r2, [r4, #16]
 80072b0:	3202      	adds	r2, #2
 80072b2:	f104 010c 	add.w	r1, r4, #12
 80072b6:	0092      	lsls	r2, r2, #2
 80072b8:	300c      	adds	r0, #12
 80072ba:	f7ff ff5b 	bl	8007174 <memcpy>
 80072be:	4621      	mov	r1, r4
 80072c0:	4638      	mov	r0, r7
 80072c2:	f7ff ffa5 	bl	8007210 <_Bfree>
 80072c6:	4644      	mov	r4, r8
 80072c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80072cc:	3501      	adds	r5, #1
 80072ce:	615e      	str	r6, [r3, #20]
 80072d0:	6125      	str	r5, [r4, #16]
 80072d2:	4620      	mov	r0, r4
 80072d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072d8:	08008daf 	.word	0x08008daf
 80072dc:	08008e20 	.word	0x08008e20

080072e0 <__hi0bits>:
 80072e0:	0c03      	lsrs	r3, r0, #16
 80072e2:	041b      	lsls	r3, r3, #16
 80072e4:	b9d3      	cbnz	r3, 800731c <__hi0bits+0x3c>
 80072e6:	0400      	lsls	r0, r0, #16
 80072e8:	2310      	movs	r3, #16
 80072ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80072ee:	bf04      	itt	eq
 80072f0:	0200      	lsleq	r0, r0, #8
 80072f2:	3308      	addeq	r3, #8
 80072f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80072f8:	bf04      	itt	eq
 80072fa:	0100      	lsleq	r0, r0, #4
 80072fc:	3304      	addeq	r3, #4
 80072fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007302:	bf04      	itt	eq
 8007304:	0080      	lsleq	r0, r0, #2
 8007306:	3302      	addeq	r3, #2
 8007308:	2800      	cmp	r0, #0
 800730a:	db05      	blt.n	8007318 <__hi0bits+0x38>
 800730c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007310:	f103 0301 	add.w	r3, r3, #1
 8007314:	bf08      	it	eq
 8007316:	2320      	moveq	r3, #32
 8007318:	4618      	mov	r0, r3
 800731a:	4770      	bx	lr
 800731c:	2300      	movs	r3, #0
 800731e:	e7e4      	b.n	80072ea <__hi0bits+0xa>

08007320 <__lo0bits>:
 8007320:	6803      	ldr	r3, [r0, #0]
 8007322:	f013 0207 	ands.w	r2, r3, #7
 8007326:	4601      	mov	r1, r0
 8007328:	d00b      	beq.n	8007342 <__lo0bits+0x22>
 800732a:	07da      	lsls	r2, r3, #31
 800732c:	d423      	bmi.n	8007376 <__lo0bits+0x56>
 800732e:	0798      	lsls	r0, r3, #30
 8007330:	bf49      	itett	mi
 8007332:	085b      	lsrmi	r3, r3, #1
 8007334:	089b      	lsrpl	r3, r3, #2
 8007336:	2001      	movmi	r0, #1
 8007338:	600b      	strmi	r3, [r1, #0]
 800733a:	bf5c      	itt	pl
 800733c:	600b      	strpl	r3, [r1, #0]
 800733e:	2002      	movpl	r0, #2
 8007340:	4770      	bx	lr
 8007342:	b298      	uxth	r0, r3
 8007344:	b9a8      	cbnz	r0, 8007372 <__lo0bits+0x52>
 8007346:	0c1b      	lsrs	r3, r3, #16
 8007348:	2010      	movs	r0, #16
 800734a:	b2da      	uxtb	r2, r3
 800734c:	b90a      	cbnz	r2, 8007352 <__lo0bits+0x32>
 800734e:	3008      	adds	r0, #8
 8007350:	0a1b      	lsrs	r3, r3, #8
 8007352:	071a      	lsls	r2, r3, #28
 8007354:	bf04      	itt	eq
 8007356:	091b      	lsreq	r3, r3, #4
 8007358:	3004      	addeq	r0, #4
 800735a:	079a      	lsls	r2, r3, #30
 800735c:	bf04      	itt	eq
 800735e:	089b      	lsreq	r3, r3, #2
 8007360:	3002      	addeq	r0, #2
 8007362:	07da      	lsls	r2, r3, #31
 8007364:	d403      	bmi.n	800736e <__lo0bits+0x4e>
 8007366:	085b      	lsrs	r3, r3, #1
 8007368:	f100 0001 	add.w	r0, r0, #1
 800736c:	d005      	beq.n	800737a <__lo0bits+0x5a>
 800736e:	600b      	str	r3, [r1, #0]
 8007370:	4770      	bx	lr
 8007372:	4610      	mov	r0, r2
 8007374:	e7e9      	b.n	800734a <__lo0bits+0x2a>
 8007376:	2000      	movs	r0, #0
 8007378:	4770      	bx	lr
 800737a:	2020      	movs	r0, #32
 800737c:	4770      	bx	lr
	...

08007380 <__i2b>:
 8007380:	b510      	push	{r4, lr}
 8007382:	460c      	mov	r4, r1
 8007384:	2101      	movs	r1, #1
 8007386:	f7ff ff03 	bl	8007190 <_Balloc>
 800738a:	4602      	mov	r2, r0
 800738c:	b928      	cbnz	r0, 800739a <__i2b+0x1a>
 800738e:	4b05      	ldr	r3, [pc, #20]	; (80073a4 <__i2b+0x24>)
 8007390:	4805      	ldr	r0, [pc, #20]	; (80073a8 <__i2b+0x28>)
 8007392:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007396:	f000 fbdb 	bl	8007b50 <__assert_func>
 800739a:	2301      	movs	r3, #1
 800739c:	6144      	str	r4, [r0, #20]
 800739e:	6103      	str	r3, [r0, #16]
 80073a0:	bd10      	pop	{r4, pc}
 80073a2:	bf00      	nop
 80073a4:	08008daf 	.word	0x08008daf
 80073a8:	08008e20 	.word	0x08008e20

080073ac <__multiply>:
 80073ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b0:	4691      	mov	r9, r2
 80073b2:	690a      	ldr	r2, [r1, #16]
 80073b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	bfb8      	it	lt
 80073bc:	460b      	movlt	r3, r1
 80073be:	460c      	mov	r4, r1
 80073c0:	bfbc      	itt	lt
 80073c2:	464c      	movlt	r4, r9
 80073c4:	4699      	movlt	r9, r3
 80073c6:	6927      	ldr	r7, [r4, #16]
 80073c8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80073cc:	68a3      	ldr	r3, [r4, #8]
 80073ce:	6861      	ldr	r1, [r4, #4]
 80073d0:	eb07 060a 	add.w	r6, r7, sl
 80073d4:	42b3      	cmp	r3, r6
 80073d6:	b085      	sub	sp, #20
 80073d8:	bfb8      	it	lt
 80073da:	3101      	addlt	r1, #1
 80073dc:	f7ff fed8 	bl	8007190 <_Balloc>
 80073e0:	b930      	cbnz	r0, 80073f0 <__multiply+0x44>
 80073e2:	4602      	mov	r2, r0
 80073e4:	4b44      	ldr	r3, [pc, #272]	; (80074f8 <__multiply+0x14c>)
 80073e6:	4845      	ldr	r0, [pc, #276]	; (80074fc <__multiply+0x150>)
 80073e8:	f240 115d 	movw	r1, #349	; 0x15d
 80073ec:	f000 fbb0 	bl	8007b50 <__assert_func>
 80073f0:	f100 0514 	add.w	r5, r0, #20
 80073f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80073f8:	462b      	mov	r3, r5
 80073fa:	2200      	movs	r2, #0
 80073fc:	4543      	cmp	r3, r8
 80073fe:	d321      	bcc.n	8007444 <__multiply+0x98>
 8007400:	f104 0314 	add.w	r3, r4, #20
 8007404:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007408:	f109 0314 	add.w	r3, r9, #20
 800740c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007410:	9202      	str	r2, [sp, #8]
 8007412:	1b3a      	subs	r2, r7, r4
 8007414:	3a15      	subs	r2, #21
 8007416:	f022 0203 	bic.w	r2, r2, #3
 800741a:	3204      	adds	r2, #4
 800741c:	f104 0115 	add.w	r1, r4, #21
 8007420:	428f      	cmp	r7, r1
 8007422:	bf38      	it	cc
 8007424:	2204      	movcc	r2, #4
 8007426:	9201      	str	r2, [sp, #4]
 8007428:	9a02      	ldr	r2, [sp, #8]
 800742a:	9303      	str	r3, [sp, #12]
 800742c:	429a      	cmp	r2, r3
 800742e:	d80c      	bhi.n	800744a <__multiply+0x9e>
 8007430:	2e00      	cmp	r6, #0
 8007432:	dd03      	ble.n	800743c <__multiply+0x90>
 8007434:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007438:	2b00      	cmp	r3, #0
 800743a:	d05a      	beq.n	80074f2 <__multiply+0x146>
 800743c:	6106      	str	r6, [r0, #16]
 800743e:	b005      	add	sp, #20
 8007440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007444:	f843 2b04 	str.w	r2, [r3], #4
 8007448:	e7d8      	b.n	80073fc <__multiply+0x50>
 800744a:	f8b3 a000 	ldrh.w	sl, [r3]
 800744e:	f1ba 0f00 	cmp.w	sl, #0
 8007452:	d024      	beq.n	800749e <__multiply+0xf2>
 8007454:	f104 0e14 	add.w	lr, r4, #20
 8007458:	46a9      	mov	r9, r5
 800745a:	f04f 0c00 	mov.w	ip, #0
 800745e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007462:	f8d9 1000 	ldr.w	r1, [r9]
 8007466:	fa1f fb82 	uxth.w	fp, r2
 800746a:	b289      	uxth	r1, r1
 800746c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007470:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007474:	f8d9 2000 	ldr.w	r2, [r9]
 8007478:	4461      	add	r1, ip
 800747a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800747e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007482:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007486:	b289      	uxth	r1, r1
 8007488:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800748c:	4577      	cmp	r7, lr
 800748e:	f849 1b04 	str.w	r1, [r9], #4
 8007492:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007496:	d8e2      	bhi.n	800745e <__multiply+0xb2>
 8007498:	9a01      	ldr	r2, [sp, #4]
 800749a:	f845 c002 	str.w	ip, [r5, r2]
 800749e:	9a03      	ldr	r2, [sp, #12]
 80074a0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80074a4:	3304      	adds	r3, #4
 80074a6:	f1b9 0f00 	cmp.w	r9, #0
 80074aa:	d020      	beq.n	80074ee <__multiply+0x142>
 80074ac:	6829      	ldr	r1, [r5, #0]
 80074ae:	f104 0c14 	add.w	ip, r4, #20
 80074b2:	46ae      	mov	lr, r5
 80074b4:	f04f 0a00 	mov.w	sl, #0
 80074b8:	f8bc b000 	ldrh.w	fp, [ip]
 80074bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80074c0:	fb09 220b 	mla	r2, r9, fp, r2
 80074c4:	4492      	add	sl, r2
 80074c6:	b289      	uxth	r1, r1
 80074c8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80074cc:	f84e 1b04 	str.w	r1, [lr], #4
 80074d0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80074d4:	f8be 1000 	ldrh.w	r1, [lr]
 80074d8:	0c12      	lsrs	r2, r2, #16
 80074da:	fb09 1102 	mla	r1, r9, r2, r1
 80074de:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80074e2:	4567      	cmp	r7, ip
 80074e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80074e8:	d8e6      	bhi.n	80074b8 <__multiply+0x10c>
 80074ea:	9a01      	ldr	r2, [sp, #4]
 80074ec:	50a9      	str	r1, [r5, r2]
 80074ee:	3504      	adds	r5, #4
 80074f0:	e79a      	b.n	8007428 <__multiply+0x7c>
 80074f2:	3e01      	subs	r6, #1
 80074f4:	e79c      	b.n	8007430 <__multiply+0x84>
 80074f6:	bf00      	nop
 80074f8:	08008daf 	.word	0x08008daf
 80074fc:	08008e20 	.word	0x08008e20

08007500 <__pow5mult>:
 8007500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007504:	4615      	mov	r5, r2
 8007506:	f012 0203 	ands.w	r2, r2, #3
 800750a:	4606      	mov	r6, r0
 800750c:	460f      	mov	r7, r1
 800750e:	d007      	beq.n	8007520 <__pow5mult+0x20>
 8007510:	4c25      	ldr	r4, [pc, #148]	; (80075a8 <__pow5mult+0xa8>)
 8007512:	3a01      	subs	r2, #1
 8007514:	2300      	movs	r3, #0
 8007516:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800751a:	f7ff fe9b 	bl	8007254 <__multadd>
 800751e:	4607      	mov	r7, r0
 8007520:	10ad      	asrs	r5, r5, #2
 8007522:	d03d      	beq.n	80075a0 <__pow5mult+0xa0>
 8007524:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007526:	b97c      	cbnz	r4, 8007548 <__pow5mult+0x48>
 8007528:	2010      	movs	r0, #16
 800752a:	f7ff fe1b 	bl	8007164 <malloc>
 800752e:	4602      	mov	r2, r0
 8007530:	6270      	str	r0, [r6, #36]	; 0x24
 8007532:	b928      	cbnz	r0, 8007540 <__pow5mult+0x40>
 8007534:	4b1d      	ldr	r3, [pc, #116]	; (80075ac <__pow5mult+0xac>)
 8007536:	481e      	ldr	r0, [pc, #120]	; (80075b0 <__pow5mult+0xb0>)
 8007538:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800753c:	f000 fb08 	bl	8007b50 <__assert_func>
 8007540:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007544:	6004      	str	r4, [r0, #0]
 8007546:	60c4      	str	r4, [r0, #12]
 8007548:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800754c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007550:	b94c      	cbnz	r4, 8007566 <__pow5mult+0x66>
 8007552:	f240 2171 	movw	r1, #625	; 0x271
 8007556:	4630      	mov	r0, r6
 8007558:	f7ff ff12 	bl	8007380 <__i2b>
 800755c:	2300      	movs	r3, #0
 800755e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007562:	4604      	mov	r4, r0
 8007564:	6003      	str	r3, [r0, #0]
 8007566:	f04f 0900 	mov.w	r9, #0
 800756a:	07eb      	lsls	r3, r5, #31
 800756c:	d50a      	bpl.n	8007584 <__pow5mult+0x84>
 800756e:	4639      	mov	r1, r7
 8007570:	4622      	mov	r2, r4
 8007572:	4630      	mov	r0, r6
 8007574:	f7ff ff1a 	bl	80073ac <__multiply>
 8007578:	4639      	mov	r1, r7
 800757a:	4680      	mov	r8, r0
 800757c:	4630      	mov	r0, r6
 800757e:	f7ff fe47 	bl	8007210 <_Bfree>
 8007582:	4647      	mov	r7, r8
 8007584:	106d      	asrs	r5, r5, #1
 8007586:	d00b      	beq.n	80075a0 <__pow5mult+0xa0>
 8007588:	6820      	ldr	r0, [r4, #0]
 800758a:	b938      	cbnz	r0, 800759c <__pow5mult+0x9c>
 800758c:	4622      	mov	r2, r4
 800758e:	4621      	mov	r1, r4
 8007590:	4630      	mov	r0, r6
 8007592:	f7ff ff0b 	bl	80073ac <__multiply>
 8007596:	6020      	str	r0, [r4, #0]
 8007598:	f8c0 9000 	str.w	r9, [r0]
 800759c:	4604      	mov	r4, r0
 800759e:	e7e4      	b.n	800756a <__pow5mult+0x6a>
 80075a0:	4638      	mov	r0, r7
 80075a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075a6:	bf00      	nop
 80075a8:	08008f70 	.word	0x08008f70
 80075ac:	08008d3d 	.word	0x08008d3d
 80075b0:	08008e20 	.word	0x08008e20

080075b4 <__lshift>:
 80075b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075b8:	460c      	mov	r4, r1
 80075ba:	6849      	ldr	r1, [r1, #4]
 80075bc:	6923      	ldr	r3, [r4, #16]
 80075be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80075c2:	68a3      	ldr	r3, [r4, #8]
 80075c4:	4607      	mov	r7, r0
 80075c6:	4691      	mov	r9, r2
 80075c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80075cc:	f108 0601 	add.w	r6, r8, #1
 80075d0:	42b3      	cmp	r3, r6
 80075d2:	db0b      	blt.n	80075ec <__lshift+0x38>
 80075d4:	4638      	mov	r0, r7
 80075d6:	f7ff fddb 	bl	8007190 <_Balloc>
 80075da:	4605      	mov	r5, r0
 80075dc:	b948      	cbnz	r0, 80075f2 <__lshift+0x3e>
 80075de:	4602      	mov	r2, r0
 80075e0:	4b2a      	ldr	r3, [pc, #168]	; (800768c <__lshift+0xd8>)
 80075e2:	482b      	ldr	r0, [pc, #172]	; (8007690 <__lshift+0xdc>)
 80075e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80075e8:	f000 fab2 	bl	8007b50 <__assert_func>
 80075ec:	3101      	adds	r1, #1
 80075ee:	005b      	lsls	r3, r3, #1
 80075f0:	e7ee      	b.n	80075d0 <__lshift+0x1c>
 80075f2:	2300      	movs	r3, #0
 80075f4:	f100 0114 	add.w	r1, r0, #20
 80075f8:	f100 0210 	add.w	r2, r0, #16
 80075fc:	4618      	mov	r0, r3
 80075fe:	4553      	cmp	r3, sl
 8007600:	db37      	blt.n	8007672 <__lshift+0xbe>
 8007602:	6920      	ldr	r0, [r4, #16]
 8007604:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007608:	f104 0314 	add.w	r3, r4, #20
 800760c:	f019 091f 	ands.w	r9, r9, #31
 8007610:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007614:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007618:	d02f      	beq.n	800767a <__lshift+0xc6>
 800761a:	f1c9 0e20 	rsb	lr, r9, #32
 800761e:	468a      	mov	sl, r1
 8007620:	f04f 0c00 	mov.w	ip, #0
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	fa02 f209 	lsl.w	r2, r2, r9
 800762a:	ea42 020c 	orr.w	r2, r2, ip
 800762e:	f84a 2b04 	str.w	r2, [sl], #4
 8007632:	f853 2b04 	ldr.w	r2, [r3], #4
 8007636:	4298      	cmp	r0, r3
 8007638:	fa22 fc0e 	lsr.w	ip, r2, lr
 800763c:	d8f2      	bhi.n	8007624 <__lshift+0x70>
 800763e:	1b03      	subs	r3, r0, r4
 8007640:	3b15      	subs	r3, #21
 8007642:	f023 0303 	bic.w	r3, r3, #3
 8007646:	3304      	adds	r3, #4
 8007648:	f104 0215 	add.w	r2, r4, #21
 800764c:	4290      	cmp	r0, r2
 800764e:	bf38      	it	cc
 8007650:	2304      	movcc	r3, #4
 8007652:	f841 c003 	str.w	ip, [r1, r3]
 8007656:	f1bc 0f00 	cmp.w	ip, #0
 800765a:	d001      	beq.n	8007660 <__lshift+0xac>
 800765c:	f108 0602 	add.w	r6, r8, #2
 8007660:	3e01      	subs	r6, #1
 8007662:	4638      	mov	r0, r7
 8007664:	612e      	str	r6, [r5, #16]
 8007666:	4621      	mov	r1, r4
 8007668:	f7ff fdd2 	bl	8007210 <_Bfree>
 800766c:	4628      	mov	r0, r5
 800766e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007672:	f842 0f04 	str.w	r0, [r2, #4]!
 8007676:	3301      	adds	r3, #1
 8007678:	e7c1      	b.n	80075fe <__lshift+0x4a>
 800767a:	3904      	subs	r1, #4
 800767c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007680:	f841 2f04 	str.w	r2, [r1, #4]!
 8007684:	4298      	cmp	r0, r3
 8007686:	d8f9      	bhi.n	800767c <__lshift+0xc8>
 8007688:	e7ea      	b.n	8007660 <__lshift+0xac>
 800768a:	bf00      	nop
 800768c:	08008daf 	.word	0x08008daf
 8007690:	08008e20 	.word	0x08008e20

08007694 <__mcmp>:
 8007694:	b530      	push	{r4, r5, lr}
 8007696:	6902      	ldr	r2, [r0, #16]
 8007698:	690c      	ldr	r4, [r1, #16]
 800769a:	1b12      	subs	r2, r2, r4
 800769c:	d10e      	bne.n	80076bc <__mcmp+0x28>
 800769e:	f100 0314 	add.w	r3, r0, #20
 80076a2:	3114      	adds	r1, #20
 80076a4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80076a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80076ac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80076b0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80076b4:	42a5      	cmp	r5, r4
 80076b6:	d003      	beq.n	80076c0 <__mcmp+0x2c>
 80076b8:	d305      	bcc.n	80076c6 <__mcmp+0x32>
 80076ba:	2201      	movs	r2, #1
 80076bc:	4610      	mov	r0, r2
 80076be:	bd30      	pop	{r4, r5, pc}
 80076c0:	4283      	cmp	r3, r0
 80076c2:	d3f3      	bcc.n	80076ac <__mcmp+0x18>
 80076c4:	e7fa      	b.n	80076bc <__mcmp+0x28>
 80076c6:	f04f 32ff 	mov.w	r2, #4294967295
 80076ca:	e7f7      	b.n	80076bc <__mcmp+0x28>

080076cc <__mdiff>:
 80076cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d0:	460c      	mov	r4, r1
 80076d2:	4606      	mov	r6, r0
 80076d4:	4611      	mov	r1, r2
 80076d6:	4620      	mov	r0, r4
 80076d8:	4690      	mov	r8, r2
 80076da:	f7ff ffdb 	bl	8007694 <__mcmp>
 80076de:	1e05      	subs	r5, r0, #0
 80076e0:	d110      	bne.n	8007704 <__mdiff+0x38>
 80076e2:	4629      	mov	r1, r5
 80076e4:	4630      	mov	r0, r6
 80076e6:	f7ff fd53 	bl	8007190 <_Balloc>
 80076ea:	b930      	cbnz	r0, 80076fa <__mdiff+0x2e>
 80076ec:	4b3a      	ldr	r3, [pc, #232]	; (80077d8 <__mdiff+0x10c>)
 80076ee:	4602      	mov	r2, r0
 80076f0:	f240 2132 	movw	r1, #562	; 0x232
 80076f4:	4839      	ldr	r0, [pc, #228]	; (80077dc <__mdiff+0x110>)
 80076f6:	f000 fa2b 	bl	8007b50 <__assert_func>
 80076fa:	2301      	movs	r3, #1
 80076fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007700:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007704:	bfa4      	itt	ge
 8007706:	4643      	movge	r3, r8
 8007708:	46a0      	movge	r8, r4
 800770a:	4630      	mov	r0, r6
 800770c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007710:	bfa6      	itte	ge
 8007712:	461c      	movge	r4, r3
 8007714:	2500      	movge	r5, #0
 8007716:	2501      	movlt	r5, #1
 8007718:	f7ff fd3a 	bl	8007190 <_Balloc>
 800771c:	b920      	cbnz	r0, 8007728 <__mdiff+0x5c>
 800771e:	4b2e      	ldr	r3, [pc, #184]	; (80077d8 <__mdiff+0x10c>)
 8007720:	4602      	mov	r2, r0
 8007722:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007726:	e7e5      	b.n	80076f4 <__mdiff+0x28>
 8007728:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800772c:	6926      	ldr	r6, [r4, #16]
 800772e:	60c5      	str	r5, [r0, #12]
 8007730:	f104 0914 	add.w	r9, r4, #20
 8007734:	f108 0514 	add.w	r5, r8, #20
 8007738:	f100 0e14 	add.w	lr, r0, #20
 800773c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007740:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007744:	f108 0210 	add.w	r2, r8, #16
 8007748:	46f2      	mov	sl, lr
 800774a:	2100      	movs	r1, #0
 800774c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007750:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007754:	fa1f f883 	uxth.w	r8, r3
 8007758:	fa11 f18b 	uxtah	r1, r1, fp
 800775c:	0c1b      	lsrs	r3, r3, #16
 800775e:	eba1 0808 	sub.w	r8, r1, r8
 8007762:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007766:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800776a:	fa1f f888 	uxth.w	r8, r8
 800776e:	1419      	asrs	r1, r3, #16
 8007770:	454e      	cmp	r6, r9
 8007772:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007776:	f84a 3b04 	str.w	r3, [sl], #4
 800777a:	d8e7      	bhi.n	800774c <__mdiff+0x80>
 800777c:	1b33      	subs	r3, r6, r4
 800777e:	3b15      	subs	r3, #21
 8007780:	f023 0303 	bic.w	r3, r3, #3
 8007784:	3304      	adds	r3, #4
 8007786:	3415      	adds	r4, #21
 8007788:	42a6      	cmp	r6, r4
 800778a:	bf38      	it	cc
 800778c:	2304      	movcc	r3, #4
 800778e:	441d      	add	r5, r3
 8007790:	4473      	add	r3, lr
 8007792:	469e      	mov	lr, r3
 8007794:	462e      	mov	r6, r5
 8007796:	4566      	cmp	r6, ip
 8007798:	d30e      	bcc.n	80077b8 <__mdiff+0xec>
 800779a:	f10c 0203 	add.w	r2, ip, #3
 800779e:	1b52      	subs	r2, r2, r5
 80077a0:	f022 0203 	bic.w	r2, r2, #3
 80077a4:	3d03      	subs	r5, #3
 80077a6:	45ac      	cmp	ip, r5
 80077a8:	bf38      	it	cc
 80077aa:	2200      	movcc	r2, #0
 80077ac:	441a      	add	r2, r3
 80077ae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80077b2:	b17b      	cbz	r3, 80077d4 <__mdiff+0x108>
 80077b4:	6107      	str	r7, [r0, #16]
 80077b6:	e7a3      	b.n	8007700 <__mdiff+0x34>
 80077b8:	f856 8b04 	ldr.w	r8, [r6], #4
 80077bc:	fa11 f288 	uxtah	r2, r1, r8
 80077c0:	1414      	asrs	r4, r2, #16
 80077c2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80077c6:	b292      	uxth	r2, r2
 80077c8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80077cc:	f84e 2b04 	str.w	r2, [lr], #4
 80077d0:	1421      	asrs	r1, r4, #16
 80077d2:	e7e0      	b.n	8007796 <__mdiff+0xca>
 80077d4:	3f01      	subs	r7, #1
 80077d6:	e7ea      	b.n	80077ae <__mdiff+0xe2>
 80077d8:	08008daf 	.word	0x08008daf
 80077dc:	08008e20 	.word	0x08008e20

080077e0 <__d2b>:
 80077e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80077e4:	4689      	mov	r9, r1
 80077e6:	2101      	movs	r1, #1
 80077e8:	ec57 6b10 	vmov	r6, r7, d0
 80077ec:	4690      	mov	r8, r2
 80077ee:	f7ff fccf 	bl	8007190 <_Balloc>
 80077f2:	4604      	mov	r4, r0
 80077f4:	b930      	cbnz	r0, 8007804 <__d2b+0x24>
 80077f6:	4602      	mov	r2, r0
 80077f8:	4b25      	ldr	r3, [pc, #148]	; (8007890 <__d2b+0xb0>)
 80077fa:	4826      	ldr	r0, [pc, #152]	; (8007894 <__d2b+0xb4>)
 80077fc:	f240 310a 	movw	r1, #778	; 0x30a
 8007800:	f000 f9a6 	bl	8007b50 <__assert_func>
 8007804:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007808:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800780c:	bb35      	cbnz	r5, 800785c <__d2b+0x7c>
 800780e:	2e00      	cmp	r6, #0
 8007810:	9301      	str	r3, [sp, #4]
 8007812:	d028      	beq.n	8007866 <__d2b+0x86>
 8007814:	4668      	mov	r0, sp
 8007816:	9600      	str	r6, [sp, #0]
 8007818:	f7ff fd82 	bl	8007320 <__lo0bits>
 800781c:	9900      	ldr	r1, [sp, #0]
 800781e:	b300      	cbz	r0, 8007862 <__d2b+0x82>
 8007820:	9a01      	ldr	r2, [sp, #4]
 8007822:	f1c0 0320 	rsb	r3, r0, #32
 8007826:	fa02 f303 	lsl.w	r3, r2, r3
 800782a:	430b      	orrs	r3, r1
 800782c:	40c2      	lsrs	r2, r0
 800782e:	6163      	str	r3, [r4, #20]
 8007830:	9201      	str	r2, [sp, #4]
 8007832:	9b01      	ldr	r3, [sp, #4]
 8007834:	61a3      	str	r3, [r4, #24]
 8007836:	2b00      	cmp	r3, #0
 8007838:	bf14      	ite	ne
 800783a:	2202      	movne	r2, #2
 800783c:	2201      	moveq	r2, #1
 800783e:	6122      	str	r2, [r4, #16]
 8007840:	b1d5      	cbz	r5, 8007878 <__d2b+0x98>
 8007842:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007846:	4405      	add	r5, r0
 8007848:	f8c9 5000 	str.w	r5, [r9]
 800784c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007850:	f8c8 0000 	str.w	r0, [r8]
 8007854:	4620      	mov	r0, r4
 8007856:	b003      	add	sp, #12
 8007858:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800785c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007860:	e7d5      	b.n	800780e <__d2b+0x2e>
 8007862:	6161      	str	r1, [r4, #20]
 8007864:	e7e5      	b.n	8007832 <__d2b+0x52>
 8007866:	a801      	add	r0, sp, #4
 8007868:	f7ff fd5a 	bl	8007320 <__lo0bits>
 800786c:	9b01      	ldr	r3, [sp, #4]
 800786e:	6163      	str	r3, [r4, #20]
 8007870:	2201      	movs	r2, #1
 8007872:	6122      	str	r2, [r4, #16]
 8007874:	3020      	adds	r0, #32
 8007876:	e7e3      	b.n	8007840 <__d2b+0x60>
 8007878:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800787c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007880:	f8c9 0000 	str.w	r0, [r9]
 8007884:	6918      	ldr	r0, [r3, #16]
 8007886:	f7ff fd2b 	bl	80072e0 <__hi0bits>
 800788a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800788e:	e7df      	b.n	8007850 <__d2b+0x70>
 8007890:	08008daf 	.word	0x08008daf
 8007894:	08008e20 	.word	0x08008e20

08007898 <_calloc_r>:
 8007898:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800789a:	fba1 2402 	umull	r2, r4, r1, r2
 800789e:	b94c      	cbnz	r4, 80078b4 <_calloc_r+0x1c>
 80078a0:	4611      	mov	r1, r2
 80078a2:	9201      	str	r2, [sp, #4]
 80078a4:	f000 f87a 	bl	800799c <_malloc_r>
 80078a8:	9a01      	ldr	r2, [sp, #4]
 80078aa:	4605      	mov	r5, r0
 80078ac:	b930      	cbnz	r0, 80078bc <_calloc_r+0x24>
 80078ae:	4628      	mov	r0, r5
 80078b0:	b003      	add	sp, #12
 80078b2:	bd30      	pop	{r4, r5, pc}
 80078b4:	220c      	movs	r2, #12
 80078b6:	6002      	str	r2, [r0, #0]
 80078b8:	2500      	movs	r5, #0
 80078ba:	e7f8      	b.n	80078ae <_calloc_r+0x16>
 80078bc:	4621      	mov	r1, r4
 80078be:	f7fd fe73 	bl	80055a8 <memset>
 80078c2:	e7f4      	b.n	80078ae <_calloc_r+0x16>

080078c4 <_free_r>:
 80078c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078c6:	2900      	cmp	r1, #0
 80078c8:	d044      	beq.n	8007954 <_free_r+0x90>
 80078ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078ce:	9001      	str	r0, [sp, #4]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f1a1 0404 	sub.w	r4, r1, #4
 80078d6:	bfb8      	it	lt
 80078d8:	18e4      	addlt	r4, r4, r3
 80078da:	f000 f9bf 	bl	8007c5c <__malloc_lock>
 80078de:	4a1e      	ldr	r2, [pc, #120]	; (8007958 <_free_r+0x94>)
 80078e0:	9801      	ldr	r0, [sp, #4]
 80078e2:	6813      	ldr	r3, [r2, #0]
 80078e4:	b933      	cbnz	r3, 80078f4 <_free_r+0x30>
 80078e6:	6063      	str	r3, [r4, #4]
 80078e8:	6014      	str	r4, [r2, #0]
 80078ea:	b003      	add	sp, #12
 80078ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078f0:	f000 b9ba 	b.w	8007c68 <__malloc_unlock>
 80078f4:	42a3      	cmp	r3, r4
 80078f6:	d908      	bls.n	800790a <_free_r+0x46>
 80078f8:	6825      	ldr	r5, [r4, #0]
 80078fa:	1961      	adds	r1, r4, r5
 80078fc:	428b      	cmp	r3, r1
 80078fe:	bf01      	itttt	eq
 8007900:	6819      	ldreq	r1, [r3, #0]
 8007902:	685b      	ldreq	r3, [r3, #4]
 8007904:	1949      	addeq	r1, r1, r5
 8007906:	6021      	streq	r1, [r4, #0]
 8007908:	e7ed      	b.n	80078e6 <_free_r+0x22>
 800790a:	461a      	mov	r2, r3
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	b10b      	cbz	r3, 8007914 <_free_r+0x50>
 8007910:	42a3      	cmp	r3, r4
 8007912:	d9fa      	bls.n	800790a <_free_r+0x46>
 8007914:	6811      	ldr	r1, [r2, #0]
 8007916:	1855      	adds	r5, r2, r1
 8007918:	42a5      	cmp	r5, r4
 800791a:	d10b      	bne.n	8007934 <_free_r+0x70>
 800791c:	6824      	ldr	r4, [r4, #0]
 800791e:	4421      	add	r1, r4
 8007920:	1854      	adds	r4, r2, r1
 8007922:	42a3      	cmp	r3, r4
 8007924:	6011      	str	r1, [r2, #0]
 8007926:	d1e0      	bne.n	80078ea <_free_r+0x26>
 8007928:	681c      	ldr	r4, [r3, #0]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	6053      	str	r3, [r2, #4]
 800792e:	4421      	add	r1, r4
 8007930:	6011      	str	r1, [r2, #0]
 8007932:	e7da      	b.n	80078ea <_free_r+0x26>
 8007934:	d902      	bls.n	800793c <_free_r+0x78>
 8007936:	230c      	movs	r3, #12
 8007938:	6003      	str	r3, [r0, #0]
 800793a:	e7d6      	b.n	80078ea <_free_r+0x26>
 800793c:	6825      	ldr	r5, [r4, #0]
 800793e:	1961      	adds	r1, r4, r5
 8007940:	428b      	cmp	r3, r1
 8007942:	bf04      	itt	eq
 8007944:	6819      	ldreq	r1, [r3, #0]
 8007946:	685b      	ldreq	r3, [r3, #4]
 8007948:	6063      	str	r3, [r4, #4]
 800794a:	bf04      	itt	eq
 800794c:	1949      	addeq	r1, r1, r5
 800794e:	6021      	streq	r1, [r4, #0]
 8007950:	6054      	str	r4, [r2, #4]
 8007952:	e7ca      	b.n	80078ea <_free_r+0x26>
 8007954:	b003      	add	sp, #12
 8007956:	bd30      	pop	{r4, r5, pc}
 8007958:	2000042c 	.word	0x2000042c

0800795c <sbrk_aligned>:
 800795c:	b570      	push	{r4, r5, r6, lr}
 800795e:	4e0e      	ldr	r6, [pc, #56]	; (8007998 <sbrk_aligned+0x3c>)
 8007960:	460c      	mov	r4, r1
 8007962:	6831      	ldr	r1, [r6, #0]
 8007964:	4605      	mov	r5, r0
 8007966:	b911      	cbnz	r1, 800796e <sbrk_aligned+0x12>
 8007968:	f000 f88c 	bl	8007a84 <_sbrk_r>
 800796c:	6030      	str	r0, [r6, #0]
 800796e:	4621      	mov	r1, r4
 8007970:	4628      	mov	r0, r5
 8007972:	f000 f887 	bl	8007a84 <_sbrk_r>
 8007976:	1c43      	adds	r3, r0, #1
 8007978:	d00a      	beq.n	8007990 <sbrk_aligned+0x34>
 800797a:	1cc4      	adds	r4, r0, #3
 800797c:	f024 0403 	bic.w	r4, r4, #3
 8007980:	42a0      	cmp	r0, r4
 8007982:	d007      	beq.n	8007994 <sbrk_aligned+0x38>
 8007984:	1a21      	subs	r1, r4, r0
 8007986:	4628      	mov	r0, r5
 8007988:	f000 f87c 	bl	8007a84 <_sbrk_r>
 800798c:	3001      	adds	r0, #1
 800798e:	d101      	bne.n	8007994 <sbrk_aligned+0x38>
 8007990:	f04f 34ff 	mov.w	r4, #4294967295
 8007994:	4620      	mov	r0, r4
 8007996:	bd70      	pop	{r4, r5, r6, pc}
 8007998:	20000430 	.word	0x20000430

0800799c <_malloc_r>:
 800799c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079a0:	1ccd      	adds	r5, r1, #3
 80079a2:	f025 0503 	bic.w	r5, r5, #3
 80079a6:	3508      	adds	r5, #8
 80079a8:	2d0c      	cmp	r5, #12
 80079aa:	bf38      	it	cc
 80079ac:	250c      	movcc	r5, #12
 80079ae:	2d00      	cmp	r5, #0
 80079b0:	4607      	mov	r7, r0
 80079b2:	db01      	blt.n	80079b8 <_malloc_r+0x1c>
 80079b4:	42a9      	cmp	r1, r5
 80079b6:	d905      	bls.n	80079c4 <_malloc_r+0x28>
 80079b8:	230c      	movs	r3, #12
 80079ba:	603b      	str	r3, [r7, #0]
 80079bc:	2600      	movs	r6, #0
 80079be:	4630      	mov	r0, r6
 80079c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079c4:	4e2e      	ldr	r6, [pc, #184]	; (8007a80 <_malloc_r+0xe4>)
 80079c6:	f000 f949 	bl	8007c5c <__malloc_lock>
 80079ca:	6833      	ldr	r3, [r6, #0]
 80079cc:	461c      	mov	r4, r3
 80079ce:	bb34      	cbnz	r4, 8007a1e <_malloc_r+0x82>
 80079d0:	4629      	mov	r1, r5
 80079d2:	4638      	mov	r0, r7
 80079d4:	f7ff ffc2 	bl	800795c <sbrk_aligned>
 80079d8:	1c43      	adds	r3, r0, #1
 80079da:	4604      	mov	r4, r0
 80079dc:	d14d      	bne.n	8007a7a <_malloc_r+0xde>
 80079de:	6834      	ldr	r4, [r6, #0]
 80079e0:	4626      	mov	r6, r4
 80079e2:	2e00      	cmp	r6, #0
 80079e4:	d140      	bne.n	8007a68 <_malloc_r+0xcc>
 80079e6:	6823      	ldr	r3, [r4, #0]
 80079e8:	4631      	mov	r1, r6
 80079ea:	4638      	mov	r0, r7
 80079ec:	eb04 0803 	add.w	r8, r4, r3
 80079f0:	f000 f848 	bl	8007a84 <_sbrk_r>
 80079f4:	4580      	cmp	r8, r0
 80079f6:	d13a      	bne.n	8007a6e <_malloc_r+0xd2>
 80079f8:	6821      	ldr	r1, [r4, #0]
 80079fa:	3503      	adds	r5, #3
 80079fc:	1a6d      	subs	r5, r5, r1
 80079fe:	f025 0503 	bic.w	r5, r5, #3
 8007a02:	3508      	adds	r5, #8
 8007a04:	2d0c      	cmp	r5, #12
 8007a06:	bf38      	it	cc
 8007a08:	250c      	movcc	r5, #12
 8007a0a:	4629      	mov	r1, r5
 8007a0c:	4638      	mov	r0, r7
 8007a0e:	f7ff ffa5 	bl	800795c <sbrk_aligned>
 8007a12:	3001      	adds	r0, #1
 8007a14:	d02b      	beq.n	8007a6e <_malloc_r+0xd2>
 8007a16:	6823      	ldr	r3, [r4, #0]
 8007a18:	442b      	add	r3, r5
 8007a1a:	6023      	str	r3, [r4, #0]
 8007a1c:	e00e      	b.n	8007a3c <_malloc_r+0xa0>
 8007a1e:	6822      	ldr	r2, [r4, #0]
 8007a20:	1b52      	subs	r2, r2, r5
 8007a22:	d41e      	bmi.n	8007a62 <_malloc_r+0xc6>
 8007a24:	2a0b      	cmp	r2, #11
 8007a26:	d916      	bls.n	8007a56 <_malloc_r+0xba>
 8007a28:	1961      	adds	r1, r4, r5
 8007a2a:	42a3      	cmp	r3, r4
 8007a2c:	6025      	str	r5, [r4, #0]
 8007a2e:	bf18      	it	ne
 8007a30:	6059      	strne	r1, [r3, #4]
 8007a32:	6863      	ldr	r3, [r4, #4]
 8007a34:	bf08      	it	eq
 8007a36:	6031      	streq	r1, [r6, #0]
 8007a38:	5162      	str	r2, [r4, r5]
 8007a3a:	604b      	str	r3, [r1, #4]
 8007a3c:	4638      	mov	r0, r7
 8007a3e:	f104 060b 	add.w	r6, r4, #11
 8007a42:	f000 f911 	bl	8007c68 <__malloc_unlock>
 8007a46:	f026 0607 	bic.w	r6, r6, #7
 8007a4a:	1d23      	adds	r3, r4, #4
 8007a4c:	1af2      	subs	r2, r6, r3
 8007a4e:	d0b6      	beq.n	80079be <_malloc_r+0x22>
 8007a50:	1b9b      	subs	r3, r3, r6
 8007a52:	50a3      	str	r3, [r4, r2]
 8007a54:	e7b3      	b.n	80079be <_malloc_r+0x22>
 8007a56:	6862      	ldr	r2, [r4, #4]
 8007a58:	42a3      	cmp	r3, r4
 8007a5a:	bf0c      	ite	eq
 8007a5c:	6032      	streq	r2, [r6, #0]
 8007a5e:	605a      	strne	r2, [r3, #4]
 8007a60:	e7ec      	b.n	8007a3c <_malloc_r+0xa0>
 8007a62:	4623      	mov	r3, r4
 8007a64:	6864      	ldr	r4, [r4, #4]
 8007a66:	e7b2      	b.n	80079ce <_malloc_r+0x32>
 8007a68:	4634      	mov	r4, r6
 8007a6a:	6876      	ldr	r6, [r6, #4]
 8007a6c:	e7b9      	b.n	80079e2 <_malloc_r+0x46>
 8007a6e:	230c      	movs	r3, #12
 8007a70:	603b      	str	r3, [r7, #0]
 8007a72:	4638      	mov	r0, r7
 8007a74:	f000 f8f8 	bl	8007c68 <__malloc_unlock>
 8007a78:	e7a1      	b.n	80079be <_malloc_r+0x22>
 8007a7a:	6025      	str	r5, [r4, #0]
 8007a7c:	e7de      	b.n	8007a3c <_malloc_r+0xa0>
 8007a7e:	bf00      	nop
 8007a80:	2000042c 	.word	0x2000042c

08007a84 <_sbrk_r>:
 8007a84:	b538      	push	{r3, r4, r5, lr}
 8007a86:	4d06      	ldr	r5, [pc, #24]	; (8007aa0 <_sbrk_r+0x1c>)
 8007a88:	2300      	movs	r3, #0
 8007a8a:	4604      	mov	r4, r0
 8007a8c:	4608      	mov	r0, r1
 8007a8e:	602b      	str	r3, [r5, #0]
 8007a90:	f7fa ffd0 	bl	8002a34 <_sbrk>
 8007a94:	1c43      	adds	r3, r0, #1
 8007a96:	d102      	bne.n	8007a9e <_sbrk_r+0x1a>
 8007a98:	682b      	ldr	r3, [r5, #0]
 8007a9a:	b103      	cbz	r3, 8007a9e <_sbrk_r+0x1a>
 8007a9c:	6023      	str	r3, [r4, #0]
 8007a9e:	bd38      	pop	{r3, r4, r5, pc}
 8007aa0:	20000434 	.word	0x20000434

08007aa4 <__sread>:
 8007aa4:	b510      	push	{r4, lr}
 8007aa6:	460c      	mov	r4, r1
 8007aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aac:	f000 fa3c 	bl	8007f28 <_read_r>
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	bfab      	itete	ge
 8007ab4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ab6:	89a3      	ldrhlt	r3, [r4, #12]
 8007ab8:	181b      	addge	r3, r3, r0
 8007aba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007abe:	bfac      	ite	ge
 8007ac0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ac2:	81a3      	strhlt	r3, [r4, #12]
 8007ac4:	bd10      	pop	{r4, pc}

08007ac6 <__swrite>:
 8007ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aca:	461f      	mov	r7, r3
 8007acc:	898b      	ldrh	r3, [r1, #12]
 8007ace:	05db      	lsls	r3, r3, #23
 8007ad0:	4605      	mov	r5, r0
 8007ad2:	460c      	mov	r4, r1
 8007ad4:	4616      	mov	r6, r2
 8007ad6:	d505      	bpl.n	8007ae4 <__swrite+0x1e>
 8007ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007adc:	2302      	movs	r3, #2
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f000 f898 	bl	8007c14 <_lseek_r>
 8007ae4:	89a3      	ldrh	r3, [r4, #12]
 8007ae6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007aea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007aee:	81a3      	strh	r3, [r4, #12]
 8007af0:	4632      	mov	r2, r6
 8007af2:	463b      	mov	r3, r7
 8007af4:	4628      	mov	r0, r5
 8007af6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007afa:	f000 b817 	b.w	8007b2c <_write_r>

08007afe <__sseek>:
 8007afe:	b510      	push	{r4, lr}
 8007b00:	460c      	mov	r4, r1
 8007b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b06:	f000 f885 	bl	8007c14 <_lseek_r>
 8007b0a:	1c43      	adds	r3, r0, #1
 8007b0c:	89a3      	ldrh	r3, [r4, #12]
 8007b0e:	bf15      	itete	ne
 8007b10:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b1a:	81a3      	strheq	r3, [r4, #12]
 8007b1c:	bf18      	it	ne
 8007b1e:	81a3      	strhne	r3, [r4, #12]
 8007b20:	bd10      	pop	{r4, pc}

08007b22 <__sclose>:
 8007b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b26:	f000 b831 	b.w	8007b8c <_close_r>
	...

08007b2c <_write_r>:
 8007b2c:	b538      	push	{r3, r4, r5, lr}
 8007b2e:	4d07      	ldr	r5, [pc, #28]	; (8007b4c <_write_r+0x20>)
 8007b30:	4604      	mov	r4, r0
 8007b32:	4608      	mov	r0, r1
 8007b34:	4611      	mov	r1, r2
 8007b36:	2200      	movs	r2, #0
 8007b38:	602a      	str	r2, [r5, #0]
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	f7fa fdbe 	bl	80026bc <_write>
 8007b40:	1c43      	adds	r3, r0, #1
 8007b42:	d102      	bne.n	8007b4a <_write_r+0x1e>
 8007b44:	682b      	ldr	r3, [r5, #0]
 8007b46:	b103      	cbz	r3, 8007b4a <_write_r+0x1e>
 8007b48:	6023      	str	r3, [r4, #0]
 8007b4a:	bd38      	pop	{r3, r4, r5, pc}
 8007b4c:	20000434 	.word	0x20000434

08007b50 <__assert_func>:
 8007b50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b52:	4614      	mov	r4, r2
 8007b54:	461a      	mov	r2, r3
 8007b56:	4b09      	ldr	r3, [pc, #36]	; (8007b7c <__assert_func+0x2c>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4605      	mov	r5, r0
 8007b5c:	68d8      	ldr	r0, [r3, #12]
 8007b5e:	b14c      	cbz	r4, 8007b74 <__assert_func+0x24>
 8007b60:	4b07      	ldr	r3, [pc, #28]	; (8007b80 <__assert_func+0x30>)
 8007b62:	9100      	str	r1, [sp, #0]
 8007b64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b68:	4906      	ldr	r1, [pc, #24]	; (8007b84 <__assert_func+0x34>)
 8007b6a:	462b      	mov	r3, r5
 8007b6c:	f000 f81e 	bl	8007bac <fiprintf>
 8007b70:	f000 faba 	bl	80080e8 <abort>
 8007b74:	4b04      	ldr	r3, [pc, #16]	; (8007b88 <__assert_func+0x38>)
 8007b76:	461c      	mov	r4, r3
 8007b78:	e7f3      	b.n	8007b62 <__assert_func+0x12>
 8007b7a:	bf00      	nop
 8007b7c:	2000003c 	.word	0x2000003c
 8007b80:	08008f7c 	.word	0x08008f7c
 8007b84:	08008f89 	.word	0x08008f89
 8007b88:	08008fb7 	.word	0x08008fb7

08007b8c <_close_r>:
 8007b8c:	b538      	push	{r3, r4, r5, lr}
 8007b8e:	4d06      	ldr	r5, [pc, #24]	; (8007ba8 <_close_r+0x1c>)
 8007b90:	2300      	movs	r3, #0
 8007b92:	4604      	mov	r4, r0
 8007b94:	4608      	mov	r0, r1
 8007b96:	602b      	str	r3, [r5, #0]
 8007b98:	f7fa ff17 	bl	80029ca <_close>
 8007b9c:	1c43      	adds	r3, r0, #1
 8007b9e:	d102      	bne.n	8007ba6 <_close_r+0x1a>
 8007ba0:	682b      	ldr	r3, [r5, #0]
 8007ba2:	b103      	cbz	r3, 8007ba6 <_close_r+0x1a>
 8007ba4:	6023      	str	r3, [r4, #0]
 8007ba6:	bd38      	pop	{r3, r4, r5, pc}
 8007ba8:	20000434 	.word	0x20000434

08007bac <fiprintf>:
 8007bac:	b40e      	push	{r1, r2, r3}
 8007bae:	b503      	push	{r0, r1, lr}
 8007bb0:	4601      	mov	r1, r0
 8007bb2:	ab03      	add	r3, sp, #12
 8007bb4:	4805      	ldr	r0, [pc, #20]	; (8007bcc <fiprintf+0x20>)
 8007bb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bba:	6800      	ldr	r0, [r0, #0]
 8007bbc:	9301      	str	r3, [sp, #4]
 8007bbe:	f000 f883 	bl	8007cc8 <_vfiprintf_r>
 8007bc2:	b002      	add	sp, #8
 8007bc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bc8:	b003      	add	sp, #12
 8007bca:	4770      	bx	lr
 8007bcc:	2000003c 	.word	0x2000003c

08007bd0 <_fstat_r>:
 8007bd0:	b538      	push	{r3, r4, r5, lr}
 8007bd2:	4d07      	ldr	r5, [pc, #28]	; (8007bf0 <_fstat_r+0x20>)
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	4604      	mov	r4, r0
 8007bd8:	4608      	mov	r0, r1
 8007bda:	4611      	mov	r1, r2
 8007bdc:	602b      	str	r3, [r5, #0]
 8007bde:	f7fa ff00 	bl	80029e2 <_fstat>
 8007be2:	1c43      	adds	r3, r0, #1
 8007be4:	d102      	bne.n	8007bec <_fstat_r+0x1c>
 8007be6:	682b      	ldr	r3, [r5, #0]
 8007be8:	b103      	cbz	r3, 8007bec <_fstat_r+0x1c>
 8007bea:	6023      	str	r3, [r4, #0]
 8007bec:	bd38      	pop	{r3, r4, r5, pc}
 8007bee:	bf00      	nop
 8007bf0:	20000434 	.word	0x20000434

08007bf4 <_isatty_r>:
 8007bf4:	b538      	push	{r3, r4, r5, lr}
 8007bf6:	4d06      	ldr	r5, [pc, #24]	; (8007c10 <_isatty_r+0x1c>)
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	4604      	mov	r4, r0
 8007bfc:	4608      	mov	r0, r1
 8007bfe:	602b      	str	r3, [r5, #0]
 8007c00:	f7fa feff 	bl	8002a02 <_isatty>
 8007c04:	1c43      	adds	r3, r0, #1
 8007c06:	d102      	bne.n	8007c0e <_isatty_r+0x1a>
 8007c08:	682b      	ldr	r3, [r5, #0]
 8007c0a:	b103      	cbz	r3, 8007c0e <_isatty_r+0x1a>
 8007c0c:	6023      	str	r3, [r4, #0]
 8007c0e:	bd38      	pop	{r3, r4, r5, pc}
 8007c10:	20000434 	.word	0x20000434

08007c14 <_lseek_r>:
 8007c14:	b538      	push	{r3, r4, r5, lr}
 8007c16:	4d07      	ldr	r5, [pc, #28]	; (8007c34 <_lseek_r+0x20>)
 8007c18:	4604      	mov	r4, r0
 8007c1a:	4608      	mov	r0, r1
 8007c1c:	4611      	mov	r1, r2
 8007c1e:	2200      	movs	r2, #0
 8007c20:	602a      	str	r2, [r5, #0]
 8007c22:	461a      	mov	r2, r3
 8007c24:	f7fa fef8 	bl	8002a18 <_lseek>
 8007c28:	1c43      	adds	r3, r0, #1
 8007c2a:	d102      	bne.n	8007c32 <_lseek_r+0x1e>
 8007c2c:	682b      	ldr	r3, [r5, #0]
 8007c2e:	b103      	cbz	r3, 8007c32 <_lseek_r+0x1e>
 8007c30:	6023      	str	r3, [r4, #0]
 8007c32:	bd38      	pop	{r3, r4, r5, pc}
 8007c34:	20000434 	.word	0x20000434

08007c38 <__ascii_mbtowc>:
 8007c38:	b082      	sub	sp, #8
 8007c3a:	b901      	cbnz	r1, 8007c3e <__ascii_mbtowc+0x6>
 8007c3c:	a901      	add	r1, sp, #4
 8007c3e:	b142      	cbz	r2, 8007c52 <__ascii_mbtowc+0x1a>
 8007c40:	b14b      	cbz	r3, 8007c56 <__ascii_mbtowc+0x1e>
 8007c42:	7813      	ldrb	r3, [r2, #0]
 8007c44:	600b      	str	r3, [r1, #0]
 8007c46:	7812      	ldrb	r2, [r2, #0]
 8007c48:	1e10      	subs	r0, r2, #0
 8007c4a:	bf18      	it	ne
 8007c4c:	2001      	movne	r0, #1
 8007c4e:	b002      	add	sp, #8
 8007c50:	4770      	bx	lr
 8007c52:	4610      	mov	r0, r2
 8007c54:	e7fb      	b.n	8007c4e <__ascii_mbtowc+0x16>
 8007c56:	f06f 0001 	mvn.w	r0, #1
 8007c5a:	e7f8      	b.n	8007c4e <__ascii_mbtowc+0x16>

08007c5c <__malloc_lock>:
 8007c5c:	4801      	ldr	r0, [pc, #4]	; (8007c64 <__malloc_lock+0x8>)
 8007c5e:	f7ff ba1a 	b.w	8007096 <__retarget_lock_acquire_recursive>
 8007c62:	bf00      	nop
 8007c64:	20000428 	.word	0x20000428

08007c68 <__malloc_unlock>:
 8007c68:	4801      	ldr	r0, [pc, #4]	; (8007c70 <__malloc_unlock+0x8>)
 8007c6a:	f7ff ba15 	b.w	8007098 <__retarget_lock_release_recursive>
 8007c6e:	bf00      	nop
 8007c70:	20000428 	.word	0x20000428

08007c74 <__sfputc_r>:
 8007c74:	6893      	ldr	r3, [r2, #8]
 8007c76:	3b01      	subs	r3, #1
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	b410      	push	{r4}
 8007c7c:	6093      	str	r3, [r2, #8]
 8007c7e:	da08      	bge.n	8007c92 <__sfputc_r+0x1e>
 8007c80:	6994      	ldr	r4, [r2, #24]
 8007c82:	42a3      	cmp	r3, r4
 8007c84:	db01      	blt.n	8007c8a <__sfputc_r+0x16>
 8007c86:	290a      	cmp	r1, #10
 8007c88:	d103      	bne.n	8007c92 <__sfputc_r+0x1e>
 8007c8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c8e:	f000 b95d 	b.w	8007f4c <__swbuf_r>
 8007c92:	6813      	ldr	r3, [r2, #0]
 8007c94:	1c58      	adds	r0, r3, #1
 8007c96:	6010      	str	r0, [r2, #0]
 8007c98:	7019      	strb	r1, [r3, #0]
 8007c9a:	4608      	mov	r0, r1
 8007c9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ca0:	4770      	bx	lr

08007ca2 <__sfputs_r>:
 8007ca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ca4:	4606      	mov	r6, r0
 8007ca6:	460f      	mov	r7, r1
 8007ca8:	4614      	mov	r4, r2
 8007caa:	18d5      	adds	r5, r2, r3
 8007cac:	42ac      	cmp	r4, r5
 8007cae:	d101      	bne.n	8007cb4 <__sfputs_r+0x12>
 8007cb0:	2000      	movs	r0, #0
 8007cb2:	e007      	b.n	8007cc4 <__sfputs_r+0x22>
 8007cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cb8:	463a      	mov	r2, r7
 8007cba:	4630      	mov	r0, r6
 8007cbc:	f7ff ffda 	bl	8007c74 <__sfputc_r>
 8007cc0:	1c43      	adds	r3, r0, #1
 8007cc2:	d1f3      	bne.n	8007cac <__sfputs_r+0xa>
 8007cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007cc8 <_vfiprintf_r>:
 8007cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ccc:	460d      	mov	r5, r1
 8007cce:	b09d      	sub	sp, #116	; 0x74
 8007cd0:	4614      	mov	r4, r2
 8007cd2:	4698      	mov	r8, r3
 8007cd4:	4606      	mov	r6, r0
 8007cd6:	b118      	cbz	r0, 8007ce0 <_vfiprintf_r+0x18>
 8007cd8:	6983      	ldr	r3, [r0, #24]
 8007cda:	b90b      	cbnz	r3, 8007ce0 <_vfiprintf_r+0x18>
 8007cdc:	f7ff f938 	bl	8006f50 <__sinit>
 8007ce0:	4b89      	ldr	r3, [pc, #548]	; (8007f08 <_vfiprintf_r+0x240>)
 8007ce2:	429d      	cmp	r5, r3
 8007ce4:	d11b      	bne.n	8007d1e <_vfiprintf_r+0x56>
 8007ce6:	6875      	ldr	r5, [r6, #4]
 8007ce8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cea:	07d9      	lsls	r1, r3, #31
 8007cec:	d405      	bmi.n	8007cfa <_vfiprintf_r+0x32>
 8007cee:	89ab      	ldrh	r3, [r5, #12]
 8007cf0:	059a      	lsls	r2, r3, #22
 8007cf2:	d402      	bmi.n	8007cfa <_vfiprintf_r+0x32>
 8007cf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cf6:	f7ff f9ce 	bl	8007096 <__retarget_lock_acquire_recursive>
 8007cfa:	89ab      	ldrh	r3, [r5, #12]
 8007cfc:	071b      	lsls	r3, r3, #28
 8007cfe:	d501      	bpl.n	8007d04 <_vfiprintf_r+0x3c>
 8007d00:	692b      	ldr	r3, [r5, #16]
 8007d02:	b9eb      	cbnz	r3, 8007d40 <_vfiprintf_r+0x78>
 8007d04:	4629      	mov	r1, r5
 8007d06:	4630      	mov	r0, r6
 8007d08:	f000 f980 	bl	800800c <__swsetup_r>
 8007d0c:	b1c0      	cbz	r0, 8007d40 <_vfiprintf_r+0x78>
 8007d0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d10:	07dc      	lsls	r4, r3, #31
 8007d12:	d50e      	bpl.n	8007d32 <_vfiprintf_r+0x6a>
 8007d14:	f04f 30ff 	mov.w	r0, #4294967295
 8007d18:	b01d      	add	sp, #116	; 0x74
 8007d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d1e:	4b7b      	ldr	r3, [pc, #492]	; (8007f0c <_vfiprintf_r+0x244>)
 8007d20:	429d      	cmp	r5, r3
 8007d22:	d101      	bne.n	8007d28 <_vfiprintf_r+0x60>
 8007d24:	68b5      	ldr	r5, [r6, #8]
 8007d26:	e7df      	b.n	8007ce8 <_vfiprintf_r+0x20>
 8007d28:	4b79      	ldr	r3, [pc, #484]	; (8007f10 <_vfiprintf_r+0x248>)
 8007d2a:	429d      	cmp	r5, r3
 8007d2c:	bf08      	it	eq
 8007d2e:	68f5      	ldreq	r5, [r6, #12]
 8007d30:	e7da      	b.n	8007ce8 <_vfiprintf_r+0x20>
 8007d32:	89ab      	ldrh	r3, [r5, #12]
 8007d34:	0598      	lsls	r0, r3, #22
 8007d36:	d4ed      	bmi.n	8007d14 <_vfiprintf_r+0x4c>
 8007d38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d3a:	f7ff f9ad 	bl	8007098 <__retarget_lock_release_recursive>
 8007d3e:	e7e9      	b.n	8007d14 <_vfiprintf_r+0x4c>
 8007d40:	2300      	movs	r3, #0
 8007d42:	9309      	str	r3, [sp, #36]	; 0x24
 8007d44:	2320      	movs	r3, #32
 8007d46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d4e:	2330      	movs	r3, #48	; 0x30
 8007d50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007f14 <_vfiprintf_r+0x24c>
 8007d54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d58:	f04f 0901 	mov.w	r9, #1
 8007d5c:	4623      	mov	r3, r4
 8007d5e:	469a      	mov	sl, r3
 8007d60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d64:	b10a      	cbz	r2, 8007d6a <_vfiprintf_r+0xa2>
 8007d66:	2a25      	cmp	r2, #37	; 0x25
 8007d68:	d1f9      	bne.n	8007d5e <_vfiprintf_r+0x96>
 8007d6a:	ebba 0b04 	subs.w	fp, sl, r4
 8007d6e:	d00b      	beq.n	8007d88 <_vfiprintf_r+0xc0>
 8007d70:	465b      	mov	r3, fp
 8007d72:	4622      	mov	r2, r4
 8007d74:	4629      	mov	r1, r5
 8007d76:	4630      	mov	r0, r6
 8007d78:	f7ff ff93 	bl	8007ca2 <__sfputs_r>
 8007d7c:	3001      	adds	r0, #1
 8007d7e:	f000 80aa 	beq.w	8007ed6 <_vfiprintf_r+0x20e>
 8007d82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d84:	445a      	add	r2, fp
 8007d86:	9209      	str	r2, [sp, #36]	; 0x24
 8007d88:	f89a 3000 	ldrb.w	r3, [sl]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	f000 80a2 	beq.w	8007ed6 <_vfiprintf_r+0x20e>
 8007d92:	2300      	movs	r3, #0
 8007d94:	f04f 32ff 	mov.w	r2, #4294967295
 8007d98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d9c:	f10a 0a01 	add.w	sl, sl, #1
 8007da0:	9304      	str	r3, [sp, #16]
 8007da2:	9307      	str	r3, [sp, #28]
 8007da4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007da8:	931a      	str	r3, [sp, #104]	; 0x68
 8007daa:	4654      	mov	r4, sl
 8007dac:	2205      	movs	r2, #5
 8007dae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007db2:	4858      	ldr	r0, [pc, #352]	; (8007f14 <_vfiprintf_r+0x24c>)
 8007db4:	f7f8 fa34 	bl	8000220 <memchr>
 8007db8:	9a04      	ldr	r2, [sp, #16]
 8007dba:	b9d8      	cbnz	r0, 8007df4 <_vfiprintf_r+0x12c>
 8007dbc:	06d1      	lsls	r1, r2, #27
 8007dbe:	bf44      	itt	mi
 8007dc0:	2320      	movmi	r3, #32
 8007dc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dc6:	0713      	lsls	r3, r2, #28
 8007dc8:	bf44      	itt	mi
 8007dca:	232b      	movmi	r3, #43	; 0x2b
 8007dcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dd0:	f89a 3000 	ldrb.w	r3, [sl]
 8007dd4:	2b2a      	cmp	r3, #42	; 0x2a
 8007dd6:	d015      	beq.n	8007e04 <_vfiprintf_r+0x13c>
 8007dd8:	9a07      	ldr	r2, [sp, #28]
 8007dda:	4654      	mov	r4, sl
 8007ddc:	2000      	movs	r0, #0
 8007dde:	f04f 0c0a 	mov.w	ip, #10
 8007de2:	4621      	mov	r1, r4
 8007de4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007de8:	3b30      	subs	r3, #48	; 0x30
 8007dea:	2b09      	cmp	r3, #9
 8007dec:	d94e      	bls.n	8007e8c <_vfiprintf_r+0x1c4>
 8007dee:	b1b0      	cbz	r0, 8007e1e <_vfiprintf_r+0x156>
 8007df0:	9207      	str	r2, [sp, #28]
 8007df2:	e014      	b.n	8007e1e <_vfiprintf_r+0x156>
 8007df4:	eba0 0308 	sub.w	r3, r0, r8
 8007df8:	fa09 f303 	lsl.w	r3, r9, r3
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	9304      	str	r3, [sp, #16]
 8007e00:	46a2      	mov	sl, r4
 8007e02:	e7d2      	b.n	8007daa <_vfiprintf_r+0xe2>
 8007e04:	9b03      	ldr	r3, [sp, #12]
 8007e06:	1d19      	adds	r1, r3, #4
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	9103      	str	r1, [sp, #12]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	bfbb      	ittet	lt
 8007e10:	425b      	neglt	r3, r3
 8007e12:	f042 0202 	orrlt.w	r2, r2, #2
 8007e16:	9307      	strge	r3, [sp, #28]
 8007e18:	9307      	strlt	r3, [sp, #28]
 8007e1a:	bfb8      	it	lt
 8007e1c:	9204      	strlt	r2, [sp, #16]
 8007e1e:	7823      	ldrb	r3, [r4, #0]
 8007e20:	2b2e      	cmp	r3, #46	; 0x2e
 8007e22:	d10c      	bne.n	8007e3e <_vfiprintf_r+0x176>
 8007e24:	7863      	ldrb	r3, [r4, #1]
 8007e26:	2b2a      	cmp	r3, #42	; 0x2a
 8007e28:	d135      	bne.n	8007e96 <_vfiprintf_r+0x1ce>
 8007e2a:	9b03      	ldr	r3, [sp, #12]
 8007e2c:	1d1a      	adds	r2, r3, #4
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	9203      	str	r2, [sp, #12]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	bfb8      	it	lt
 8007e36:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e3a:	3402      	adds	r4, #2
 8007e3c:	9305      	str	r3, [sp, #20]
 8007e3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007f24 <_vfiprintf_r+0x25c>
 8007e42:	7821      	ldrb	r1, [r4, #0]
 8007e44:	2203      	movs	r2, #3
 8007e46:	4650      	mov	r0, sl
 8007e48:	f7f8 f9ea 	bl	8000220 <memchr>
 8007e4c:	b140      	cbz	r0, 8007e60 <_vfiprintf_r+0x198>
 8007e4e:	2340      	movs	r3, #64	; 0x40
 8007e50:	eba0 000a 	sub.w	r0, r0, sl
 8007e54:	fa03 f000 	lsl.w	r0, r3, r0
 8007e58:	9b04      	ldr	r3, [sp, #16]
 8007e5a:	4303      	orrs	r3, r0
 8007e5c:	3401      	adds	r4, #1
 8007e5e:	9304      	str	r3, [sp, #16]
 8007e60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e64:	482c      	ldr	r0, [pc, #176]	; (8007f18 <_vfiprintf_r+0x250>)
 8007e66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e6a:	2206      	movs	r2, #6
 8007e6c:	f7f8 f9d8 	bl	8000220 <memchr>
 8007e70:	2800      	cmp	r0, #0
 8007e72:	d03f      	beq.n	8007ef4 <_vfiprintf_r+0x22c>
 8007e74:	4b29      	ldr	r3, [pc, #164]	; (8007f1c <_vfiprintf_r+0x254>)
 8007e76:	bb1b      	cbnz	r3, 8007ec0 <_vfiprintf_r+0x1f8>
 8007e78:	9b03      	ldr	r3, [sp, #12]
 8007e7a:	3307      	adds	r3, #7
 8007e7c:	f023 0307 	bic.w	r3, r3, #7
 8007e80:	3308      	adds	r3, #8
 8007e82:	9303      	str	r3, [sp, #12]
 8007e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e86:	443b      	add	r3, r7
 8007e88:	9309      	str	r3, [sp, #36]	; 0x24
 8007e8a:	e767      	b.n	8007d5c <_vfiprintf_r+0x94>
 8007e8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e90:	460c      	mov	r4, r1
 8007e92:	2001      	movs	r0, #1
 8007e94:	e7a5      	b.n	8007de2 <_vfiprintf_r+0x11a>
 8007e96:	2300      	movs	r3, #0
 8007e98:	3401      	adds	r4, #1
 8007e9a:	9305      	str	r3, [sp, #20]
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	f04f 0c0a 	mov.w	ip, #10
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ea8:	3a30      	subs	r2, #48	; 0x30
 8007eaa:	2a09      	cmp	r2, #9
 8007eac:	d903      	bls.n	8007eb6 <_vfiprintf_r+0x1ee>
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d0c5      	beq.n	8007e3e <_vfiprintf_r+0x176>
 8007eb2:	9105      	str	r1, [sp, #20]
 8007eb4:	e7c3      	b.n	8007e3e <_vfiprintf_r+0x176>
 8007eb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007eba:	4604      	mov	r4, r0
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e7f0      	b.n	8007ea2 <_vfiprintf_r+0x1da>
 8007ec0:	ab03      	add	r3, sp, #12
 8007ec2:	9300      	str	r3, [sp, #0]
 8007ec4:	462a      	mov	r2, r5
 8007ec6:	4b16      	ldr	r3, [pc, #88]	; (8007f20 <_vfiprintf_r+0x258>)
 8007ec8:	a904      	add	r1, sp, #16
 8007eca:	4630      	mov	r0, r6
 8007ecc:	f7fd fc14 	bl	80056f8 <_printf_float>
 8007ed0:	4607      	mov	r7, r0
 8007ed2:	1c78      	adds	r0, r7, #1
 8007ed4:	d1d6      	bne.n	8007e84 <_vfiprintf_r+0x1bc>
 8007ed6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ed8:	07d9      	lsls	r1, r3, #31
 8007eda:	d405      	bmi.n	8007ee8 <_vfiprintf_r+0x220>
 8007edc:	89ab      	ldrh	r3, [r5, #12]
 8007ede:	059a      	lsls	r2, r3, #22
 8007ee0:	d402      	bmi.n	8007ee8 <_vfiprintf_r+0x220>
 8007ee2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ee4:	f7ff f8d8 	bl	8007098 <__retarget_lock_release_recursive>
 8007ee8:	89ab      	ldrh	r3, [r5, #12]
 8007eea:	065b      	lsls	r3, r3, #25
 8007eec:	f53f af12 	bmi.w	8007d14 <_vfiprintf_r+0x4c>
 8007ef0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ef2:	e711      	b.n	8007d18 <_vfiprintf_r+0x50>
 8007ef4:	ab03      	add	r3, sp, #12
 8007ef6:	9300      	str	r3, [sp, #0]
 8007ef8:	462a      	mov	r2, r5
 8007efa:	4b09      	ldr	r3, [pc, #36]	; (8007f20 <_vfiprintf_r+0x258>)
 8007efc:	a904      	add	r1, sp, #16
 8007efe:	4630      	mov	r0, r6
 8007f00:	f7fd fe9e 	bl	8005c40 <_printf_i>
 8007f04:	e7e4      	b.n	8007ed0 <_vfiprintf_r+0x208>
 8007f06:	bf00      	nop
 8007f08:	08008de0 	.word	0x08008de0
 8007f0c:	08008e00 	.word	0x08008e00
 8007f10:	08008dc0 	.word	0x08008dc0
 8007f14:	08008fc2 	.word	0x08008fc2
 8007f18:	08008fcc 	.word	0x08008fcc
 8007f1c:	080056f9 	.word	0x080056f9
 8007f20:	08007ca3 	.word	0x08007ca3
 8007f24:	08008fc8 	.word	0x08008fc8

08007f28 <_read_r>:
 8007f28:	b538      	push	{r3, r4, r5, lr}
 8007f2a:	4d07      	ldr	r5, [pc, #28]	; (8007f48 <_read_r+0x20>)
 8007f2c:	4604      	mov	r4, r0
 8007f2e:	4608      	mov	r0, r1
 8007f30:	4611      	mov	r1, r2
 8007f32:	2200      	movs	r2, #0
 8007f34:	602a      	str	r2, [r5, #0]
 8007f36:	461a      	mov	r2, r3
 8007f38:	f7fa fd2a 	bl	8002990 <_read>
 8007f3c:	1c43      	adds	r3, r0, #1
 8007f3e:	d102      	bne.n	8007f46 <_read_r+0x1e>
 8007f40:	682b      	ldr	r3, [r5, #0]
 8007f42:	b103      	cbz	r3, 8007f46 <_read_r+0x1e>
 8007f44:	6023      	str	r3, [r4, #0]
 8007f46:	bd38      	pop	{r3, r4, r5, pc}
 8007f48:	20000434 	.word	0x20000434

08007f4c <__swbuf_r>:
 8007f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f4e:	460e      	mov	r6, r1
 8007f50:	4614      	mov	r4, r2
 8007f52:	4605      	mov	r5, r0
 8007f54:	b118      	cbz	r0, 8007f5e <__swbuf_r+0x12>
 8007f56:	6983      	ldr	r3, [r0, #24]
 8007f58:	b90b      	cbnz	r3, 8007f5e <__swbuf_r+0x12>
 8007f5a:	f7fe fff9 	bl	8006f50 <__sinit>
 8007f5e:	4b21      	ldr	r3, [pc, #132]	; (8007fe4 <__swbuf_r+0x98>)
 8007f60:	429c      	cmp	r4, r3
 8007f62:	d12b      	bne.n	8007fbc <__swbuf_r+0x70>
 8007f64:	686c      	ldr	r4, [r5, #4]
 8007f66:	69a3      	ldr	r3, [r4, #24]
 8007f68:	60a3      	str	r3, [r4, #8]
 8007f6a:	89a3      	ldrh	r3, [r4, #12]
 8007f6c:	071a      	lsls	r2, r3, #28
 8007f6e:	d52f      	bpl.n	8007fd0 <__swbuf_r+0x84>
 8007f70:	6923      	ldr	r3, [r4, #16]
 8007f72:	b36b      	cbz	r3, 8007fd0 <__swbuf_r+0x84>
 8007f74:	6923      	ldr	r3, [r4, #16]
 8007f76:	6820      	ldr	r0, [r4, #0]
 8007f78:	1ac0      	subs	r0, r0, r3
 8007f7a:	6963      	ldr	r3, [r4, #20]
 8007f7c:	b2f6      	uxtb	r6, r6
 8007f7e:	4283      	cmp	r3, r0
 8007f80:	4637      	mov	r7, r6
 8007f82:	dc04      	bgt.n	8007f8e <__swbuf_r+0x42>
 8007f84:	4621      	mov	r1, r4
 8007f86:	4628      	mov	r0, r5
 8007f88:	f7fe ff4e 	bl	8006e28 <_fflush_r>
 8007f8c:	bb30      	cbnz	r0, 8007fdc <__swbuf_r+0x90>
 8007f8e:	68a3      	ldr	r3, [r4, #8]
 8007f90:	3b01      	subs	r3, #1
 8007f92:	60a3      	str	r3, [r4, #8]
 8007f94:	6823      	ldr	r3, [r4, #0]
 8007f96:	1c5a      	adds	r2, r3, #1
 8007f98:	6022      	str	r2, [r4, #0]
 8007f9a:	701e      	strb	r6, [r3, #0]
 8007f9c:	6963      	ldr	r3, [r4, #20]
 8007f9e:	3001      	adds	r0, #1
 8007fa0:	4283      	cmp	r3, r0
 8007fa2:	d004      	beq.n	8007fae <__swbuf_r+0x62>
 8007fa4:	89a3      	ldrh	r3, [r4, #12]
 8007fa6:	07db      	lsls	r3, r3, #31
 8007fa8:	d506      	bpl.n	8007fb8 <__swbuf_r+0x6c>
 8007faa:	2e0a      	cmp	r6, #10
 8007fac:	d104      	bne.n	8007fb8 <__swbuf_r+0x6c>
 8007fae:	4621      	mov	r1, r4
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	f7fe ff39 	bl	8006e28 <_fflush_r>
 8007fb6:	b988      	cbnz	r0, 8007fdc <__swbuf_r+0x90>
 8007fb8:	4638      	mov	r0, r7
 8007fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fbc:	4b0a      	ldr	r3, [pc, #40]	; (8007fe8 <__swbuf_r+0x9c>)
 8007fbe:	429c      	cmp	r4, r3
 8007fc0:	d101      	bne.n	8007fc6 <__swbuf_r+0x7a>
 8007fc2:	68ac      	ldr	r4, [r5, #8]
 8007fc4:	e7cf      	b.n	8007f66 <__swbuf_r+0x1a>
 8007fc6:	4b09      	ldr	r3, [pc, #36]	; (8007fec <__swbuf_r+0xa0>)
 8007fc8:	429c      	cmp	r4, r3
 8007fca:	bf08      	it	eq
 8007fcc:	68ec      	ldreq	r4, [r5, #12]
 8007fce:	e7ca      	b.n	8007f66 <__swbuf_r+0x1a>
 8007fd0:	4621      	mov	r1, r4
 8007fd2:	4628      	mov	r0, r5
 8007fd4:	f000 f81a 	bl	800800c <__swsetup_r>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	d0cb      	beq.n	8007f74 <__swbuf_r+0x28>
 8007fdc:	f04f 37ff 	mov.w	r7, #4294967295
 8007fe0:	e7ea      	b.n	8007fb8 <__swbuf_r+0x6c>
 8007fe2:	bf00      	nop
 8007fe4:	08008de0 	.word	0x08008de0
 8007fe8:	08008e00 	.word	0x08008e00
 8007fec:	08008dc0 	.word	0x08008dc0

08007ff0 <__ascii_wctomb>:
 8007ff0:	b149      	cbz	r1, 8008006 <__ascii_wctomb+0x16>
 8007ff2:	2aff      	cmp	r2, #255	; 0xff
 8007ff4:	bf85      	ittet	hi
 8007ff6:	238a      	movhi	r3, #138	; 0x8a
 8007ff8:	6003      	strhi	r3, [r0, #0]
 8007ffa:	700a      	strbls	r2, [r1, #0]
 8007ffc:	f04f 30ff 	movhi.w	r0, #4294967295
 8008000:	bf98      	it	ls
 8008002:	2001      	movls	r0, #1
 8008004:	4770      	bx	lr
 8008006:	4608      	mov	r0, r1
 8008008:	4770      	bx	lr
	...

0800800c <__swsetup_r>:
 800800c:	4b32      	ldr	r3, [pc, #200]	; (80080d8 <__swsetup_r+0xcc>)
 800800e:	b570      	push	{r4, r5, r6, lr}
 8008010:	681d      	ldr	r5, [r3, #0]
 8008012:	4606      	mov	r6, r0
 8008014:	460c      	mov	r4, r1
 8008016:	b125      	cbz	r5, 8008022 <__swsetup_r+0x16>
 8008018:	69ab      	ldr	r3, [r5, #24]
 800801a:	b913      	cbnz	r3, 8008022 <__swsetup_r+0x16>
 800801c:	4628      	mov	r0, r5
 800801e:	f7fe ff97 	bl	8006f50 <__sinit>
 8008022:	4b2e      	ldr	r3, [pc, #184]	; (80080dc <__swsetup_r+0xd0>)
 8008024:	429c      	cmp	r4, r3
 8008026:	d10f      	bne.n	8008048 <__swsetup_r+0x3c>
 8008028:	686c      	ldr	r4, [r5, #4]
 800802a:	89a3      	ldrh	r3, [r4, #12]
 800802c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008030:	0719      	lsls	r1, r3, #28
 8008032:	d42c      	bmi.n	800808e <__swsetup_r+0x82>
 8008034:	06dd      	lsls	r5, r3, #27
 8008036:	d411      	bmi.n	800805c <__swsetup_r+0x50>
 8008038:	2309      	movs	r3, #9
 800803a:	6033      	str	r3, [r6, #0]
 800803c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008040:	81a3      	strh	r3, [r4, #12]
 8008042:	f04f 30ff 	mov.w	r0, #4294967295
 8008046:	e03e      	b.n	80080c6 <__swsetup_r+0xba>
 8008048:	4b25      	ldr	r3, [pc, #148]	; (80080e0 <__swsetup_r+0xd4>)
 800804a:	429c      	cmp	r4, r3
 800804c:	d101      	bne.n	8008052 <__swsetup_r+0x46>
 800804e:	68ac      	ldr	r4, [r5, #8]
 8008050:	e7eb      	b.n	800802a <__swsetup_r+0x1e>
 8008052:	4b24      	ldr	r3, [pc, #144]	; (80080e4 <__swsetup_r+0xd8>)
 8008054:	429c      	cmp	r4, r3
 8008056:	bf08      	it	eq
 8008058:	68ec      	ldreq	r4, [r5, #12]
 800805a:	e7e6      	b.n	800802a <__swsetup_r+0x1e>
 800805c:	0758      	lsls	r0, r3, #29
 800805e:	d512      	bpl.n	8008086 <__swsetup_r+0x7a>
 8008060:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008062:	b141      	cbz	r1, 8008076 <__swsetup_r+0x6a>
 8008064:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008068:	4299      	cmp	r1, r3
 800806a:	d002      	beq.n	8008072 <__swsetup_r+0x66>
 800806c:	4630      	mov	r0, r6
 800806e:	f7ff fc29 	bl	80078c4 <_free_r>
 8008072:	2300      	movs	r3, #0
 8008074:	6363      	str	r3, [r4, #52]	; 0x34
 8008076:	89a3      	ldrh	r3, [r4, #12]
 8008078:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800807c:	81a3      	strh	r3, [r4, #12]
 800807e:	2300      	movs	r3, #0
 8008080:	6063      	str	r3, [r4, #4]
 8008082:	6923      	ldr	r3, [r4, #16]
 8008084:	6023      	str	r3, [r4, #0]
 8008086:	89a3      	ldrh	r3, [r4, #12]
 8008088:	f043 0308 	orr.w	r3, r3, #8
 800808c:	81a3      	strh	r3, [r4, #12]
 800808e:	6923      	ldr	r3, [r4, #16]
 8008090:	b94b      	cbnz	r3, 80080a6 <__swsetup_r+0x9a>
 8008092:	89a3      	ldrh	r3, [r4, #12]
 8008094:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800809c:	d003      	beq.n	80080a6 <__swsetup_r+0x9a>
 800809e:	4621      	mov	r1, r4
 80080a0:	4630      	mov	r0, r6
 80080a2:	f7ff f81f 	bl	80070e4 <__smakebuf_r>
 80080a6:	89a0      	ldrh	r0, [r4, #12]
 80080a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080ac:	f010 0301 	ands.w	r3, r0, #1
 80080b0:	d00a      	beq.n	80080c8 <__swsetup_r+0xbc>
 80080b2:	2300      	movs	r3, #0
 80080b4:	60a3      	str	r3, [r4, #8]
 80080b6:	6963      	ldr	r3, [r4, #20]
 80080b8:	425b      	negs	r3, r3
 80080ba:	61a3      	str	r3, [r4, #24]
 80080bc:	6923      	ldr	r3, [r4, #16]
 80080be:	b943      	cbnz	r3, 80080d2 <__swsetup_r+0xc6>
 80080c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80080c4:	d1ba      	bne.n	800803c <__swsetup_r+0x30>
 80080c6:	bd70      	pop	{r4, r5, r6, pc}
 80080c8:	0781      	lsls	r1, r0, #30
 80080ca:	bf58      	it	pl
 80080cc:	6963      	ldrpl	r3, [r4, #20]
 80080ce:	60a3      	str	r3, [r4, #8]
 80080d0:	e7f4      	b.n	80080bc <__swsetup_r+0xb0>
 80080d2:	2000      	movs	r0, #0
 80080d4:	e7f7      	b.n	80080c6 <__swsetup_r+0xba>
 80080d6:	bf00      	nop
 80080d8:	2000003c 	.word	0x2000003c
 80080dc:	08008de0 	.word	0x08008de0
 80080e0:	08008e00 	.word	0x08008e00
 80080e4:	08008dc0 	.word	0x08008dc0

080080e8 <abort>:
 80080e8:	b508      	push	{r3, lr}
 80080ea:	2006      	movs	r0, #6
 80080ec:	f000 f82c 	bl	8008148 <raise>
 80080f0:	2001      	movs	r0, #1
 80080f2:	f7fa fc43 	bl	800297c <_exit>

080080f6 <_raise_r>:
 80080f6:	291f      	cmp	r1, #31
 80080f8:	b538      	push	{r3, r4, r5, lr}
 80080fa:	4604      	mov	r4, r0
 80080fc:	460d      	mov	r5, r1
 80080fe:	d904      	bls.n	800810a <_raise_r+0x14>
 8008100:	2316      	movs	r3, #22
 8008102:	6003      	str	r3, [r0, #0]
 8008104:	f04f 30ff 	mov.w	r0, #4294967295
 8008108:	bd38      	pop	{r3, r4, r5, pc}
 800810a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800810c:	b112      	cbz	r2, 8008114 <_raise_r+0x1e>
 800810e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008112:	b94b      	cbnz	r3, 8008128 <_raise_r+0x32>
 8008114:	4620      	mov	r0, r4
 8008116:	f000 f831 	bl	800817c <_getpid_r>
 800811a:	462a      	mov	r2, r5
 800811c:	4601      	mov	r1, r0
 800811e:	4620      	mov	r0, r4
 8008120:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008124:	f000 b818 	b.w	8008158 <_kill_r>
 8008128:	2b01      	cmp	r3, #1
 800812a:	d00a      	beq.n	8008142 <_raise_r+0x4c>
 800812c:	1c59      	adds	r1, r3, #1
 800812e:	d103      	bne.n	8008138 <_raise_r+0x42>
 8008130:	2316      	movs	r3, #22
 8008132:	6003      	str	r3, [r0, #0]
 8008134:	2001      	movs	r0, #1
 8008136:	e7e7      	b.n	8008108 <_raise_r+0x12>
 8008138:	2400      	movs	r4, #0
 800813a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800813e:	4628      	mov	r0, r5
 8008140:	4798      	blx	r3
 8008142:	2000      	movs	r0, #0
 8008144:	e7e0      	b.n	8008108 <_raise_r+0x12>
	...

08008148 <raise>:
 8008148:	4b02      	ldr	r3, [pc, #8]	; (8008154 <raise+0xc>)
 800814a:	4601      	mov	r1, r0
 800814c:	6818      	ldr	r0, [r3, #0]
 800814e:	f7ff bfd2 	b.w	80080f6 <_raise_r>
 8008152:	bf00      	nop
 8008154:	2000003c 	.word	0x2000003c

08008158 <_kill_r>:
 8008158:	b538      	push	{r3, r4, r5, lr}
 800815a:	4d07      	ldr	r5, [pc, #28]	; (8008178 <_kill_r+0x20>)
 800815c:	2300      	movs	r3, #0
 800815e:	4604      	mov	r4, r0
 8008160:	4608      	mov	r0, r1
 8008162:	4611      	mov	r1, r2
 8008164:	602b      	str	r3, [r5, #0]
 8008166:	f7fa fbf9 	bl	800295c <_kill>
 800816a:	1c43      	adds	r3, r0, #1
 800816c:	d102      	bne.n	8008174 <_kill_r+0x1c>
 800816e:	682b      	ldr	r3, [r5, #0]
 8008170:	b103      	cbz	r3, 8008174 <_kill_r+0x1c>
 8008172:	6023      	str	r3, [r4, #0]
 8008174:	bd38      	pop	{r3, r4, r5, pc}
 8008176:	bf00      	nop
 8008178:	20000434 	.word	0x20000434

0800817c <_getpid_r>:
 800817c:	f7fa bbe6 	b.w	800294c <_getpid>

08008180 <cosf>:
 8008180:	ee10 3a10 	vmov	r3, s0
 8008184:	b507      	push	{r0, r1, r2, lr}
 8008186:	4a1e      	ldr	r2, [pc, #120]	; (8008200 <cosf+0x80>)
 8008188:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800818c:	4293      	cmp	r3, r2
 800818e:	dc06      	bgt.n	800819e <cosf+0x1e>
 8008190:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8008204 <cosf+0x84>
 8008194:	b003      	add	sp, #12
 8008196:	f85d eb04 	ldr.w	lr, [sp], #4
 800819a:	f000 b9b7 	b.w	800850c <__kernel_cosf>
 800819e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80081a2:	db04      	blt.n	80081ae <cosf+0x2e>
 80081a4:	ee30 0a40 	vsub.f32	s0, s0, s0
 80081a8:	b003      	add	sp, #12
 80081aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80081ae:	4668      	mov	r0, sp
 80081b0:	f000 f870 	bl	8008294 <__ieee754_rem_pio2f>
 80081b4:	f000 0003 	and.w	r0, r0, #3
 80081b8:	2801      	cmp	r0, #1
 80081ba:	d009      	beq.n	80081d0 <cosf+0x50>
 80081bc:	2802      	cmp	r0, #2
 80081be:	d010      	beq.n	80081e2 <cosf+0x62>
 80081c0:	b9b0      	cbnz	r0, 80081f0 <cosf+0x70>
 80081c2:	eddd 0a01 	vldr	s1, [sp, #4]
 80081c6:	ed9d 0a00 	vldr	s0, [sp]
 80081ca:	f000 f99f 	bl	800850c <__kernel_cosf>
 80081ce:	e7eb      	b.n	80081a8 <cosf+0x28>
 80081d0:	eddd 0a01 	vldr	s1, [sp, #4]
 80081d4:	ed9d 0a00 	vldr	s0, [sp]
 80081d8:	f000 fc6e 	bl	8008ab8 <__kernel_sinf>
 80081dc:	eeb1 0a40 	vneg.f32	s0, s0
 80081e0:	e7e2      	b.n	80081a8 <cosf+0x28>
 80081e2:	eddd 0a01 	vldr	s1, [sp, #4]
 80081e6:	ed9d 0a00 	vldr	s0, [sp]
 80081ea:	f000 f98f 	bl	800850c <__kernel_cosf>
 80081ee:	e7f5      	b.n	80081dc <cosf+0x5c>
 80081f0:	eddd 0a01 	vldr	s1, [sp, #4]
 80081f4:	ed9d 0a00 	vldr	s0, [sp]
 80081f8:	2001      	movs	r0, #1
 80081fa:	f000 fc5d 	bl	8008ab8 <__kernel_sinf>
 80081fe:	e7d3      	b.n	80081a8 <cosf+0x28>
 8008200:	3f490fd8 	.word	0x3f490fd8
 8008204:	00000000 	.word	0x00000000

08008208 <sinf>:
 8008208:	ee10 3a10 	vmov	r3, s0
 800820c:	b507      	push	{r0, r1, r2, lr}
 800820e:	4a1f      	ldr	r2, [pc, #124]	; (800828c <sinf+0x84>)
 8008210:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008214:	4293      	cmp	r3, r2
 8008216:	dc07      	bgt.n	8008228 <sinf+0x20>
 8008218:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8008290 <sinf+0x88>
 800821c:	2000      	movs	r0, #0
 800821e:	b003      	add	sp, #12
 8008220:	f85d eb04 	ldr.w	lr, [sp], #4
 8008224:	f000 bc48 	b.w	8008ab8 <__kernel_sinf>
 8008228:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800822c:	db04      	blt.n	8008238 <sinf+0x30>
 800822e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8008232:	b003      	add	sp, #12
 8008234:	f85d fb04 	ldr.w	pc, [sp], #4
 8008238:	4668      	mov	r0, sp
 800823a:	f000 f82b 	bl	8008294 <__ieee754_rem_pio2f>
 800823e:	f000 0003 	and.w	r0, r0, #3
 8008242:	2801      	cmp	r0, #1
 8008244:	d00a      	beq.n	800825c <sinf+0x54>
 8008246:	2802      	cmp	r0, #2
 8008248:	d00f      	beq.n	800826a <sinf+0x62>
 800824a:	b9c0      	cbnz	r0, 800827e <sinf+0x76>
 800824c:	eddd 0a01 	vldr	s1, [sp, #4]
 8008250:	ed9d 0a00 	vldr	s0, [sp]
 8008254:	2001      	movs	r0, #1
 8008256:	f000 fc2f 	bl	8008ab8 <__kernel_sinf>
 800825a:	e7ea      	b.n	8008232 <sinf+0x2a>
 800825c:	eddd 0a01 	vldr	s1, [sp, #4]
 8008260:	ed9d 0a00 	vldr	s0, [sp]
 8008264:	f000 f952 	bl	800850c <__kernel_cosf>
 8008268:	e7e3      	b.n	8008232 <sinf+0x2a>
 800826a:	eddd 0a01 	vldr	s1, [sp, #4]
 800826e:	ed9d 0a00 	vldr	s0, [sp]
 8008272:	2001      	movs	r0, #1
 8008274:	f000 fc20 	bl	8008ab8 <__kernel_sinf>
 8008278:	eeb1 0a40 	vneg.f32	s0, s0
 800827c:	e7d9      	b.n	8008232 <sinf+0x2a>
 800827e:	eddd 0a01 	vldr	s1, [sp, #4]
 8008282:	ed9d 0a00 	vldr	s0, [sp]
 8008286:	f000 f941 	bl	800850c <__kernel_cosf>
 800828a:	e7f5      	b.n	8008278 <sinf+0x70>
 800828c:	3f490fd8 	.word	0x3f490fd8
 8008290:	00000000 	.word	0x00000000

08008294 <__ieee754_rem_pio2f>:
 8008294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008296:	ee10 6a10 	vmov	r6, s0
 800829a:	4b8e      	ldr	r3, [pc, #568]	; (80084d4 <__ieee754_rem_pio2f+0x240>)
 800829c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80082a0:	429d      	cmp	r5, r3
 80082a2:	b087      	sub	sp, #28
 80082a4:	eef0 7a40 	vmov.f32	s15, s0
 80082a8:	4604      	mov	r4, r0
 80082aa:	dc05      	bgt.n	80082b8 <__ieee754_rem_pio2f+0x24>
 80082ac:	2300      	movs	r3, #0
 80082ae:	ed80 0a00 	vstr	s0, [r0]
 80082b2:	6043      	str	r3, [r0, #4]
 80082b4:	2000      	movs	r0, #0
 80082b6:	e01a      	b.n	80082ee <__ieee754_rem_pio2f+0x5a>
 80082b8:	4b87      	ldr	r3, [pc, #540]	; (80084d8 <__ieee754_rem_pio2f+0x244>)
 80082ba:	429d      	cmp	r5, r3
 80082bc:	dc46      	bgt.n	800834c <__ieee754_rem_pio2f+0xb8>
 80082be:	2e00      	cmp	r6, #0
 80082c0:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80084dc <__ieee754_rem_pio2f+0x248>
 80082c4:	4b86      	ldr	r3, [pc, #536]	; (80084e0 <__ieee754_rem_pio2f+0x24c>)
 80082c6:	f025 050f 	bic.w	r5, r5, #15
 80082ca:	dd1f      	ble.n	800830c <__ieee754_rem_pio2f+0x78>
 80082cc:	429d      	cmp	r5, r3
 80082ce:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80082d2:	d00e      	beq.n	80082f2 <__ieee754_rem_pio2f+0x5e>
 80082d4:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80084e4 <__ieee754_rem_pio2f+0x250>
 80082d8:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80082dc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80082e0:	ed80 0a00 	vstr	s0, [r0]
 80082e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80082e8:	2001      	movs	r0, #1
 80082ea:	edc4 7a01 	vstr	s15, [r4, #4]
 80082ee:	b007      	add	sp, #28
 80082f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082f2:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80084e8 <__ieee754_rem_pio2f+0x254>
 80082f6:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80084ec <__ieee754_rem_pio2f+0x258>
 80082fa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80082fe:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8008302:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008306:	edc0 6a00 	vstr	s13, [r0]
 800830a:	e7eb      	b.n	80082e4 <__ieee754_rem_pio2f+0x50>
 800830c:	429d      	cmp	r5, r3
 800830e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008312:	d00e      	beq.n	8008332 <__ieee754_rem_pio2f+0x9e>
 8008314:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80084e4 <__ieee754_rem_pio2f+0x250>
 8008318:	ee37 0a87 	vadd.f32	s0, s15, s14
 800831c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008320:	ed80 0a00 	vstr	s0, [r0]
 8008324:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008328:	f04f 30ff 	mov.w	r0, #4294967295
 800832c:	edc4 7a01 	vstr	s15, [r4, #4]
 8008330:	e7dd      	b.n	80082ee <__ieee754_rem_pio2f+0x5a>
 8008332:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80084e8 <__ieee754_rem_pio2f+0x254>
 8008336:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80084ec <__ieee754_rem_pio2f+0x258>
 800833a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800833e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8008342:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008346:	edc0 6a00 	vstr	s13, [r0]
 800834a:	e7eb      	b.n	8008324 <__ieee754_rem_pio2f+0x90>
 800834c:	4b68      	ldr	r3, [pc, #416]	; (80084f0 <__ieee754_rem_pio2f+0x25c>)
 800834e:	429d      	cmp	r5, r3
 8008350:	dc72      	bgt.n	8008438 <__ieee754_rem_pio2f+0x1a4>
 8008352:	f000 fbf9 	bl	8008b48 <fabsf>
 8008356:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80084f4 <__ieee754_rem_pio2f+0x260>
 800835a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800835e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008362:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008366:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800836a:	ee17 0a90 	vmov	r0, s15
 800836e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80084dc <__ieee754_rem_pio2f+0x248>
 8008372:	eea7 0a67 	vfms.f32	s0, s14, s15
 8008376:	281f      	cmp	r0, #31
 8008378:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80084e4 <__ieee754_rem_pio2f+0x250>
 800837c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008380:	eeb1 6a47 	vneg.f32	s12, s14
 8008384:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008388:	ee16 2a90 	vmov	r2, s13
 800838c:	dc1c      	bgt.n	80083c8 <__ieee754_rem_pio2f+0x134>
 800838e:	495a      	ldr	r1, [pc, #360]	; (80084f8 <__ieee754_rem_pio2f+0x264>)
 8008390:	1e47      	subs	r7, r0, #1
 8008392:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8008396:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800839a:	428b      	cmp	r3, r1
 800839c:	d014      	beq.n	80083c8 <__ieee754_rem_pio2f+0x134>
 800839e:	6022      	str	r2, [r4, #0]
 80083a0:	ed94 7a00 	vldr	s14, [r4]
 80083a4:	ee30 0a47 	vsub.f32	s0, s0, s14
 80083a8:	2e00      	cmp	r6, #0
 80083aa:	ee30 0a67 	vsub.f32	s0, s0, s15
 80083ae:	ed84 0a01 	vstr	s0, [r4, #4]
 80083b2:	da9c      	bge.n	80082ee <__ieee754_rem_pio2f+0x5a>
 80083b4:	eeb1 7a47 	vneg.f32	s14, s14
 80083b8:	eeb1 0a40 	vneg.f32	s0, s0
 80083bc:	ed84 7a00 	vstr	s14, [r4]
 80083c0:	ed84 0a01 	vstr	s0, [r4, #4]
 80083c4:	4240      	negs	r0, r0
 80083c6:	e792      	b.n	80082ee <__ieee754_rem_pio2f+0x5a>
 80083c8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80083cc:	15eb      	asrs	r3, r5, #23
 80083ce:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80083d2:	2d08      	cmp	r5, #8
 80083d4:	dde3      	ble.n	800839e <__ieee754_rem_pio2f+0x10a>
 80083d6:	eddf 7a44 	vldr	s15, [pc, #272]	; 80084e8 <__ieee754_rem_pio2f+0x254>
 80083da:	eddf 5a44 	vldr	s11, [pc, #272]	; 80084ec <__ieee754_rem_pio2f+0x258>
 80083de:	eef0 6a40 	vmov.f32	s13, s0
 80083e2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80083e6:	ee30 0a66 	vsub.f32	s0, s0, s13
 80083ea:	eea6 0a27 	vfma.f32	s0, s12, s15
 80083ee:	eef0 7a40 	vmov.f32	s15, s0
 80083f2:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80083f6:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80083fa:	ee15 2a90 	vmov	r2, s11
 80083fe:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8008402:	1a5b      	subs	r3, r3, r1
 8008404:	2b19      	cmp	r3, #25
 8008406:	dc04      	bgt.n	8008412 <__ieee754_rem_pio2f+0x17e>
 8008408:	edc4 5a00 	vstr	s11, [r4]
 800840c:	eeb0 0a66 	vmov.f32	s0, s13
 8008410:	e7c6      	b.n	80083a0 <__ieee754_rem_pio2f+0x10c>
 8008412:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80084fc <__ieee754_rem_pio2f+0x268>
 8008416:	eeb0 0a66 	vmov.f32	s0, s13
 800841a:	eea6 0a25 	vfma.f32	s0, s12, s11
 800841e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8008422:	eddf 6a37 	vldr	s13, [pc, #220]	; 8008500 <__ieee754_rem_pio2f+0x26c>
 8008426:	eee6 7a25 	vfma.f32	s15, s12, s11
 800842a:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800842e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008432:	ed84 7a00 	vstr	s14, [r4]
 8008436:	e7b3      	b.n	80083a0 <__ieee754_rem_pio2f+0x10c>
 8008438:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800843c:	db06      	blt.n	800844c <__ieee754_rem_pio2f+0x1b8>
 800843e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008442:	edc0 7a01 	vstr	s15, [r0, #4]
 8008446:	edc0 7a00 	vstr	s15, [r0]
 800844a:	e733      	b.n	80082b4 <__ieee754_rem_pio2f+0x20>
 800844c:	15ea      	asrs	r2, r5, #23
 800844e:	3a86      	subs	r2, #134	; 0x86
 8008450:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8008454:	ee07 3a90 	vmov	s15, r3
 8008458:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800845c:	eddf 6a29 	vldr	s13, [pc, #164]	; 8008504 <__ieee754_rem_pio2f+0x270>
 8008460:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008464:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008468:	ed8d 7a03 	vstr	s14, [sp, #12]
 800846c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008470:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008474:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008478:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800847c:	ed8d 7a04 	vstr	s14, [sp, #16]
 8008480:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008484:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800848c:	edcd 7a05 	vstr	s15, [sp, #20]
 8008490:	d11e      	bne.n	80084d0 <__ieee754_rem_pio2f+0x23c>
 8008492:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8008496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800849a:	bf14      	ite	ne
 800849c:	2302      	movne	r3, #2
 800849e:	2301      	moveq	r3, #1
 80084a0:	4919      	ldr	r1, [pc, #100]	; (8008508 <__ieee754_rem_pio2f+0x274>)
 80084a2:	9101      	str	r1, [sp, #4]
 80084a4:	2102      	movs	r1, #2
 80084a6:	9100      	str	r1, [sp, #0]
 80084a8:	a803      	add	r0, sp, #12
 80084aa:	4621      	mov	r1, r4
 80084ac:	f000 f88e 	bl	80085cc <__kernel_rem_pio2f>
 80084b0:	2e00      	cmp	r6, #0
 80084b2:	f6bf af1c 	bge.w	80082ee <__ieee754_rem_pio2f+0x5a>
 80084b6:	edd4 7a00 	vldr	s15, [r4]
 80084ba:	eef1 7a67 	vneg.f32	s15, s15
 80084be:	edc4 7a00 	vstr	s15, [r4]
 80084c2:	edd4 7a01 	vldr	s15, [r4, #4]
 80084c6:	eef1 7a67 	vneg.f32	s15, s15
 80084ca:	edc4 7a01 	vstr	s15, [r4, #4]
 80084ce:	e779      	b.n	80083c4 <__ieee754_rem_pio2f+0x130>
 80084d0:	2303      	movs	r3, #3
 80084d2:	e7e5      	b.n	80084a0 <__ieee754_rem_pio2f+0x20c>
 80084d4:	3f490fd8 	.word	0x3f490fd8
 80084d8:	4016cbe3 	.word	0x4016cbe3
 80084dc:	3fc90f80 	.word	0x3fc90f80
 80084e0:	3fc90fd0 	.word	0x3fc90fd0
 80084e4:	37354443 	.word	0x37354443
 80084e8:	37354400 	.word	0x37354400
 80084ec:	2e85a308 	.word	0x2e85a308
 80084f0:	43490f80 	.word	0x43490f80
 80084f4:	3f22f984 	.word	0x3f22f984
 80084f8:	080090d4 	.word	0x080090d4
 80084fc:	2e85a300 	.word	0x2e85a300
 8008500:	248d3132 	.word	0x248d3132
 8008504:	43800000 	.word	0x43800000
 8008508:	08009154 	.word	0x08009154

0800850c <__kernel_cosf>:
 800850c:	ee10 3a10 	vmov	r3, s0
 8008510:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008514:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008518:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800851c:	da05      	bge.n	800852a <__kernel_cosf+0x1e>
 800851e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008522:	ee17 2a90 	vmov	r2, s15
 8008526:	2a00      	cmp	r2, #0
 8008528:	d03d      	beq.n	80085a6 <__kernel_cosf+0x9a>
 800852a:	ee60 5a00 	vmul.f32	s11, s0, s0
 800852e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80085ac <__kernel_cosf+0xa0>
 8008532:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80085b0 <__kernel_cosf+0xa4>
 8008536:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80085b4 <__kernel_cosf+0xa8>
 800853a:	4a1f      	ldr	r2, [pc, #124]	; (80085b8 <__kernel_cosf+0xac>)
 800853c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8008540:	4293      	cmp	r3, r2
 8008542:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80085bc <__kernel_cosf+0xb0>
 8008546:	eee7 7a25 	vfma.f32	s15, s14, s11
 800854a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80085c0 <__kernel_cosf+0xb4>
 800854e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8008552:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80085c4 <__kernel_cosf+0xb8>
 8008556:	eee7 7a25 	vfma.f32	s15, s14, s11
 800855a:	eeb0 7a66 	vmov.f32	s14, s13
 800855e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8008562:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8008566:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800856a:	ee67 6a25 	vmul.f32	s13, s14, s11
 800856e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8008572:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008576:	dc04      	bgt.n	8008582 <__kernel_cosf+0x76>
 8008578:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800857c:	ee36 0a47 	vsub.f32	s0, s12, s14
 8008580:	4770      	bx	lr
 8008582:	4a11      	ldr	r2, [pc, #68]	; (80085c8 <__kernel_cosf+0xbc>)
 8008584:	4293      	cmp	r3, r2
 8008586:	bfda      	itte	le
 8008588:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800858c:	ee06 3a90 	vmovle	s13, r3
 8008590:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8008594:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008598:	ee36 0a66 	vsub.f32	s0, s12, s13
 800859c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80085a0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80085a4:	4770      	bx	lr
 80085a6:	eeb0 0a46 	vmov.f32	s0, s12
 80085aa:	4770      	bx	lr
 80085ac:	ad47d74e 	.word	0xad47d74e
 80085b0:	310f74f6 	.word	0x310f74f6
 80085b4:	3d2aaaab 	.word	0x3d2aaaab
 80085b8:	3e999999 	.word	0x3e999999
 80085bc:	b493f27c 	.word	0xb493f27c
 80085c0:	37d00d01 	.word	0x37d00d01
 80085c4:	bab60b61 	.word	0xbab60b61
 80085c8:	3f480000 	.word	0x3f480000

080085cc <__kernel_rem_pio2f>:
 80085cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085d0:	ed2d 8b04 	vpush	{d8-d9}
 80085d4:	b0d9      	sub	sp, #356	; 0x164
 80085d6:	4688      	mov	r8, r1
 80085d8:	9002      	str	r0, [sp, #8]
 80085da:	49bb      	ldr	r1, [pc, #748]	; (80088c8 <__kernel_rem_pio2f+0x2fc>)
 80085dc:	9866      	ldr	r0, [sp, #408]	; 0x198
 80085de:	9301      	str	r3, [sp, #4]
 80085e0:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 80085e4:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 80085e8:	1e59      	subs	r1, r3, #1
 80085ea:	1d13      	adds	r3, r2, #4
 80085ec:	db27      	blt.n	800863e <__kernel_rem_pio2f+0x72>
 80085ee:	f1b2 0b03 	subs.w	fp, r2, #3
 80085f2:	bf48      	it	mi
 80085f4:	f102 0b04 	addmi.w	fp, r2, #4
 80085f8:	ea4f 00eb 	mov.w	r0, fp, asr #3
 80085fc:	1c45      	adds	r5, r0, #1
 80085fe:	00ec      	lsls	r4, r5, #3
 8008600:	1a47      	subs	r7, r0, r1
 8008602:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80088d8 <__kernel_rem_pio2f+0x30c>
 8008606:	9403      	str	r4, [sp, #12]
 8008608:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800860c:	eb0a 0c01 	add.w	ip, sl, r1
 8008610:	ae1c      	add	r6, sp, #112	; 0x70
 8008612:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8008616:	2400      	movs	r4, #0
 8008618:	4564      	cmp	r4, ip
 800861a:	dd12      	ble.n	8008642 <__kernel_rem_pio2f+0x76>
 800861c:	9b01      	ldr	r3, [sp, #4]
 800861e:	ac1c      	add	r4, sp, #112	; 0x70
 8008620:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8008624:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8008628:	f04f 0c00 	mov.w	ip, #0
 800862c:	45d4      	cmp	ip, sl
 800862e:	dc27      	bgt.n	8008680 <__kernel_rem_pio2f+0xb4>
 8008630:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8008634:	eddf 7aa8 	vldr	s15, [pc, #672]	; 80088d8 <__kernel_rem_pio2f+0x30c>
 8008638:	4627      	mov	r7, r4
 800863a:	2600      	movs	r6, #0
 800863c:	e016      	b.n	800866c <__kernel_rem_pio2f+0xa0>
 800863e:	2000      	movs	r0, #0
 8008640:	e7dc      	b.n	80085fc <__kernel_rem_pio2f+0x30>
 8008642:	42e7      	cmn	r7, r4
 8008644:	bf5d      	ittte	pl
 8008646:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800864a:	ee07 3a90 	vmovpl	s15, r3
 800864e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8008652:	eef0 7a47 	vmovmi.f32	s15, s14
 8008656:	ece6 7a01 	vstmia	r6!, {s15}
 800865a:	3401      	adds	r4, #1
 800865c:	e7dc      	b.n	8008618 <__kernel_rem_pio2f+0x4c>
 800865e:	ecf9 6a01 	vldmia	r9!, {s13}
 8008662:	ed97 7a00 	vldr	s14, [r7]
 8008666:	eee6 7a87 	vfma.f32	s15, s13, s14
 800866a:	3601      	adds	r6, #1
 800866c:	428e      	cmp	r6, r1
 800866e:	f1a7 0704 	sub.w	r7, r7, #4
 8008672:	ddf4      	ble.n	800865e <__kernel_rem_pio2f+0x92>
 8008674:	eceb 7a01 	vstmia	fp!, {s15}
 8008678:	f10c 0c01 	add.w	ip, ip, #1
 800867c:	3404      	adds	r4, #4
 800867e:	e7d5      	b.n	800862c <__kernel_rem_pio2f+0x60>
 8008680:	ab08      	add	r3, sp, #32
 8008682:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8008686:	eddf 8a93 	vldr	s17, [pc, #588]	; 80088d4 <__kernel_rem_pio2f+0x308>
 800868a:	ed9f 9a91 	vldr	s18, [pc, #580]	; 80088d0 <__kernel_rem_pio2f+0x304>
 800868e:	9304      	str	r3, [sp, #16]
 8008690:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8008694:	4656      	mov	r6, sl
 8008696:	00b3      	lsls	r3, r6, #2
 8008698:	9305      	str	r3, [sp, #20]
 800869a:	ab58      	add	r3, sp, #352	; 0x160
 800869c:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80086a0:	ac08      	add	r4, sp, #32
 80086a2:	ab44      	add	r3, sp, #272	; 0x110
 80086a4:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80086a8:	46a4      	mov	ip, r4
 80086aa:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80086ae:	4637      	mov	r7, r6
 80086b0:	2f00      	cmp	r7, #0
 80086b2:	f1a0 0004 	sub.w	r0, r0, #4
 80086b6:	dc4f      	bgt.n	8008758 <__kernel_rem_pio2f+0x18c>
 80086b8:	4628      	mov	r0, r5
 80086ba:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80086be:	f000 fa8d 	bl	8008bdc <scalbnf>
 80086c2:	eeb0 8a40 	vmov.f32	s16, s0
 80086c6:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80086ca:	ee28 0a00 	vmul.f32	s0, s16, s0
 80086ce:	f000 fa43 	bl	8008b58 <floorf>
 80086d2:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80086d6:	eea0 8a67 	vfms.f32	s16, s0, s15
 80086da:	2d00      	cmp	r5, #0
 80086dc:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80086e0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80086e4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80086e8:	ee17 9a90 	vmov	r9, s15
 80086ec:	ee38 8a40 	vsub.f32	s16, s16, s0
 80086f0:	dd44      	ble.n	800877c <__kernel_rem_pio2f+0x1b0>
 80086f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80086f6:	ab08      	add	r3, sp, #32
 80086f8:	f1c5 0e08 	rsb	lr, r5, #8
 80086fc:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8008700:	fa47 f00e 	asr.w	r0, r7, lr
 8008704:	4481      	add	r9, r0
 8008706:	fa00 f00e 	lsl.w	r0, r0, lr
 800870a:	1a3f      	subs	r7, r7, r0
 800870c:	f1c5 0007 	rsb	r0, r5, #7
 8008710:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8008714:	4107      	asrs	r7, r0
 8008716:	2f00      	cmp	r7, #0
 8008718:	dd3f      	ble.n	800879a <__kernel_rem_pio2f+0x1ce>
 800871a:	f04f 0e00 	mov.w	lr, #0
 800871e:	f109 0901 	add.w	r9, r9, #1
 8008722:	4673      	mov	r3, lr
 8008724:	4576      	cmp	r6, lr
 8008726:	dc6b      	bgt.n	8008800 <__kernel_rem_pio2f+0x234>
 8008728:	2d00      	cmp	r5, #0
 800872a:	dd04      	ble.n	8008736 <__kernel_rem_pio2f+0x16a>
 800872c:	2d01      	cmp	r5, #1
 800872e:	d078      	beq.n	8008822 <__kernel_rem_pio2f+0x256>
 8008730:	2d02      	cmp	r5, #2
 8008732:	f000 8081 	beq.w	8008838 <__kernel_rem_pio2f+0x26c>
 8008736:	2f02      	cmp	r7, #2
 8008738:	d12f      	bne.n	800879a <__kernel_rem_pio2f+0x1ce>
 800873a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800873e:	ee30 8a48 	vsub.f32	s16, s0, s16
 8008742:	b353      	cbz	r3, 800879a <__kernel_rem_pio2f+0x1ce>
 8008744:	4628      	mov	r0, r5
 8008746:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800874a:	f000 fa47 	bl	8008bdc <scalbnf>
 800874e:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8008752:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008756:	e020      	b.n	800879a <__kernel_rem_pio2f+0x1ce>
 8008758:	ee60 7a28 	vmul.f32	s15, s0, s17
 800875c:	3f01      	subs	r7, #1
 800875e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008762:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008766:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800876a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800876e:	ecac 0a01 	vstmia	ip!, {s0}
 8008772:	ed90 0a00 	vldr	s0, [r0]
 8008776:	ee37 0a80 	vadd.f32	s0, s15, s0
 800877a:	e799      	b.n	80086b0 <__kernel_rem_pio2f+0xe4>
 800877c:	d105      	bne.n	800878a <__kernel_rem_pio2f+0x1be>
 800877e:	1e70      	subs	r0, r6, #1
 8008780:	ab08      	add	r3, sp, #32
 8008782:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8008786:	11ff      	asrs	r7, r7, #7
 8008788:	e7c5      	b.n	8008716 <__kernel_rem_pio2f+0x14a>
 800878a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800878e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008796:	da31      	bge.n	80087fc <__kernel_rem_pio2f+0x230>
 8008798:	2700      	movs	r7, #0
 800879a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800879e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087a2:	f040 809b 	bne.w	80088dc <__kernel_rem_pio2f+0x310>
 80087a6:	1e74      	subs	r4, r6, #1
 80087a8:	46a4      	mov	ip, r4
 80087aa:	2000      	movs	r0, #0
 80087ac:	45d4      	cmp	ip, sl
 80087ae:	da4a      	bge.n	8008846 <__kernel_rem_pio2f+0x27a>
 80087b0:	2800      	cmp	r0, #0
 80087b2:	d07a      	beq.n	80088aa <__kernel_rem_pio2f+0x2de>
 80087b4:	ab08      	add	r3, sp, #32
 80087b6:	3d08      	subs	r5, #8
 80087b8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	f000 8081 	beq.w	80088c4 <__kernel_rem_pio2f+0x2f8>
 80087c2:	4628      	mov	r0, r5
 80087c4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80087c8:	00a5      	lsls	r5, r4, #2
 80087ca:	f000 fa07 	bl	8008bdc <scalbnf>
 80087ce:	aa44      	add	r2, sp, #272	; 0x110
 80087d0:	1d2b      	adds	r3, r5, #4
 80087d2:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80088d4 <__kernel_rem_pio2f+0x308>
 80087d6:	18d1      	adds	r1, r2, r3
 80087d8:	4622      	mov	r2, r4
 80087da:	2a00      	cmp	r2, #0
 80087dc:	f280 80ae 	bge.w	800893c <__kernel_rem_pio2f+0x370>
 80087e0:	4622      	mov	r2, r4
 80087e2:	2a00      	cmp	r2, #0
 80087e4:	f2c0 80cc 	blt.w	8008980 <__kernel_rem_pio2f+0x3b4>
 80087e8:	a944      	add	r1, sp, #272	; 0x110
 80087ea:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 80087ee:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 80088cc <__kernel_rem_pio2f+0x300>
 80087f2:	eddf 7a39 	vldr	s15, [pc, #228]	; 80088d8 <__kernel_rem_pio2f+0x30c>
 80087f6:	2000      	movs	r0, #0
 80087f8:	1aa1      	subs	r1, r4, r2
 80087fa:	e0b6      	b.n	800896a <__kernel_rem_pio2f+0x39e>
 80087fc:	2702      	movs	r7, #2
 80087fe:	e78c      	b.n	800871a <__kernel_rem_pio2f+0x14e>
 8008800:	6820      	ldr	r0, [r4, #0]
 8008802:	b94b      	cbnz	r3, 8008818 <__kernel_rem_pio2f+0x24c>
 8008804:	b118      	cbz	r0, 800880e <__kernel_rem_pio2f+0x242>
 8008806:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800880a:	6020      	str	r0, [r4, #0]
 800880c:	2001      	movs	r0, #1
 800880e:	f10e 0e01 	add.w	lr, lr, #1
 8008812:	3404      	adds	r4, #4
 8008814:	4603      	mov	r3, r0
 8008816:	e785      	b.n	8008724 <__kernel_rem_pio2f+0x158>
 8008818:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800881c:	6020      	str	r0, [r4, #0]
 800881e:	4618      	mov	r0, r3
 8008820:	e7f5      	b.n	800880e <__kernel_rem_pio2f+0x242>
 8008822:	1e74      	subs	r4, r6, #1
 8008824:	a808      	add	r0, sp, #32
 8008826:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800882a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800882e:	f10d 0c20 	add.w	ip, sp, #32
 8008832:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8008836:	e77e      	b.n	8008736 <__kernel_rem_pio2f+0x16a>
 8008838:	1e74      	subs	r4, r6, #1
 800883a:	a808      	add	r0, sp, #32
 800883c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8008840:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8008844:	e7f3      	b.n	800882e <__kernel_rem_pio2f+0x262>
 8008846:	ab08      	add	r3, sp, #32
 8008848:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800884c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008850:	4318      	orrs	r0, r3
 8008852:	e7ab      	b.n	80087ac <__kernel_rem_pio2f+0x1e0>
 8008854:	f10c 0c01 	add.w	ip, ip, #1
 8008858:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800885c:	2c00      	cmp	r4, #0
 800885e:	d0f9      	beq.n	8008854 <__kernel_rem_pio2f+0x288>
 8008860:	9b05      	ldr	r3, [sp, #20]
 8008862:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8008866:	eb0d 0003 	add.w	r0, sp, r3
 800886a:	9b01      	ldr	r3, [sp, #4]
 800886c:	18f4      	adds	r4, r6, r3
 800886e:	ab1c      	add	r3, sp, #112	; 0x70
 8008870:	1c77      	adds	r7, r6, #1
 8008872:	384c      	subs	r0, #76	; 0x4c
 8008874:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008878:	4466      	add	r6, ip
 800887a:	42be      	cmp	r6, r7
 800887c:	f6ff af0b 	blt.w	8008696 <__kernel_rem_pio2f+0xca>
 8008880:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8008884:	f8dd e008 	ldr.w	lr, [sp, #8]
 8008888:	ee07 3a90 	vmov	s15, r3
 800888c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008890:	f04f 0c00 	mov.w	ip, #0
 8008894:	ece4 7a01 	vstmia	r4!, {s15}
 8008898:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80088d8 <__kernel_rem_pio2f+0x30c>
 800889c:	46a1      	mov	r9, r4
 800889e:	458c      	cmp	ip, r1
 80088a0:	dd07      	ble.n	80088b2 <__kernel_rem_pio2f+0x2e6>
 80088a2:	ece0 7a01 	vstmia	r0!, {s15}
 80088a6:	3701      	adds	r7, #1
 80088a8:	e7e7      	b.n	800887a <__kernel_rem_pio2f+0x2ae>
 80088aa:	9804      	ldr	r0, [sp, #16]
 80088ac:	f04f 0c01 	mov.w	ip, #1
 80088b0:	e7d2      	b.n	8008858 <__kernel_rem_pio2f+0x28c>
 80088b2:	ecfe 6a01 	vldmia	lr!, {s13}
 80088b6:	ed39 7a01 	vldmdb	r9!, {s14}
 80088ba:	f10c 0c01 	add.w	ip, ip, #1
 80088be:	eee6 7a87 	vfma.f32	s15, s13, s14
 80088c2:	e7ec      	b.n	800889e <__kernel_rem_pio2f+0x2d2>
 80088c4:	3c01      	subs	r4, #1
 80088c6:	e775      	b.n	80087b4 <__kernel_rem_pio2f+0x1e8>
 80088c8:	08009498 	.word	0x08009498
 80088cc:	0800946c 	.word	0x0800946c
 80088d0:	43800000 	.word	0x43800000
 80088d4:	3b800000 	.word	0x3b800000
 80088d8:	00000000 	.word	0x00000000
 80088dc:	9b03      	ldr	r3, [sp, #12]
 80088de:	eeb0 0a48 	vmov.f32	s0, s16
 80088e2:	1a98      	subs	r0, r3, r2
 80088e4:	f000 f97a 	bl	8008bdc <scalbnf>
 80088e8:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80088d0 <__kernel_rem_pio2f+0x304>
 80088ec:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80088f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088f4:	db19      	blt.n	800892a <__kernel_rem_pio2f+0x35e>
 80088f6:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80088d4 <__kernel_rem_pio2f+0x308>
 80088fa:	ee60 7a27 	vmul.f32	s15, s0, s15
 80088fe:	aa08      	add	r2, sp, #32
 8008900:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008904:	1c74      	adds	r4, r6, #1
 8008906:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800890a:	3508      	adds	r5, #8
 800890c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8008910:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008914:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008918:	ee10 3a10 	vmov	r3, s0
 800891c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8008920:	ee17 3a90 	vmov	r3, s15
 8008924:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8008928:	e74b      	b.n	80087c2 <__kernel_rem_pio2f+0x1f6>
 800892a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800892e:	aa08      	add	r2, sp, #32
 8008930:	ee10 3a10 	vmov	r3, s0
 8008934:	4634      	mov	r4, r6
 8008936:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800893a:	e742      	b.n	80087c2 <__kernel_rem_pio2f+0x1f6>
 800893c:	a808      	add	r0, sp, #32
 800893e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8008942:	9001      	str	r0, [sp, #4]
 8008944:	ee07 0a90 	vmov	s15, r0
 8008948:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800894c:	3a01      	subs	r2, #1
 800894e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008952:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008956:	ed61 7a01 	vstmdb	r1!, {s15}
 800895a:	e73e      	b.n	80087da <__kernel_rem_pio2f+0x20e>
 800895c:	ecfc 6a01 	vldmia	ip!, {s13}
 8008960:	ecb6 7a01 	vldmia	r6!, {s14}
 8008964:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008968:	3001      	adds	r0, #1
 800896a:	4550      	cmp	r0, sl
 800896c:	dc01      	bgt.n	8008972 <__kernel_rem_pio2f+0x3a6>
 800896e:	4288      	cmp	r0, r1
 8008970:	ddf4      	ble.n	800895c <__kernel_rem_pio2f+0x390>
 8008972:	a858      	add	r0, sp, #352	; 0x160
 8008974:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008978:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800897c:	3a01      	subs	r2, #1
 800897e:	e730      	b.n	80087e2 <__kernel_rem_pio2f+0x216>
 8008980:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8008982:	2a02      	cmp	r2, #2
 8008984:	dc09      	bgt.n	800899a <__kernel_rem_pio2f+0x3ce>
 8008986:	2a00      	cmp	r2, #0
 8008988:	dc2a      	bgt.n	80089e0 <__kernel_rem_pio2f+0x414>
 800898a:	d043      	beq.n	8008a14 <__kernel_rem_pio2f+0x448>
 800898c:	f009 0007 	and.w	r0, r9, #7
 8008990:	b059      	add	sp, #356	; 0x164
 8008992:	ecbd 8b04 	vpop	{d8-d9}
 8008996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800899a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800899c:	2b03      	cmp	r3, #3
 800899e:	d1f5      	bne.n	800898c <__kernel_rem_pio2f+0x3c0>
 80089a0:	ab30      	add	r3, sp, #192	; 0xc0
 80089a2:	442b      	add	r3, r5
 80089a4:	461a      	mov	r2, r3
 80089a6:	4619      	mov	r1, r3
 80089a8:	4620      	mov	r0, r4
 80089aa:	2800      	cmp	r0, #0
 80089ac:	f1a1 0104 	sub.w	r1, r1, #4
 80089b0:	dc51      	bgt.n	8008a56 <__kernel_rem_pio2f+0x48a>
 80089b2:	4621      	mov	r1, r4
 80089b4:	2901      	cmp	r1, #1
 80089b6:	f1a2 0204 	sub.w	r2, r2, #4
 80089ba:	dc5c      	bgt.n	8008a76 <__kernel_rem_pio2f+0x4aa>
 80089bc:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 80088d8 <__kernel_rem_pio2f+0x30c>
 80089c0:	3304      	adds	r3, #4
 80089c2:	2c01      	cmp	r4, #1
 80089c4:	dc67      	bgt.n	8008a96 <__kernel_rem_pio2f+0x4ca>
 80089c6:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80089ca:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 80089ce:	2f00      	cmp	r7, #0
 80089d0:	d167      	bne.n	8008aa2 <__kernel_rem_pio2f+0x4d6>
 80089d2:	edc8 6a00 	vstr	s13, [r8]
 80089d6:	ed88 7a01 	vstr	s14, [r8, #4]
 80089da:	edc8 7a02 	vstr	s15, [r8, #8]
 80089de:	e7d5      	b.n	800898c <__kernel_rem_pio2f+0x3c0>
 80089e0:	aa30      	add	r2, sp, #192	; 0xc0
 80089e2:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 80088d8 <__kernel_rem_pio2f+0x30c>
 80089e6:	4413      	add	r3, r2
 80089e8:	4622      	mov	r2, r4
 80089ea:	2a00      	cmp	r2, #0
 80089ec:	da24      	bge.n	8008a38 <__kernel_rem_pio2f+0x46c>
 80089ee:	b34f      	cbz	r7, 8008a44 <__kernel_rem_pio2f+0x478>
 80089f0:	eef1 7a47 	vneg.f32	s15, s14
 80089f4:	edc8 7a00 	vstr	s15, [r8]
 80089f8:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 80089fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008a00:	aa31      	add	r2, sp, #196	; 0xc4
 8008a02:	2301      	movs	r3, #1
 8008a04:	429c      	cmp	r4, r3
 8008a06:	da20      	bge.n	8008a4a <__kernel_rem_pio2f+0x47e>
 8008a08:	b10f      	cbz	r7, 8008a0e <__kernel_rem_pio2f+0x442>
 8008a0a:	eef1 7a67 	vneg.f32	s15, s15
 8008a0e:	edc8 7a01 	vstr	s15, [r8, #4]
 8008a12:	e7bb      	b.n	800898c <__kernel_rem_pio2f+0x3c0>
 8008a14:	aa30      	add	r2, sp, #192	; 0xc0
 8008a16:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 80088d8 <__kernel_rem_pio2f+0x30c>
 8008a1a:	4413      	add	r3, r2
 8008a1c:	2c00      	cmp	r4, #0
 8008a1e:	da05      	bge.n	8008a2c <__kernel_rem_pio2f+0x460>
 8008a20:	b10f      	cbz	r7, 8008a26 <__kernel_rem_pio2f+0x45a>
 8008a22:	eef1 7a67 	vneg.f32	s15, s15
 8008a26:	edc8 7a00 	vstr	s15, [r8]
 8008a2a:	e7af      	b.n	800898c <__kernel_rem_pio2f+0x3c0>
 8008a2c:	ed33 7a01 	vldmdb	r3!, {s14}
 8008a30:	3c01      	subs	r4, #1
 8008a32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008a36:	e7f1      	b.n	8008a1c <__kernel_rem_pio2f+0x450>
 8008a38:	ed73 7a01 	vldmdb	r3!, {s15}
 8008a3c:	3a01      	subs	r2, #1
 8008a3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008a42:	e7d2      	b.n	80089ea <__kernel_rem_pio2f+0x41e>
 8008a44:	eef0 7a47 	vmov.f32	s15, s14
 8008a48:	e7d4      	b.n	80089f4 <__kernel_rem_pio2f+0x428>
 8008a4a:	ecb2 7a01 	vldmia	r2!, {s14}
 8008a4e:	3301      	adds	r3, #1
 8008a50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008a54:	e7d6      	b.n	8008a04 <__kernel_rem_pio2f+0x438>
 8008a56:	edd1 7a00 	vldr	s15, [r1]
 8008a5a:	edd1 6a01 	vldr	s13, [r1, #4]
 8008a5e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008a62:	3801      	subs	r0, #1
 8008a64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008a68:	ed81 7a00 	vstr	s14, [r1]
 8008a6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a70:	edc1 7a01 	vstr	s15, [r1, #4]
 8008a74:	e799      	b.n	80089aa <__kernel_rem_pio2f+0x3de>
 8008a76:	edd2 7a00 	vldr	s15, [r2]
 8008a7a:	edd2 6a01 	vldr	s13, [r2, #4]
 8008a7e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008a82:	3901      	subs	r1, #1
 8008a84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008a88:	ed82 7a00 	vstr	s14, [r2]
 8008a8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a90:	edc2 7a01 	vstr	s15, [r2, #4]
 8008a94:	e78e      	b.n	80089b4 <__kernel_rem_pio2f+0x3e8>
 8008a96:	ed33 7a01 	vldmdb	r3!, {s14}
 8008a9a:	3c01      	subs	r4, #1
 8008a9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008aa0:	e78f      	b.n	80089c2 <__kernel_rem_pio2f+0x3f6>
 8008aa2:	eef1 6a66 	vneg.f32	s13, s13
 8008aa6:	eeb1 7a47 	vneg.f32	s14, s14
 8008aaa:	edc8 6a00 	vstr	s13, [r8]
 8008aae:	ed88 7a01 	vstr	s14, [r8, #4]
 8008ab2:	eef1 7a67 	vneg.f32	s15, s15
 8008ab6:	e790      	b.n	80089da <__kernel_rem_pio2f+0x40e>

08008ab8 <__kernel_sinf>:
 8008ab8:	ee10 3a10 	vmov	r3, s0
 8008abc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ac0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008ac4:	da04      	bge.n	8008ad0 <__kernel_sinf+0x18>
 8008ac6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008aca:	ee17 3a90 	vmov	r3, s15
 8008ace:	b35b      	cbz	r3, 8008b28 <__kernel_sinf+0x70>
 8008ad0:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008ad4:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008b2c <__kernel_sinf+0x74>
 8008ad8:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8008b30 <__kernel_sinf+0x78>
 8008adc:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008ae0:	eddf 7a14 	vldr	s15, [pc, #80]	; 8008b34 <__kernel_sinf+0x7c>
 8008ae4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008ae8:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8008b38 <__kernel_sinf+0x80>
 8008aec:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008af0:	eddf 7a12 	vldr	s15, [pc, #72]	; 8008b3c <__kernel_sinf+0x84>
 8008af4:	ee60 6a07 	vmul.f32	s13, s0, s14
 8008af8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008afc:	b930      	cbnz	r0, 8008b0c <__kernel_sinf+0x54>
 8008afe:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8008b40 <__kernel_sinf+0x88>
 8008b02:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008b06:	eea6 0a26 	vfma.f32	s0, s12, s13
 8008b0a:	4770      	bx	lr
 8008b0c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008b10:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008b14:	eee0 7a86 	vfma.f32	s15, s1, s12
 8008b18:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8008b1c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8008b44 <__kernel_sinf+0x8c>
 8008b20:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8008b24:	ee30 0a60 	vsub.f32	s0, s0, s1
 8008b28:	4770      	bx	lr
 8008b2a:	bf00      	nop
 8008b2c:	2f2ec9d3 	.word	0x2f2ec9d3
 8008b30:	b2d72f34 	.word	0xb2d72f34
 8008b34:	3638ef1b 	.word	0x3638ef1b
 8008b38:	b9500d01 	.word	0xb9500d01
 8008b3c:	3c088889 	.word	0x3c088889
 8008b40:	be2aaaab 	.word	0xbe2aaaab
 8008b44:	3e2aaaab 	.word	0x3e2aaaab

08008b48 <fabsf>:
 8008b48:	ee10 3a10 	vmov	r3, s0
 8008b4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b50:	ee00 3a10 	vmov	s0, r3
 8008b54:	4770      	bx	lr
	...

08008b58 <floorf>:
 8008b58:	ee10 3a10 	vmov	r3, s0
 8008b5c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008b60:	3a7f      	subs	r2, #127	; 0x7f
 8008b62:	2a16      	cmp	r2, #22
 8008b64:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008b68:	dc2a      	bgt.n	8008bc0 <floorf+0x68>
 8008b6a:	2a00      	cmp	r2, #0
 8008b6c:	da11      	bge.n	8008b92 <floorf+0x3a>
 8008b6e:	eddf 7a18 	vldr	s15, [pc, #96]	; 8008bd0 <floorf+0x78>
 8008b72:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008b76:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b7e:	dd05      	ble.n	8008b8c <floorf+0x34>
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	da23      	bge.n	8008bcc <floorf+0x74>
 8008b84:	4a13      	ldr	r2, [pc, #76]	; (8008bd4 <floorf+0x7c>)
 8008b86:	2900      	cmp	r1, #0
 8008b88:	bf18      	it	ne
 8008b8a:	4613      	movne	r3, r2
 8008b8c:	ee00 3a10 	vmov	s0, r3
 8008b90:	4770      	bx	lr
 8008b92:	4911      	ldr	r1, [pc, #68]	; (8008bd8 <floorf+0x80>)
 8008b94:	4111      	asrs	r1, r2
 8008b96:	420b      	tst	r3, r1
 8008b98:	d0fa      	beq.n	8008b90 <floorf+0x38>
 8008b9a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8008bd0 <floorf+0x78>
 8008b9e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008ba2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008baa:	ddef      	ble.n	8008b8c <floorf+0x34>
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	bfbe      	ittt	lt
 8008bb0:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8008bb4:	fa40 f202 	asrlt.w	r2, r0, r2
 8008bb8:	189b      	addlt	r3, r3, r2
 8008bba:	ea23 0301 	bic.w	r3, r3, r1
 8008bbe:	e7e5      	b.n	8008b8c <floorf+0x34>
 8008bc0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008bc4:	d3e4      	bcc.n	8008b90 <floorf+0x38>
 8008bc6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008bca:	4770      	bx	lr
 8008bcc:	2300      	movs	r3, #0
 8008bce:	e7dd      	b.n	8008b8c <floorf+0x34>
 8008bd0:	7149f2ca 	.word	0x7149f2ca
 8008bd4:	bf800000 	.word	0xbf800000
 8008bd8:	007fffff 	.word	0x007fffff

08008bdc <scalbnf>:
 8008bdc:	ee10 3a10 	vmov	r3, s0
 8008be0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8008be4:	d025      	beq.n	8008c32 <scalbnf+0x56>
 8008be6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008bea:	d302      	bcc.n	8008bf2 <scalbnf+0x16>
 8008bec:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008bf0:	4770      	bx	lr
 8008bf2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8008bf6:	d122      	bne.n	8008c3e <scalbnf+0x62>
 8008bf8:	4b2a      	ldr	r3, [pc, #168]	; (8008ca4 <scalbnf+0xc8>)
 8008bfa:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8008ca8 <scalbnf+0xcc>
 8008bfe:	4298      	cmp	r0, r3
 8008c00:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008c04:	db16      	blt.n	8008c34 <scalbnf+0x58>
 8008c06:	ee10 3a10 	vmov	r3, s0
 8008c0a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008c0e:	3a19      	subs	r2, #25
 8008c10:	4402      	add	r2, r0
 8008c12:	2afe      	cmp	r2, #254	; 0xfe
 8008c14:	dd15      	ble.n	8008c42 <scalbnf+0x66>
 8008c16:	ee10 3a10 	vmov	r3, s0
 8008c1a:	eddf 7a24 	vldr	s15, [pc, #144]	; 8008cac <scalbnf+0xd0>
 8008c1e:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008cb0 <scalbnf+0xd4>
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	eeb0 7a67 	vmov.f32	s14, s15
 8008c28:	bfb8      	it	lt
 8008c2a:	eef0 7a66 	vmovlt.f32	s15, s13
 8008c2e:	ee27 0a27 	vmul.f32	s0, s14, s15
 8008c32:	4770      	bx	lr
 8008c34:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008cb4 <scalbnf+0xd8>
 8008c38:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008c3c:	4770      	bx	lr
 8008c3e:	0dd2      	lsrs	r2, r2, #23
 8008c40:	e7e6      	b.n	8008c10 <scalbnf+0x34>
 8008c42:	2a00      	cmp	r2, #0
 8008c44:	dd06      	ble.n	8008c54 <scalbnf+0x78>
 8008c46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008c4a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008c4e:	ee00 3a10 	vmov	s0, r3
 8008c52:	4770      	bx	lr
 8008c54:	f112 0f16 	cmn.w	r2, #22
 8008c58:	da1a      	bge.n	8008c90 <scalbnf+0xb4>
 8008c5a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008c5e:	4298      	cmp	r0, r3
 8008c60:	ee10 3a10 	vmov	r3, s0
 8008c64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c68:	dd0a      	ble.n	8008c80 <scalbnf+0xa4>
 8008c6a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8008cac <scalbnf+0xd0>
 8008c6e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008cb0 <scalbnf+0xd4>
 8008c72:	eef0 7a40 	vmov.f32	s15, s0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	bf18      	it	ne
 8008c7a:	eeb0 0a47 	vmovne.f32	s0, s14
 8008c7e:	e7db      	b.n	8008c38 <scalbnf+0x5c>
 8008c80:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8008cb4 <scalbnf+0xd8>
 8008c84:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8008cb8 <scalbnf+0xdc>
 8008c88:	eef0 7a40 	vmov.f32	s15, s0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	e7f3      	b.n	8008c78 <scalbnf+0x9c>
 8008c90:	3219      	adds	r2, #25
 8008c92:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008c96:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008c9a:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008cbc <scalbnf+0xe0>
 8008c9e:	ee07 3a10 	vmov	s14, r3
 8008ca2:	e7c4      	b.n	8008c2e <scalbnf+0x52>
 8008ca4:	ffff3cb0 	.word	0xffff3cb0
 8008ca8:	4c000000 	.word	0x4c000000
 8008cac:	7149f2ca 	.word	0x7149f2ca
 8008cb0:	f149f2ca 	.word	0xf149f2ca
 8008cb4:	0da24260 	.word	0x0da24260
 8008cb8:	8da24260 	.word	0x8da24260
 8008cbc:	33000000 	.word	0x33000000

08008cc0 <_init>:
 8008cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cc2:	bf00      	nop
 8008cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cc6:	bc08      	pop	{r3}
 8008cc8:	469e      	mov	lr, r3
 8008cca:	4770      	bx	lr

08008ccc <_fini>:
 8008ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cce:	bf00      	nop
 8008cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cd2:	bc08      	pop	{r3}
 8008cd4:	469e      	mov	lr, r3
 8008cd6:	4770      	bx	lr
